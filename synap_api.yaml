
---
openapi: "3.0.0"
info:  # (MANDATORY)
    title: "SYNAP API"
    version: "0.0.1"  # major.minor.patch
    description: "SYNAP's API specification"
    contact:
        name: "Cranium Ventures Pte Ltd"
        url:  "https://www.craniumventures.com"
        email: "info@craniumventures.com"
servers:
    -
        url: "https://sandbox01.craniumventures.com/synap/dev"
        description: "Sandbox Environment"
components:
    schemas:
        CursorRecordCountOnRequest:
            type: "object"
            properties:
                creation:
                    description: "should a cursor be created?"
                    type: "string"
                    enum:
                        - always
                        - auto
                        - never
                recordOffset:
                    description: "offset of the record to retrieve"
                    type: "integer"
                    format: "int32"
                    minimum: 0
                    example: 0
                recordCount:
                    description: "number of records to be retrieved"
                    type: "integer"
                    format: "int32"
                    minimum: 1
                    example: 1
            required:
                - recordOffset
        CursorIdentifier:
            description: "identifier used to uniquely identify a cursor created by the system"
            type: "string"
            minLength: 1
            example: "<cursor_identifier>"
        CursorOnRequest:
            allOf:
                - type: "object"
                  properties:
                    identifier:
                        $ref: "#/components/schemas/CursorIdentifier"
                  required:
                    - identifier
                - $ref: "#/components/schemas/CursorRecordCountOnRequest"
        CursorOnResponse:
            type: "object"
            properties:
                identifier:
                        $ref: "#/components/schemas/CursorIdentifier"
                totalRecords:
                    description: "total number of records a cursor holds"
                    type: "number"
                    example: 10
            required:
                - identifier
                - totalRecords
        CursorRecordIdentifierOnResponse:
            type: "object"
            properties:
                recordIdentifier:
                    description: "record's identifier of a given cursor's context"
                    type: "string"
        RecordStatus:
            type: "object"
            properties:
                recordStatus:
                    description: "The current status/state of a record"
                    type: "string"
                    enum:
                        - active
                        - inactive
                        - suspense
                        - pendingApproval
                        - disable
                        - locked
                        - deleted
                        - noPassword
                    example: "active"
        CreateDateTime:
            type: "object"
            properties:
                createDateTime:
                    description: "date & time of create record"
                    type: "string"
                    format: "date-time"
        RecordDateTime:
            type: "object"
            properties:
                recordDateTime:
                    description: "date & time of update record"
                    type: "string"
                    format: "date-time"
        EntityIdentifier:
            type: "object"
            properties:
                identifier:
                    description: "unique identity of an entity in a given scope"
                    type: "string"
                    minLength: 1
                    example: "<identifier_of_an_entity>"
            required:
                - identifier
        MerchantIdentifier:
            type: "object"
            properties:
                identifier:
                    description: "merchant's unique identity"
                    type: "string"
                    minLength: 1
                    example: "110000000000053"
            required:
                - identifier
        BusinessPersonName:
            type: "object"
            properties:
                name:
                    description: "The name of a person or business"
                    type: "string"
                    example: "John Smith"
        MailingAddressType:
            type: "object"
            properties:
                type:
                    description: "the type of mailing address"
                    type: "string"
                    enum:
                        - "correspondence"
                        - "billing"
                        - "shipping"
            required:
                - type
        MailingAddress:
            type: "object"
            properties:
                countryCode:
                    description: "country code of mailing address"
                    $ref: "#/components/schemas/CountryCode"
                addressLine1:
                    description: "first line of mailing address"
                    type: "string"
                    minLength: 1
                    example: "unit# and building name"
                addressLine2:
                    description: "second line of mailing address"
                    type: "string"
                    minLength: 1
                    example: "street name"
                addressLine3:
                    description: "third line of mailing address"
                    type: "string"
                    minLength: 1
                    example: "name of town or village"
                city:
                    description: "city name of mailing address"
                    type: "string"
                    minLength: 1
                    example: "Middle City"
                provinceState:
                    description: "province or state of mailing address"
                    type: "string"
                    minLength: 1
                    example: "Big State"
                postalCode:
                    description: "postal code of mailing address"
                    type: "string"
                    minLength: 1
                    example: "123456"
        ContactAddress:
            type: "object"
            properties:
                address:
                    description: "the plain text address for this contact; it will be empty if the actor is not the target user; this element holds the address which has been parsed by the system"
                    type: "string"
        EmailAddressAttribute:
            description: "The plain text email address"
            type: "string"
            format: "email"
            example: "john.smith@example.com"
        EmailAddress:
            type: "object"
            properties:
                emailAddress:
                    $ref: "#/components/schemas/EmailAddressAttribute"
        CCEmailAddress:
            type: "object"
            properties:
                ccEmailAddress:
                    $ref: "#/components/schemas/EmailAddressAttribute"
        PhoneNumberAttribute:
            description: "The plain text of formatted phone number"
            type: "string"
            example: "+1 (555) 555-1234"
        PhoneNumber:
            type: "object"
            properties:
                phoneNumber:
                    $ref: "#/components/schemas/PhoneNumberAttribute"
        MobileNumber:
            type: "object"
            properties:
                mobileNumber:
                    $ref: "#/components/schemas/PhoneNumberAttribute"
        UserContactType:
            type: "object"
            properties:
                type:
                    description: "The type of a contact"
                    type: "string"
                    enum:
                        - "email"
                        - "mobile"
                        - "landline"
                        - "url"
        UserContact:
            allOf:
                - $ref: "#/components/schemas/RecordStatus"
                - $ref: "#/components/schemas/ContactAddress"
                - type: "object"
                  properties:
                    class:
                        type: "number"
                        description: "the contact class"
                    identifier:
                        type: "string"
                        description: "a system generated key which can be used to retrieve this contact record"
                    maskedAddress:
                        type: "string"
                        description: "the contact address masked for security purposes; an application must only display the masked address even if a plain text address is present in the response"
                    originalAddress:
                        type: "string"
                        description: "the plain text address for this contact; it will be empty if the actor is not the target user; this element holds the address string as entered by the user when the record was created or updated"
                    flags:
                        $ref: "#/components/schemas/UserContactFlags"
        UserContactFlags:
            type: "object"
            properties:
                verified:
                    type: "boolean"
                    description: "the record has been verified"
                primary:
                    type: "boolean"
                    description: "this is a primary address"
                default:
                    type: "boolean"
                    description: "this is a default address"
                phone:
                    type: "boolean"
                    description: "this is a phone type record"
                messageCapable:
                    type: "boolean"
                    description: "this type of address is capable of receiving notification messages"
                url:
                    type: "boolean"
                    description: "this is a social media address record"
                notification:
                    type: "boolean"
                    description: "this record can receive account notification messages from the system"
                recovery:
                    type: "boolean"
                    description: "this record can be used for password and account recovery operations"
        UserContactRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    user:
                        type: "object"
                        properties:
                            name:
                                type: "string"
                        required:
                            - name
                    mobiles:
                        $ref: "#/components/schemas/UserMobileContactRecords"
                    emails:
                        $ref: "#/components/schemas/UserEmailContactRecords"
                    landlines:
                        $ref: "#/components/schemas/UserLandlineContactRecords"
                required:
                    - user
        UserMobileContactRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    mobile:
                        $ref: "#/components/schemas/UserContact"
                required:
                    - mobile
        UserEmailContactRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    email:
                        $ref: "#/components/schemas/UserContact"
                required:
                    - email
        UserLandlineContactRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    landline:
                        $ref: "#/components/schemas/UserContact"
                required:
                    - landline
        UserRecord:
            allOf:
                - $ref: "#/components/schemas/RecordStatus"
                - $ref: "#/components/schemas/EmailAddress"
                - $ref: "#/components/schemas/MobileNumber"
                - $ref: "#/components/schemas/CreateDateTime"
                - $ref: "#/components/schemas/RecordDateTime"
                - type: "object"
                  properties:
                    rowId:
                        type: "number"
                    name:
                        type: "string"
                    identifier:
                        type: "string"
                    externalIdentifier:
                        type: "string"
                    groupIdentifier:
                        type: "string"
                    policyIdentifier:
                        type: "string"
                    organizationIdentifier:
                        type: "string"
                    multiFactorIdentifier:
                        type: "string"
                    multiFactorName:
                        type: "string"
                    lastFailedAuthenticateDateTime:
                        type: "string"
                        format: "date-time"
                    lastLoginLocation:
                        type: "string"
                    lastFailedLoginLocation:
                        type: "string"
                    lockoutPeriod:
                        type: "string"
                    failedAuthenticateAttemptCount:
                        type: "number"
                    sessionExceededPolicy:
                        type: "number"
                    loginShell:
                        type: "string"
                    loginShellArguments:
                        type: "string"
                    serverLoginScriptPath:
                        type: "string"
                    homeDirectory:
                        type: "string"
                    notificationOptInMap:
                        type: "string"
                    restricted:
                        type: "string"
                    preferName:
                        type: "string"
        UserRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    user:
                        $ref: "#/components/schemas/UserRecord"
        UserProfile:
            allOf:
                - $ref: "#/components/schemas/CreateDateTime"
                - type: "object"
                  properties:
                    nationalRegistrationIdentityCard:
                        type: "string"
                    gender:
                        type: "string"
                        enum:
                            - "male"
                            - "female"
                    nationality:
                        type: "string"
                    race:
                        type: "string"
                    birthdate:
                        type: "string"
                        format: "date"
                    salutationPrefix:
                        type: "string"
                    salutationSuffix:
                        type: "string"
                    firstName:
                        type: "string"
                    middleName:
                        type: "string"
                    lastName:
                        type: "string"
                    otherName:
                        type: "string"
        UserTeamRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    user:
                        type: "object"
                        properties:
                            name:
                                type: "string"
                    teams:
                        type: "array"
                        items:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
        TeamRecord:
            allOf:
                - $ref: "#/components/schemas/RecordStatus"
                - $ref: "#/components/schemas/EmailAddress"
                - $ref: "#/components/schemas/MobileNumber"
                - $ref: "#/components/schemas/CreateDateTime"
                - $ref: "#/components/schemas/RecordDateTime"
                - type: "object"
                  properties:
                    rowId:
                        type: "number"
                    name:
                        type: "string"
                    identifier:
                        type: "string"
                    restricted:
                        type: "string"
        TeamRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    teams:
                        $ref: "#/components/schemas/TeamRecord"
        TeamUserRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    team:
                        type: "object"
                        properties:
                            name:
                                type: "string"
                    users:
                        type: "array"
                        items:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
        ResponseResult:
            type: "object"
            properties:
                code:
                    type: "string"
                    description: "success or error code"
                    example: "ErrorCode"
                    enum:
                        - Success
                        - Fail
                        - InvalidSessionToken
                        - InvalidRequestValues
                        - ServerTimeout
                        - SystemError
                        - InvalidProvider
                        - NoRecordFound
                        - InvalidRecord
                        - InvalidAccessRightOwner
                reason:
                    type: "string"
                    description: "reason for error occur"
                    example: "ErrorReason"
            required:
                - code
        AccessRightObjectNameOnRequest:
            type: "object"
            properties:
                name:
                    type: "string"
                    description: "name of the object which the rights are processed"
                    example: "frog"
            required:
                - name
        AccessRightActions:
            type: "object"
            description: "one or more actions"
            properties:
                <replace_with_action_name>:
                    type: "boolean"
                    description: "name of an action; values are ignored during retrieval however 'true' would mean an action to be granted and 'false' would mean an action to be revoked"
        AccessRightObjectRecord:
            allOf:
                - $ref: "#/components/schemas/RecordStatus"
                - $ref: "#/components/schemas/CreateDateTime"
                - $ref: "#/components/schemas/RecordDateTime"
                - type: "object"
                  properties:
                    rowId:
                        type: "number"
                    name:
                        type: "string"
                    identifier:
                        type: "string"
                    class:
                        type: "string"
                    restricted:
                        type: "string"
        AccessRightObjectRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    accessRightObject:
                        $ref: "#/components/schemas/AccessRightObjectRecord"
        AccessRightActionRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    accessRightObject:
                        type: "object"
                        properties:
                            name:
                                type: "string"
                            identifier:
                                type: "string"
                            accessRightActions:
                                description: "The list of access right actions related to an object"
                                type: "object"
        ValidationChecks:
            type: "object"
            properties:
                minimumLengthCheck:
                    type: "boolean"
                    description: "Validate against password.minimumLength"
                alphaCheck:
                    type: "boolean"
                    description: "Must contain at least one alphabet"
                upperCaseCheck:
                    type: "boolean"
                    description: "Must contain at least one upper case letter"
                lowerCaseCheck:
                    type: "boolean"
                    description: "Must contain at least one lower case letter"
                digitCheck:
                    type: "boolean"
                    description: "Must contain at least one digit"
                specialCharacterCheck:
                    type: "boolean"
                    description: "Must contain at least one special char (not an alphabet, not a digit)"
                usernameStrippedCheck:
                    type: "boolean"
                    description: "The password cannot contain the user name (in this case the user name and password are stripped of all non-alphabet as well as email suffix before a match is attempted)"
                usernameCheck:
                    type: "boolean"
                    description: "The password cannot contain the user name (in this the user name is not stripped of non-alphabet and the email suffix)"
        PasswordPolicyName:
            type: "object"
            properties:
                name:
                    description: "The name assigned to this policy"
                    type: "string"
            required:
                - name
        PasswordPolicy:
            allOf:
                - $ref: "#/components/schemas/PasswordPolicyName"
                - type: "object"
                  properties:
                    name:
                        description: "The name assigned to this policy"
                        type: "string"
                    minimumStrength:
                        description: "The minimum strength, as determinted by entropy, which a password must have"
                        type: "integer"
                        format: "int32"
                    minimumLength:
                        description: "The minimum length a password must have. A value of zero implies no minimum required"
                        type: "integer"
                        format: "int32"
                    historySize:
                        description: "The number of past passwords in the password history file. This indicates how many past passwords are checked when a user attempts to change their password. A value of zero means never check against old password."
                        type: "integer"
                        format: "int32"
                    maximumLife:
                        description: "The number of days after which the user must change their password. A value of zero means the user is never required to change their password."
                        type: "integer"
                        format: "int32"
                    maximumFailedAttempts:
                        description: "The maximum consecutive times a password authentication fails after which the user is locked out. A value of zero means to never lock the record."
                        type: "integer"
                        format: "int32"
                    lockoutPeriod:
                        description: "The number of seconds to lockout an account after 'maximumFailedAttempts' consecutive password failures. If this field is zero, then the record is locked until an administrator unlocks the record."
                        type: "integer"
                        format: "int32"
                    resetLife:
                        description: "The number of seconds a temporary password is valid."
                        type: "integer"
                        format: "int32"
                    validationChecks:
                        $ref: "#/components/schemas/ValidationChecks"
                    hashAlgorithm:
                        description: "The value determines which hashing algorithm will be used to hash the plaintext password."
                        type: "string"
                        enum:
                            - "pbkdf2"
                            - "digest"
                            - "bcrypt"
                            - "scrypt"
                            - "encrypt"
                            - "random"
                    hashDigest:
                        description: "The message digest to use with the hash algorithm"
                        type: "string"
                        enum:
                            - "md5"
                            - "sha1"
                            - "sha224"
                            - "sha256"
                            - "sha512"
                            - "ripemd160"
                            - "whirlpool"
                            - "random"
                    hashEncoding:
                        description: "How the final hash is encoded in the database"
                        type: "string"
                        enum:
                            - "ascii"
                            - "crypt"
                            - "binary"
                    hashSaltSize:
                        description: "The size of the salt, in bytes, value to apply to password. Some algorithms fix this value or apply a minimum to size of salt. The system will automatically modify this value if required."
                        type: "integer"
                        format: "int32"
                    hashKeySize:
                        description: "The size of the key to pass to the PBKDF2 function."
                        type: "integer"
                        format: "int32"
                    hashRounds:
                        description: "The number of rounds (iterations) to apply the hash algorithm (default is 131,072). Note that some algorithms require a specific number of rounds or set a minimum or maximum on the allowed rounds. Depending on the choice of algorithm, the system will automatically adjust the rounds. The overall minimum number of rounds is 1000."
                        type: "integer"
                        format: "int32"
                    restricted:
                        description: "The name of the organization to which this policy is restricted."
                        type: "string"
        PasswordPolicyRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    passwordPolicy:
                        allOf:
                            - $ref: "#/components/schemas/RecordStatus"
                            - $ref: "#/components/schemas/RecordDateTime"
                            - $ref: "#/components/schemas/PasswordPolicy"
                            - type: "object"
                              properties:
                                rowId:
                                    type: "number"
                                identifier:
                                    type: "string"
        AuthenticationPolicyName:
            type: "object"
            properties:
                name:
                    description: "The name assigned to this authentication policy"
                    type: "string"
            required:
                - name
        AuthenticationPolicyRecord:
            allOf:
                - $ref: "#/components/schemas/AuthenticationPolicyName"
                - type: "object"
                  properties:
                    externalValidator:
                        type: "string"
                    multiFactorName:
                        type: "string"
                    authenticationFlags:
                        type: "integer"
                        format: "int32"
                    inactivityTimeout:
                        description: "The number of idle seconds before a session is automatically logged off. A value of zero implies no inactivity timeout. A negative value implies that idle timeout will be managed by an external entity such as portal rather than main server."
                        type: "integer"
                        format: "int32"
                    maximumSessions:
                        description: "The maximum number of concurrent sessions this policy allows a user. A value of zero indicates that there is no maximum."
                        type: "integer"
                        format: "int32"
                    sessionExceededPolicy:
                        description: "The policy to use when a user exceeds their allowed maximum session count."
                        type: "string"
                        enum:
                            - "reject"
                            - "makeRoom"
                    restricted:
                        description: "The name of the organization to which this policy is restricted."
                        type: "string"
        AuthenticationPolicyRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    authenticationPolicy:
                        allOf:
                            - $ref: "#/components/schemas/RecordStatus"
                            - $ref: "#/components/schemas/RecordDateTime"
                            - $ref: "#/components/schemas/EntityIdentifier"
                            - $ref: "#/components/schemas/AuthenticationPolicyName"
                            - $ref: "#/components/schemas/AuthenticationPolicyRecord"
                    passwordPolicy:
                        allOf:
                            - $ref: "#/components/schemas/EntityIdentifier"
                            - type: "object"
                              properties:
                                module:
                                    type: "string"
                required:
                    - authenticationPolicy
                    - passwordPolicy
        OrganizationName:
            type: "object"
            properties:
                name:
                    description: "The name assigned to this organization"
                    type: "string"
            required:
                - name
        OrganizationRecord:
            allOf:
                - $ref: "#/components/schemas/OrganizationName"
                - type: "object"
                  properties:
                    externalIdentifier:
                        type: "string"
                    serverLoginScriptPath:
                        type: "string"
                    description:
                        description: "full name of an organization"
                        type: "string"
                    restricted:
                        description: "This indicates if this organization should be marked as restricted (true) or unnrestricted (false). The default is 'false'."
                        type: "boolean"
        OrganizationRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    organization:
                        allOf:
                            - $ref: "#/components/schemas/RecordStatus"
                            - $ref: "#/components/schemas/RecordDateTime"
                            - $ref: "#/components/schemas/EntityIdentifier"
                            - $ref: "#/components/schemas/OrganizationName"
                            - $ref: "#/components/schemas/OrganizationRecord"
                    authenticationPolicy:
                        type: "object"
                        properties:
                            identifier:
                                type: "string"
                        required:
                            - identifier
                    team:
                        type: "object"
                        properties:
                            identifier:
                                type: "string"
                        required:
                            - identifier
                required:
                    - organization
                    - authenticationPolicy
                    - team
        SessionUserRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    sessionUser:
                        type: "object"
                        properties:
                            name:
                                type: "string"
                            identifier:
                                type: "string"
                            nodeIdentifier:
                                type: "string"
                            recordStatus:
                                type: "string"
                            lastActivityDateTime:
                                description: "date & time of last activity"
                                type: "string"
                                format: "date-time"
                            expiryInSeconds:
                                type: "number"
                            activeSessions:
                                type: "number"
        SessionRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    cursor:
                        $ref: "#/components/schemas/CursorRecordIdentifierOnResponse"
                    session:
                        type: "object"
                        properties:
                            number:
                                type: "number"
                            flags:
                                type: "number"
                            loginMethod:
                                type: "string"
                            recordStatus:
                                type: "string"
                            lastActivityDateTime:
                                description: "date & time of last activity"
                                type: "string"
                                format: "date-time"
                            createDateTime:
                                description: "date & time of session was created"
                                type: "string"
                                format: "date-time"
                            location:
                                type: "string"
        CountryRecord:
            type: "object"
            properties:
                name:
                    type: "string"
                isoAlpha2Code:
                    type: "string"
                isoAlpha3Code:
                    type: "string"
                isoNumericCode:
                    type: "number"
        CurrencyRecord:
            type: "object"
            properties:
                name:
                    type: "string"
                isoAlphaCode:
                    type: "string"
                isoNumericCode:
                    type: "number"
                symbol:
                    type: "string"
                minorUnits:
                    type: "number"
                isPrefix:
                    type: "boolean"
        CountryCode:
            description: "ISO numeric country code"
            type: "integer"
            format: "int32"
            minimum: 0
            maximum: 999
            example: 840
        CurrencyCode:
            description: "The currency in ISO numeric code"
            type: "integer"
            format: "int32"
            minimum: 0
            maximum: 999
            example: 840
        TransactionRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    transaction:
                        type: "object"
                        properties:
                            recordDateTime:
                                type: "string"
                                format: "date-time"
                            applicationIdentifier:
                                type: "string"
                            messageTypeIdentifier:
                                type: "string"
                            processingCode:
                                type: "string"
                            traceNumber:
                                type: "string"
                            transmissionDateTime:
                                type: "string"
                                format: "date-time"
                            status:
                                type: "string"
                            acquirerInstitution:
                                type: "string"
                            switchSequence:
                                type: "string"
                            amount:
                                type: "number"
                            localTime:
                                type: "string"
                            localDate:
                                type: "string"
                                format: "date-time"
                            retrievalReferenceNumber:
                                type: "string"
                            currencyCode:
                                description: "The payment's currency in ISO numeric code"
                                type: "integer"
                                format: "int32"
                    settlement:
                        type: "object"
                        properties:
                            date:
                                type: "string"
                                format: "date-time"
                            amount:
                                type: "number"
                            rate:
                                type: "number"
                            currencyCode:
                                description: "The settlement's currency in ISO numeric code"
                                type: "integer"
                                format: "int32"
                    paymentInstrument:
                        type: "object"
                        properties:
                            maskedNumber:
                                type: "string"
                            encryptedNumber:
                                type: "string"
                            issuerInstitution:
                                type: "string"
                            countryCode:
                                type: "string"
                            currencyCode:
                                description: "The payment instrument's currency in ISO numeric code"
                                type: "integer"
                                format: "int32"
                            expiry:
                                type: "string"
                    refund:
                        type: "object"
                        properties:
                            amount:
                                type: "number"
                            date:
                                type: "string"
                                format: "date-time"
                    adjustment:
                        type: "object"
                        properties:
                            amount:
                                type: "number"
                            date:
                                type: "string"
                                format: "date-time"
                    merchant:
                        type: "object"
                        properties:
                            identifier:
                                type: "string"
                            categoryCode:
                                type: "string"
                            deviceIdentifier:
                                type: "string"
                            countryCode:
                                type: "string"
                            nameAndLocation:
                                type: "string"
                    customer:
                        type: "object"
                        properties:
                            name:
                                type: "string"
        PaymentRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    payment:
                        type: "object"
                        properties:
                            recordDateTime:
                                type: "string"
                                format: "date-time"
                            applicationIdentifier:
                                type: "string"
                            messageTypeIdentifier:
                                type: "string"
                            processingCode:
                                type: "string"
                            traceNumber:
                                type: "string"
                            transmissionDateTime:
                                type: "string"
                                format: "date-time"
                            status:
                                type: "string"
                            acquirerInstitution:
                                type: "string"
                            switchSequence:
                                type: "string"
                            amount:
                                type: "number"
                            localTime:
                                type: "string"
                            localDate:
                                type: "string"
                                format: "date-time"
                            retrievalReferenceNumber:
                                type: "string"
                            currencyCode:
                                description: "The payment's currency in ISO numeric code"
                                type: "integer"
                                format: "int32"
                    settlement:
                        type: "object"
                        properties:
                            date:
                                type: "string"
                                format: "date-time"
                            amount:
                                type: "number"
                            rate:
                                type: "number"
                            currencyCode:
                                description: "The settlement's currency in ISO numeric code"
                                type: "integer"
                                format: "int32"
                    paymentInstrument:
                        type: "object"
                        properties:
                            maskedNumber:
                                type: "string"
                            encryptedNumber:
                                type: "string"
                            issuerInstitution:
                                type: "string"
                            countryCode:
                                type: "string"
                            currencyCode:
                                description: "The payment instrument's currency in ISO numeric code"
                                type: "integer"
                                format: "int32"
                            expiry:
                                type: "string"
                    refund:
                        type: "object"
                        properties:
                            amount:
                                type: "number"
                            date:
                                type: "string"
                                format: "date-time"
                    adjustment:
                        type: "object"
                        properties:
                            amount:
                                type: "number"
                            date:
                                type: "string"
                                format: "date-time"
                    merchant:
                        type: "object"
                        properties:
                            identifier:
                                type: "string"
                            categoryCode:
                                type: "string"
                            deviceIdentifier:
                                type: "string"
                            countryCode:
                                type: "string"
                            nameAndLocation:
                                type: "string"
                    customer:
                        type: "object"
                        properties:
                            name:
                                type: "string"
        PaymentTokenRecord:
            type: "object"
            properties:
                amount:
                    description: "The payment amount to be collected"
                    type: "number"
                    minimum: 0
                    example: 10
                minimumAmount:
                    description: "The manimum amount needed"
                    type: "number"
                    minimum: 0
                    exclusiveMinimum: true
                    example: 1
                maximumAmount:
                    description: "The maximum amount allowed"
                    type: "number"
                    minimum: 0
                    exclusiveMinimum: true
                    example: 100
                currencyCode:
                    description: "The amount's currency code"
                    $ref: "#/components/schemas/CountryCode"
                name:
                    description: "The purpose/usage of the payment token"
                    type: "string"
                    minLength: 1
                    example: "Donate For Children"
                description:
                    type: "string"
                    minLength: 1
                    example: "Help us protect children around the world"
                image:
                    description: "Base64 encoded string of an image"
                    type: "string"
                    format: "byte"
                amountIsFlexible:
                    description: "Indicator if shopper/customer is allowed to change amount"
                    type: "boolean"
                    example: true
                taxCategoryCode:
                    description: "Indicator if shopper/customer is allowed to change amount"
                    type: "string"
                    minLength: 1
                    example: "taxCategoryCode01"
                collectTaxAutomatically:
                    description: "Indicator if tax is calculated and collected automatically"
                    type: "boolean"
                    example: true
                includeTaxInPrice:
                    description: "Indicator if tax should be included in pricing"
                    type: "boolean"
                    example: true
                allowPromotionCodes:
                    description: "Indicator if shopper/customer is allowed to enter promotion codes"
                    type: "boolean"
                    example: true
                savePaymentDetails:
                    description: "Indicator if payment details shall be saved"
                    type: "boolean"
                    example: true
                requireCustomerPhoneNumber:
                    description: "Indicator if shopper/customer is required to enter phone number"
                    type: "boolean"
                    example: true
                requireCustomerBillingAddress:
                    description: "Indicator if shopper/customer is required to enter billing address"
                    type: "boolean"
                    example: true
                requireCustomerShippingAddress:
                    description: "Indicator if shopper/customer is required to enter shipping address"
                    type: "boolean"
                    example: true
                payButtonText:
                    description: "Text to be presented on the 'PAY' button"
                    type: "string"
                    enum:
                        - "PAY"
                        - "DONATE"
                        - "BOOK"
        PaymentTokenRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    paymentToken:
                        allOf:
                            - $ref: "#/components/schemas/RecordStatus"
                            - $ref: "#/components/schemas/EntityIdentifier"
                            - $ref: "#/components/schemas/PaymentTokenRecord"
                            - required:
                                - recordStatus
                                - identifier
                                - name
                                - description
                                - amount
                                - amountIsFlexible
                    merchant:
                        type: "object"
                        properties:
                            identifier:
                                type: "string"
                        required:
                            - identifier
                    url:
                        type: "object"
                        properties:
                            path:
                                description: "Full URL path with end point to initiate the payment process"
                                type: "string"
                                format: "uri"
                                example: "https://pay.example.com/paymentToken/payment_token_identifier"
                        required:
                            - path
                required:
                    - paymentToken
                    - url
        BillingAddress:
            allOf:
                - $ref: "#/components/schemas/BusinessPersonName"
                - $ref: "#/components/schemas/EmailAddress"
                - $ref: "#/components/schemas/CCEmailAddress"
                - $ref: "#/components/schemas/PhoneNumber"
                - $ref: "#/components/schemas/MailingAddress"
        ShippingAddress:
            allOf:
                - $ref: "#/components/schemas/BusinessPersonName"
                - $ref: "#/components/schemas/EmailAddress"
                - $ref: "#/components/schemas/PhoneNumber"
                - $ref: "#/components/schemas/MailingAddress"
        Locale:
            description: "One's preferred language and country code"
            type: "string"
            example: "en-US"
        TaxRecord:
            type: "object"
            properties:
                countryCode:
                    $ref: "#/components/schemas/CountryCode"
                type:
                    description: "The type of taxation of a territory of jurisdiction"
                    type: "string"
                    example: "VAT"
                identityNumber:
                    description: "The identity number of taxation for a business"
                    type: "string"
                    example: "<tax_id_number>"
            required:
                - countryCode
                - type
                - identityNumber
        CustomerRecord:
            allOf:
                - $ref: "#/components/schemas/BusinessPersonName"
                - $ref: "#/components/schemas/EmailAddress"
                - $ref: "#/components/schemas/PhoneNumber"
                - type: "object"
                  properties:
                    description:
                        description: "A brief desctiptive text about the customer"
                        type: "string"
                        minLength: 1
                        example: "Help us protect children around the world"
                    currencyCode:
                        $ref: "#/components/schemas/CountryCode"
                    image:
                        description: "Base64 encoded string of an image"
                        type: "string"
                        format: "byte"
                    locale:
                        $ref: "#/components/schemas/Locale"
                    timeZone:
                        type: "string"
                        example: "+08:00"
                    invoicePrefix:
                        description: "The prefix of customer invoice number"
                        type: "string"
                        minLength: 1
                        maxLength: 8
                        example: "SALE_INV"
                    nextInvoiceSequence:
                        description: "The number of next customer invoice"
                        type: "number"
                        minimum: 1
                        maximum: 99999
                        example: 1
                    taxStatus:
                        type: "string"
                        enum:
                            - "taxable"
                            - "exempt"
                            - "reverseCharge"
                    metadata:
                        type: "string"
                    totalNumberOfPayments:
                        description: "total number of payment made since created"
                        type: "number"
                    lastPaymentDate:
                        type: "string"
                        format: "date-time"
                    totalAmountSpent:
                        type: "number"
                    totalAmountRefunded:
                        type: "number"
                    totalAmountDisputeLost:
                        type: "number"
        CustomerRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    customer:
                        allOf:
                            - $ref: "#/components/schemas/EntityIdentifier"
                            - $ref: "#/components/schemas/CustomerRecord"
                    customerPaymentInstrument:
                        allOf:
                            - $ref: "#/components/schemas/EntityIdentifier"
                            - $ref: "#/components/schemas/CustomerPaymentInstrumentRecord"
                    merchant:
                        $ref: "#/components/schemas/MerchantIdentifier"
                    organization:
                        $ref: "#/components/schemas/OrganizationName"
        PaymentInstrumentRecord:
            allOf:
                - type: "object"
                  properties:
                    description:
                        description: "A brief desctiptive text about the payment instrument"
                        type: "string"
                        minLength: 1
                        example: "Help us protect children around the world"
                    currencyCode:
                        $ref: "#/components/schemas/CountryCode"
                    expiryDate:
                        type: "string"
                        format: "date"
                    lastExpiryDate:
                        type: "string"
                        format: "date"
                    branch:
                        type: "string"
                    status:
                        type: "string"
                    lastStatus:
                        type: "string"
                    issuanceSerial:
                        type: "number"
                    issuanceIndex:
                        type: "number"
                    issuanceCount:
                        type: "number"
                    issuanceSequence:
                        type: "number"
                    embossIndicator:
                        type: "string"
                    nextCycleDate:
                        type: "string"
                        format: "date"
                    availableBalanceAmount:
                        type: "number"
                    ledgerBalanceAmount:
                        type: "number"
                    onHoldDebitAmount:
                        type: "number"
                    onHoldCreditAmount:
                        type: "number"
                    totalAmountSpent:
                        type: "number"
                    totalFeeCharged:
                        type: "number"
                    cycleAmountSpent:
                        type: "number"
                    cycleFeeCharged:
                        type: "number"
                    appliedIndicator:
                        type: "string"
                - $ref: "#/components/schemas/paymentInstrument.autoTopup"
        PaymentInstrumentRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    paymentInstrument:
                        allOf:
                            - $ref: "#/components/schemas/RecordStatus"
                            - $ref: "#/components/schemas/CreateDateTime"
                            - $ref: "#/components/schemas/RecordDateTime"
                            - $ref: "#/components/schemas/paymentInstrument.identifier"
                            - $ref: "#/components/schemas/PaymentInstrumentRecord"
                    paymentInstrumentProduct:
                        $ref: "#/components/schemas/paymentInstrumentProduct.identifier"
                    paymentInstrumentFunding:
                        $ref: "#/components/schemas/paymentInstrumentFunding.identifier"
                    user:
                        $ref: "#/components/schemas/user.identifier"
                    merchant:
                        $ref: "#/components/schemas/attribute.merchant.identifier"
                    organization:
                        $ref: "#/components/schemas/attribute.organization.identifier"
        PaymentInstrumentProductRecord:
            type: "object"
            properties:
                name:
                    description: "An unique name of the payment instrument's product"
                    type: "string"
                    minLength: 1
                    example: "USD_wallet"
                type:
                    description: "Type of the payment instrument's product"
                    type: "string"
                    minLength: 1
                    example: "wallet"
                category:
                    type: "string"
                    example: "default"
                issuancePrefix:
                    type: "string"
                    example: "586070"
                currencyCode:
                    $ref: "#/components/schemas/CountryCode"
                startSequence:
                    type: "number"
                    example: 1
                expiryExpectancy:
                    type: "string"
                    example: "none"
                    enum:
                        - "none"
                        - "day"
                        - "month"
                        - "year"
                expiryLife:
                    type: "number"
                    example: 0
                cyclePeriod:
                    type: "number"
                    example: 0
                appliedIndicator:
                    type: "string"
                minimumScore:
                    type: "number"
                    example: 0
                kycDefaultMaximumBalance:
                    type: "number"
                    example: 100
                kycLevel1Score:
                    type: "number"
                kycLevel1MaximumBalance:
                    type: "number"
                kycLevel2Score:
                    type: "number"
                kycLevel2MaximumBalance:
                    type: "number"
                kycLevel3Score:
                    type: "number"
                kycLevel3MaximumBalance:
                    type: "number"
                kycLevel4Score:
                    type: "number"
                kycLevel4MaximumBalance:
                    type: "number"
                kycLevel5Score:
                    type: "number"
                kycLevel5MaximumBalance:
                    type: "number"
                productAmount1:
                    type: "number"
                productAmount2:
                    type: "number"
                productAmount3:
                    type: "number"
                productAmount4:
                    type: "number"
                productAmount5:
                    type: "number"
            required:
                - name
                - type
        PaymentInstrumentProductRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    paymentInstrumentProduct:
                        allOf:
                            - $ref: "#/components/schemas/RecordStatus"
                            - $ref: "#/components/schemas/CreateDateTime"
                            - $ref: "#/components/schemas/RecordDateTime"
                            - $ref: "#/components/schemas/paymentInstrumentProduct.identifier"
                            - $ref: "#/components/schemas/PaymentInstrumentProductRecord"
                    paymentInstrumentNumber:
                        $ref: "#/components/schemas/paymentInstrumentNumber.name"
                    paymentInstrumentSerial:
                        $ref: "#/components/schemas/paymentInstrumentSerial.name"
                    organization:
                        $ref: "#/components/schemas/attribute.organization.identifier"
        CustomerPaymentInstrumentRecord:
            type: "object"
            properties:
                description:
                    description: "payment instrument's name"
                    type: "string"
                    example: "John Smith"
                number:
                    description: "payment instrument's number"
                    type: "string"
                maskedNumber:
                    description: "masked payment instrument's number"
                    type: "string"
                expiryDate:
                    type: "string"
                    format: "date"
                type:
                    description: "payment instrument type"
                    type: "string"
                    example: "CREDIT_CARD"
                brand:
                    description: "payment instrument's brand"
                    type: "string"
                    example: "MASTERCARD"
                issuer:
                    description: "name of issuing bank"
                    type: "string"
                issuingCountryCode:
                    type: "integer"
                    format: "int32"
                cardVerificationValue:
                    type: "string"
                cardVerified:
                    type: "boolean"
                asDefault:
                    description: "indicate if a new payment instrument should be set as default instrument"
                    type: "boolean"
        CustomerPaymentInstrumentRecords:
            type: "array"
            items:
                type: "object"
                properties:
                    customerPaymentInstrument:
                        $ref: "#/components/schemas/CustomerPaymentInstrumentRecord"
                    customer:
                        allOf:
                            - $ref: "#/components/schemas/attribute.customer.identifier"
                            - required:
                                - identifier

        attribute.email.address:
            type: "object"
            properties:
                address:
                    description: "The plain text email address"
                    type: "string"
                    format: "email"
                    example: "john.smith@example.com"
        attribute.mobile.number:
            type: "object"
            properties:
                number:
                    description: "The plain text of formatted mobile phone number"
                    type: "string"
                    example: "+1 (555) 555-1234"
        email.address:
            type: "object"
            properties:
                email:
                    allOf:
                        - $ref: "#/components/schemas/attribute.email.address"
        mobile.number:
            type: "object"
            properties:
                mobile:
                    allOf:
                        - $ref: "#/components/schemas/attribute.mobile.number"
        attribute.user.name:
            type: "object"
            properties:
                name:
                    description: "The user's login name"
                    type: "string"
                    example: "john.smith"
        attribute.user.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify an user"
                    type: "string"
                    example: "1"
        attribute.user.lastLoginTimestamp:
            type: "object"
            properties:
                lastLoginTimestamp:
                    description: "date & time of last login"
                    type: "string"
                    format: "date-time"
        attribute.user.lastFailedAuthenticateTimestamp:
            type: "object"
            properties:
                lastFailedAuthenticateTimestamp:
                    description: "date & time of last failed authentication"
                    type: "string"
                    format: "date-time"
        attribute.user.lastLoginLocation:
            type: "object"
            properties:
                lastLoginLocation:
                    description: "location of last login"
                    type: "string"
        attribute.user.lastFailedLoginLocation:
            type: "object"
            properties:
                lastLoginLocation:
                    description: "location of last failed login"
                    type: "string"
        attribute.user.lockoutPeriod:
            type: "object"
            properties:
                lockoutPeriod:
                    description: "date & time of lock out period"
                    type: "string"
                    format: "date-time"
        attribute.user.failedAuthenticateAttemptCount:
            type: "object"
            properties:
                failedAuthenticateAttemptCount:
                    description: "failed authentication attempt count"
                    type: "integer"
                    format: "int32"
        attribute.user.loginShell:
            type: "object"
            properties:
                loginShell:
                    description: "set the login shell for the user if user is allowed to sign in at the terminal. <shell> should the absolute path of the shell executable. The default is ‘/bin/bash’"
                    type: "string"
        attribute.user.loginShellArguments:
            type: "object"
            properties:
                loginShellArguments:
                    description: "the argument to supply to the login shell"
                    type: "string"
        attribute.user.serverLoginScriptPath:
            type: "object"
            properties:
                serverLoginScriptPath:
                    description: "the path of server login's script"
                    type: "string"
        attribute.user.homeDirectoryPath:
            type: "object"
            properties:
                homeDirectoryPath:
                    description: "the path of user's home directory on server"
                    type: "string"
        attribute.user.notificationOptInMap:
            type: "object"
            properties:
                notificationOptInMap:
                    description: "a comma separated list of notifications to which the user opts in or out of. Each comma separated item has the format “<OPT>’=’[in|out]. Where <OPT> names the notification options and ‘in’ means the user opts in to that notification and ‘out’ means the user opts out of that notification"
                    type: "string"
        attribute.user.restrictedDomain:
            type: "object"
            properties:
                restrictedDomain:
                    description: "the value for this option must name the organization to which this user belongs. This flag can only be supplied when a user record is being created and indicates if the user is a restricted user or not. If the user’s organization is marked restricted, the user will also be marked as restricted (and the value of this flag will be ignored)"
                    type: "string"
        attribute.user.preferName:
            type: "object"
            properties:
                preferName:
                    description: "user's prefer name"
                    type: "string"
        attribute.user.password:
            type: "object"
            properties:
                password:
                    description: "user's password for authentication"
                    type: "string"
                    example: "my password"
        attribute.user.newPassword:
            type: "object"
            properties:
                newPassword:
                    description: "set new password for new user account"
                    type: "string"
                    example: "my new password"
        attribute.user.firstTimePassword:
            type: "object"
            properties:
                firstTimePassword:
                    description: "this sets the password for a new account. The password is marked as temporary and one time use. If the request provides both the oneTimePassword and newPassword field, the newPassoword field is ignored. However, the oneTimePassword and firstTimePassword must not exist together"
                    type: "string"
                    example: "first time password"
        attribute.user.oneTimePassword:
            type: "object"
            properties:
                oneTimePassword:
                    description: "this sets the password for a new account. The password is marked as temporary and first time use. If the request provides both the firstTimePassword and newPassword field, the newPassoword field is ignored. However, the oneTimePassword and firstTimePassword must not exist together"
                    type: "string"
                    example: "one time password"
        attribute.user.passwordResetURL:
            type: "object"
            properties:
                passwordResetURL:
                    description: "the full URL path includes the system generated security string"
                    type: "string"
                    example: "https://sandbox.craniumventures.com/password/reset/token=abcdefghi1234567890"
        attribute.user.passwordResetToken:
            type: "object"
            properties:
                passwordResetToken:
                    description: "the system generated security string"
                    type: "string"
                    example: "abcdefghi1234567890"
        attribute.user.lastActivityTimestamp:
            type: "object"
            properties:
                lastActivityTimestamp:
                    description: "date & time of last activity"
                    type: "string"
                    format: "date-time"
        attribute.user.expirySeconds:
            type: "object"
            properties:
                expirySeconds:
                    description: "expiry in seconds"
                    type: "integer"
                    format: "int32"
                    example: 0
        attribute.user.activeSessions:
            type: "object"
            properties:
                activeSessions:
                    description: "total number of active sessions"
                    type: "integer"
                    format: "int32"
                    example: 5
        user.name:
            type: "object"
            properties:
                user:
                    allOf:
                        - $ref: "#/components/schemas/attribute.user.name"
                        - required:
                            - name
        user.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify an user"
                    type: "string"
                    example: "1"
            required:
                - identifier
        attribute.mailingAddress.type:
            type: "object"
            properties:
                type:
                    description: "the type of mailing address"
                    type: "string"
                    enum:
                        - "correspondence"
                        - "billing"
                        - "shipping"
        attribute.mailingAddress.line1:
            type: "object"
            properties:
                line1:
                    description: "first line of mailing address"
                    type: "string"
                    minLength: 1
                    example: "unit# and building name"
        attribute.mailingAddress.line2:
            type: "object"
            properties:
                line2:
                    description: "second line of mailing address"
                    type: "string"
                    minLength: 1
                    example: "street name"
        attribute.mailingAddress.line3:
            type: "object"
            properties:
                line3:
                    description: "third line of mailing address"
                    type: "string"
                    minLength: 1
                    example: "name of town or village"
        attribute.mailingAddress.city:
            type: "object"
            properties:
                city:
                    description: "city name of mailing address"
                    type: "string"
                    minLength: 1
                    example: "Middle City"
        attribute.mailingAddress.provinceState:
            type: "object"
            properties:
                provinceState:
                    description: "province or state of mailing address"
                    type: "string"
                    minLength: 1
                    example: "Big State"
        attribute.mailingAddress.postalCode:
            type: "object"
            properties:
                postalCode:
                    description: "postal code of mailing address"
                    type: "string"
                    minLength: 1
                    example: "123456"
        mailingAddress.type:
            type: "object"
            properties:
                mailingAddress:
                    allOf:
                        - $ref: "#/components/schemas/attribute.mailingAddress.type"
                        - required:
                            - type
        attribute.customer.name:
            type: "object"
            properties:
                name:
                    description: "customer's name"
                    type: "string"
                    example: "customer name"
        attribute.merchant.identifier:
            type: "object"
            properties:
                identifier:
                    description: "an unique string to identify a merchant"
                    type: "string"
                    example: "<merchant_identifier>"
        attribute.merchant.categoryCode:
            type: "object"
            properties:
                categoryCode:
                    description: "the merchant's category code"
                    type: "string"
                    example: "6011"
        attribute.merchant.nameAndLocation:
            type: "object"
            properties:
                nameAndLocation:
                    description: "the merchant's name and location"
                    type: "string"
                    example: "PC21  Test Merchant      Newtwon SquPADE"
        attribute.merchant.parent:
            type: "object"
            properties:
                parent:
                    description: "the merchant parent's parameters to be used for this merchant"
                    type: "string"
                    maxLength: 25
        attribute.merchant.numberOfDevices:
            type: "object"
            properties:
                numberOfDevices:
                    description: "indicates the number of devices deployed to a merchant"
                    type: "integer"
                    maxLength: 0
        attribute.merchant.allowedCaptureMethods:
            type: "object"
            properties:
                allowedCaptureMethods:
                    description: "a vector with each byte representing a capture method; a 'y' or 'n' determines if we allow the capture method for the merchant"
                    type: "string"
                    maxLength: 25
                    example: "Y"
        attribute.merchant.flexibleCurrency:
            type: "object"
            properties:
                flexibleCurrency:
                    description: "indicates if the merchant is allowed to initiate a transaction with currency different than the default; In case of cross border processing, this flag must be turned on"
                    type: "boolean"
                    example: false
        attribute.merchant.crossBorder:
            type: "object"
            properties:
                crossBorder:
                    description: "indicates if the merchant is allowed to initiate transaction across country border"
                    type: "boolean"
                    example: false
        attribute.merchant.restrictedLocation:
            type: "object"
            properties:
                restrictedLocation:
                    description: "indicates if location restriction is imposed on the merchant"
                    type: "boolean"
                    example: false
        attribute.merchant.businessHourClose:
            type: "object"
            properties:
                businessHourClose:
                    description: "the time of day when the merchant's business is closed"
                    type: "string"
                    format: "time"
                    example: "19:00:00"
        attribute.merchant.allowedServices:
            type: "object"
            properties:
                allowedServices:
                    description: "the services does the merchant allow to perform"
                    type: "string"
                    maxLength: 50
        attribute.merchant.restrictedLatitude:
            type: "object"
            properties:
                restrictedLatitude:
                    description: "latitude of restricted location"
                    type: "number"
                    example: 3.1575
        attribute.merchant.restrictedLongitude:
            type: "object"
            properties:
                restrictedLongitude:
                    description: "longtitude of restricted location"
                    type: "number"
                    example: 101.711
        attribute.merchant.restrictedRadius:
            type: "object"
            properties:
                restrictedRadius:
                    description: "readius of restricted location"
                    type: "number"
                    example: 5
        attribute.merchant.effectiveTimestamp:
            type: "object"
            properties:
                effectiveTimestamp:
                    description: "timestamp of when a merchant becomes active"
                    type: "string"
                    format: "date-time"
        attribute.merchant.expiryTimestamp:
            type: "object"
            properties:
                expiryTimestamp:
                    description: "timestamp of when a merchant becomes inactive"
                    type: "string"
                    format: "date-time"
        merchant.identifier:
            type: "object"
            properties:
                merchant:
                    allOf:
                        - $ref: "#/components/schemas/attribute.merchant.identifier"
        attribute.business.preferName:
            type: "object"
            properties:
                preferName:
                    description: "a name of business"
                    type: "string"
                    example: "John Smith Ltd"
        attribute.business.otherName:
            type: "object"
            properties:
                otherName:
                    description: "an other name of business"
                    type: "string"
                    example: "John Smith"
        attribute.team.name:
            type: "object"
            properties:
                name:
                    description: "An unique name to identify a team; 'all' indicates retrieval of all records for query commands"
                    type: "string"
                    example: "systemAdministrators"
        team.name:
            type: "object"
            properties:
                team:
                    allOf:
                        - $ref: "#/components/schemas/attribute.team.name"
                        - required:
                            - name
        attribute.team.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify a team"
                    type: "string"
                    example: "<identifier>"
        team.identifier:
            type: "object"
            properties:
                team:
                    allOf:
                        - $ref: "#/components/schemas/attribute.team.identifier"
        attribute.organization.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify an organization"
                    type: "string"
                    example: "1"
        attribute.organization.name:
            type: "object"
            properties:
                name:
                    description: "an unique name to identify an organization which name must not consists of spaces"
                    type: "string"
                    example: "john_smith_ltd"
        attribute.organization.preferName:
            type: "object"
            properties:
                preferName:
                    description: "a legal name of organization"
                    type: "string"
                    example: "John Smith Ltd"
        attribute.organization.externalIdentity:
            type: "object"
            properties:
                externalIdentity:
                    description: "an arbitrary value stored along with the organization record; the system does not interpret this value in anyway"
                    type: "string"
                    example: "external identity"
        organization.name:
            type: "object"
            properties:
                organization:
                    allOf:
                        - $ref: "#/components/schemas/attribute.organization.name"
                        - required:
                            - name
        organization.identifier:
            type: "object"
            properties:
                organization:
                    allOf:
                        - $ref: "#/components/schemas/attribute.organization.identifier"
        organization.preferName:
            type: "object"
            properties:
                organization:
                    allOf:
                        - $ref: "#/components/schemas/attribute.organization.preferName"
        paymentInstrumentNumber.name:
            type: "object"
            properties:
                name:
                    description: "An unique name to identify an payment instrument's number"
                    type: "string"
                    example: "unique_name"
            required:
                - name
        paymentInstrumentSerial.name:
            type: "object"
            properties:
                name:
                    description: "An unique name to identify an payment instrument's serial"
                    type: "string"
                    example: "unique_name"
            required:
                - name
        paymentInstrumentProduct.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify an payment instrument product"
                    type: "string"
                    example: "1"
            required:
                - identifier
        paymentInstrumentFunding.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify an payment instrument funding source"
                    type: "string"
                    example: "1"
            required:
                - identifier
        paymentInstrument.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify an payment instrument"
                    type: "string"
                    example: "1"
            required:
                - identifier
        paymentInstrument.autoTopup:
            type: "object"
            properties:
                autoTopupMode:
                    description: "This indicates how an instrument should be topup"
                    type: "string"
                    enum:
                        - "disable"
                        - "auto"
                        - "transactionAmountOnly"
                autoTopupAmount:
                    type: "number"
                autoTopupThresholdBalance:
                    type: "number"
        attribute.paymentInstrument.maskedNumber:
            type: "object"
            properties:
                maskedNumber:
                    description: "masked number of a payment instrument"
                    type: "string"
                    example: "************1234"
        attribute.paymentInstrument.cryptogram:
            type: "object"
            properties:
                cryptogram:
                    description: "cryptogram of a payment instrument"
                    type: "string"
                    example: "8623101673971233"
        attribute.paymentInstrument.fingerprint:
            type: "object"
            properties:
                fingerprint:
                    description: "finger print of a payment instrument"
                    type: "string"
                    example: "hP03HC0bta2WkHt4"
        attribute.paymentInstrument.expiryDateMMYY:
            type: "object"
            properties:
                expiryDateMMYY:
                    description: "expiry date (MMYY) of a payment instrument"
                    type: "string"
                    example: "1224"
        attribute.customer.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify a customer"
                    type: "string"
                    example: "1"
        customerPaymentInstrument.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique number to identify a customer's payment instrument"
                    type: "string"
                    example: "1"
            required:
                - identifier
        accessRights.entities:
            oneOf:
                - $ref: "#/components/schemas/user.name"
                - $ref: "#/components/schemas/team.name"
                - $ref: "#/components/schemas/organization.name"
        attribute.accessRightsObject.name:
            type: "object"
            properties:
                name:
                    type: "string"
                    description: "name of the object which the rights are processed; 'all' indicates retrieval of all records for query commands"
                    example: "frog"
        accessRightsObject.name:
            type: "object"
            properties:
                accessRightsObject:
                    allOf:
                        - $ref: "#/components/schemas/attribute.accessRightsObject.name"
                        - required:
                            - name
        attribute.accessRightsObject.identifier:
            type: "object"
            properties:
                identifier:
                    type: "string"
                    description: "unique identifier of the object which the rights are processed"
                    example: "<identifier>"
        attribute.accessRightsObject.classification:
            type: "object"
            properties:
                classification:
                    type: "string"
                    description: "user defined classification of the object which the rights are processed"
                    example: "self-service"
        attribute.accessRightsObject.accessRightsActions:
            type: "object"
            description: "one or more actions"
            properties:
                accessRightsActions:
                    type: "object"
                    properties:
                        <replace_with_action_name>:
                            type: "boolean"
                            description: "name of an action; values are ignored during retrieval however 'true' would mean an action to be granted and 'false' would mean an action to be revoked"
        attribute.accessRightsAction.name:
            type: "object"
            properties:
                name:
                    type: "string"
                    description: "name of the object's action which the rights are processed"
                    example: "jump"
        accessRightsAction.name:
            type: "object"
            properties:
                accessRightsAction:
                    allOf:
                        - $ref: "#/components/schemas/attribute.accessRightsAction.name"
                        - required:
                            - name
        response.accessRightsObjects:
            type: "object"
            properties:
                accessRightsObjects:
                    type: "array"
                    items:
                        allOf:
                            - $ref: "#/components/schemas/generic.recordStatus"
                            - $ref: "#/components/schemas/generic.createTimestamp"
                            - $ref: "#/components/schemas/generic.recordTimestamp"
                            - $ref: "#/components/schemas/generic.rowId"
                            - $ref: "#/components/schemas/attribute.accessRightsObject.name"
                            - $ref: "#/components/schemas/attribute.accessRightsObject.identifier"
                            - $ref: "#/components/schemas/attribute.accessRightsObject.classification"
                            - $ref: "#/components/schemas/organization.identifier"
                            - required:
                                - name
                                - identifier
        response.accessRightsActions:
            type: "object"
            properties:
                accessRightsObjects:
                    type: "array"
                    items:
                        allOf:
                            - $ref: "#/components/schemas/attribute.accessRightsObject.name"
                            - $ref: "#/components/schemas/attribute.accessRightsObject.identifier"
                            - $ref: "#/components/schemas/attribute.accessRightsObject.accessRightsActions"
                            - required:
                                - name
                                - identifier
                                - accessRightsActions
        cursor.identifier:
            type: "object"
            properties:
                identifier:
                    description: "identifier used to uniquely identify a cursor created by the system"
                    type: "string"
                    minLength: 1
                    example: "<cursor_identifier>"
        cursor.creation:
            type: "object"
            properties:
                creation:
                    description: "should a cursor be created?"
                    type: "string"
                    enum:
                        - always
                        - auto
                        - never
        cursor.recordOffset:
            type: "object"
            properties:
                recordOffset:
                    description: "offset of the record to retrieve"
                    type: "integer"
                    format: "int32"
                    minimum: 0
                    example: 0
        cursor.recordCount:
            type: "object"
            properties:
                recordCount:
                    description: "number of records to be retrieved"
                    type: "integer"
                    format: "int32"
                    minimum: 1
                    example: 1
        cursor.totalRecords:
            type: "object"
            properties:
                totalRecords:
                    description: "total number of records a cursor holds"
                    type: "integer"
                    format: "int32"
                    example: 10
        cursor.recordIdentifier:
            type: "object"
            properties:
                recordIdentifier:
                    description: "record's identifier of a given cursor's context"
                    type: "string"
                    example: "1"
        generic.recordStatus:
            type: "object"
            properties:
                recordStatus:
                    description: "The current status/state of a record"
                    type: "string"
                    enum:
                        - active
                        - inactive
                        - suspense
                        - pendingApproval
                        - disable
                        - locked
                        - deleted
                        - noPassword
                    example: "active"
        generic.createTimestamp:
            type: "object"
            properties:
                createTimestamp:
                    description: "date & time of create of a record"
                    type: "string"
                    format: "date-time"
        generic.recordTimestamp:
            type: "object"
            properties:
                recordTimestamp:
                    description: "date & time of update of a record"
                    type: "string"
                    format: "date-time"
        generic.rowId:
            type: "object"
            properties:
                rowId:
                    description: "record's unique identifier"
                    type: "integer"
                    format: "int32"
                    example: 1
        attribute.rowId:
            type: "object"
            properties:
                rowId:
                    description: "record's unique identifier"
                    type: "integer"
                    format: "int32"
                    example: 1
        attribute.recordStatus:
            type: "object"
            properties:
                recordStatus:
                    description: "The current status/state of a record"
                    type: "string"
                    enum:
                        - active
                        - inactive
                        - suspense
                        - pendingApproval
                        - disable
                        - locked
                        - deleted
                        - noPassword
                    example: "active"
        attribute.createTimestamp:
            type: "object"
            properties:
                createTimestamp:
                    description: "date & time of create of a record"
                    type: "string"
                    format: "date-time"
        attribute.recordTimestamp:
            type: "object"
            properties:
                recordTimestamp:
                    description: "date & time of update of a record"
                    type: "string"
                    format: "date-time"
        attribute.nationalIdentityCard:
            type: "object"
            properties:
                nationalIdentityCard:
                    description: "the national registration identity card number"
                    type: "string"
        attribute.gender:
            type: "object"
            properties:
                gender:
                    type: "string"
                    enum:
                        - "male"
                        - "female"
        attribute.nationality:
            type: "object"
            properties:
                nationality:
                    description: "nationality of a person"
                    type: "string"
        attribute.race:
            type: "object"
            properties:
                race:
                    description: "social group of a person"
                    type: "string"
        attribute.birthdate:
            type: "object"
            properties:
                birthdate:
                    description: "a person's birth date"
                    type: "string"
                    format: "date"
        attribute.salutationPrefix:
            type: "object"
            properties:
                salutationPrefix:
                    description: "the salutation prefix to attach to a person's name when addressing them"
                    type: "string"
        attribute.salutationSuffix:
            type: "object"
            properties:
                salutationSuffix:
                    description: "the salutation suffix to attach to a person's name when addressing them"
                    type: "string"
        attribute.firstName:
            type: "object"
            properties:
                firstName:
                    description: "person's first name"
                    type: "string"
        attribute.middleName:
            type: "object"
            properties:
                middleName:
                    description: "person's middle name"
                    type: "string"
        attribute.lastName:
            type: "object"
            properties:
                lastName:
                    description: "person's last name"
                    type: "string"
        attribute.otherName:
            type: "object"
            properties:
                otherName:
                    description: "person's other name"
                    type: "string"
        attribute.multiFactorAuthentication.name:
            type: "object"
            properties:
                name:
                    type: "string"
                    description: "unique name of the multi factor authentication's object"
                    example: "<name of multi factor authentication>"
                    enum:
                        - "2fa"
        attribute.multiFactorAuthentication.identifier:
            type: "object"
            properties:
                identifier:
                    type: "string"
                    description: "unique identifier of the multi factor authentication's object"
                    example: "<multi factor authentication's identifier>"
        attribute.multiFactorAuthentication.timeZero:
            type: "object"
            properties:
                timeZero:
                    type: "integer"
                    format: "int32"
                    description: "the Unix time to start counting TimeStep's (default is zero, the 'epoch' of when Unix time began)"
                    example: 0
        attribute.multiFactorAuthentication.timeStep:
            type: "object"
            properties:
                timeStep:
                    type: "integer"
                    format: "int32"
                    description: "represents the time steps in seconds (default 30); attempts to generate a new secret code within the same time step, will generate the same value"
                    example: 30
        attribute.multiFactorAuthentication.syncFactor:
            type: "object"
            properties:
                syncFactor:
                    type: "integer"
                    format: "int32"
                    description: "to be used with token generators and determines how far into the future the algorithm will look to make a match"
                    example: 0
        attribute.multiFactorAuthentication.delayFactor:
            type: "object"
            properties:
                delayFactor:
                    type: "integer"
                    format: "int32"
                    description: "determines how far back in time the the system goes to validate the secret code; the delay factor is expressed as the number of time steps to look back; the default attempts to provide a delay of around 60 seconds and depends on the value of TimeStep; for example, if TimeStep is 20 seconds, then the DelayFactor will be 2 (20 for the current window and 2 more TimeStep intervals into the past to complete 60 seconds)"
                    example: 60
        attribute.multiFactorAuthentication.throttleFactor:
            type: "object"
            properties:
                throttleFactor:
                    type: "integer"
                    format: "int32"
                    description: "a counter to guard against brute force attacks; this is similar to the failed login count for regular login's; an user entering this many incorrect secret code's in a row will have their record locked; a value of zero, turns throttling checking off"
                    example: 0
        attribute.multiFactorAuthentication.secretCodeLength:
            type: "object"
            properties:
                secretCodeLength:
                    type: "integer"
                    format: "int32"
                    description: "the number of bytes of secret code to be generated; the default is 6"
                    example: 6
        attribute.multiFactorAuthentication.offlineSecretCodeLength:
            type: "object"
            properties:
                offlineSecretCodeLength:
                    type: "integer"
                    format: "int32"
                    description: "the number of bytes of secret code to be generated for offline values. The default is 8"
                    example: 8
        attribute.multiFactorAuthentication.digestAlgorithm:
            type: "object"
            properties:
                digestAlgorithm:
                    type: "string"
                    description: "the name of the digest algorithm to use; the default is 'SHA1'"
                    example: "SHA1"
        attribute.multiFactorAuthentication.tokenDeviceName:
            type: "object"
            properties:
                tokenDeviceName:
                    type: "string"
                    description: "the symbolic name of the token device"
                    example: "token_device"
        attribute.multiFactorAuthentication.tokenDeviceSerial:
            type: "object"
            properties:
                tokenDeviceSerial:
                    type: "string"
                    description: "the serial number of the token device"
                    example: "token_device_serial"
        attribute.multiFactorAuthentication.failedAttemptCount:
            type: "object"
            properties:
                failedAttemptCount:
                    type: "integer"
                    format: "int32"
                    description: "this counter maintains the number of consecutive failed validations and is reset to zero when an OTP is correctly validated; this is a cumulative value across all key streams"
                    example: 0
        attribute.multiFactorAuthentication.keystream:
            type: "object"
            properties:
                keystream:
                    type: "string"
                    description: |
                        keystream determines the type of secret code generated; the following describes the valid values:-
                        login          the default keystream and requests a verification code which can be used
                                       for login purposes;
                        offline        this generates one or more offline codes which can be used in place of a
                                       login value
                        address        this should be used when attempting to validate ownership of a device or email;
                                       this keystream requires the address element be present to specify the target
                                       address to which the verification code will be sent
                        application    this can be used by an application to generate verification codes for their
                                       private use
                    enum:
                        - "login"
                        - "offline"
                        - "address"
                        - "application"
        attribute.multiFactorAuthentication.keystreamAddress:
            type: "object"
            properties:
                keystreamAddress:
                    type: "string"
                    description: |
                        the address element can be set to cause the system to send the secret code directly
                        to the device/email rather than return the code to the application;
                        below are the valid values:-
                        auto               this symbolic address causes the system to choose the primary address
                                           available to the user; the system first searches for a mobile device
                                           address followed by an email address; the user account is searched first
                                           followed by their contact information (that is the kauth_user table is
                                           examined first followed by examination of the kauth_contact table); the
                                           first address found is considered the user’s primary address
                        sms                this symbolic address causes the system to choose the primary mobile
                                           device address
                        email              this symbolic address causes the system to choose the primary email
                                           address for the user
                        <mobile number>    a valid mobile number can include the following characters: digits,
                                           ‘+’, ‘(‘, ‘)’, ‘-‘ and spaces. For example: +1(416) 555-5555 is a valid
                                           mobile number
                        <email address>    a valid email address has the format: string ‘@’ string.string without
                                           intervening spaces
                    example: "<mobile number>"
        attribute.multiFactorAuthentication.secretCode:
            type: "object"
            properties:
                secretCode:
                    type: "string"
                    description: "secret code that sent to user's device privately"
                    example: "<secret code>"
        multiFactorAuthentication.name:
            type: "object"
            properties:
                multiFactorAuthentication:
                    allOf:
                        - $ref: "#/components/schemas/attribute.multiFactorAuthentication.name"
        multiFactorAuthentication.identifier:
            type: "object"
            properties:
                multiFactorAuthentication:
                    allOf:
                        - $ref: "#/components/schemas/attribute.multiFactorAuthentication.identifier"
        attribute.securityPolicy.name:
            type: "object"
            properties:
                name:
                    type: "string"
                    description: "the name of the security policy to apply to the user. If not provided, the policy named in the organization record is used"
                    example: "<security policy's name>"
        attribute.securityPolicy.identifier:
            type: "object"
            properties:
                identifier:
                    type: "string"
                    description: "unique identifier of the security policy"
                    example: "<security policy's identifier>"
        attribute.securityPolicy.inactivityTimeout:
            type: "object"
            properties:
                inactivityTimeout:
                    type: "integer"
                    format: "int32"
                    description: "the number of seconds a session is allowed to be idle before the session is logged out. The default is the value set in the policy"
                    example: 15
        attribute.securityPolicy.externalValidator:
            type: "object"
            properties:
                externalValidator:
                    description: "the external validator"
                    type: "string"
                    example: "external_validator"
        attribute.securityPolicy.authenticationFlags:
            type: "object"
            properties:
                authenticationFlags:
                    description: "the authentication flags"
                    type: "integer"
                    format: "int32"
                    example: 0
        attribute.securityPolicy.maximumSessions:
            type: "object"
            properties:
                maximumSessions:
                    description: "maximum number of concurrent sessions this user is allowed. The default is the value set in the policy"
                    type: "integer"
                    format: "int32"
                    example: 1
        attribute.securityPolicy.sessionExceededPolicy:
            type: "object"
            properties:
                sessionExceededPolicy:
                    description: "the action to take when maximumSessions is reached"
                    type: "string"
                    example: "makeRoom"
                    enum:
                        - "default"
                        - "makeRoom"
                        - "reject"
        securityPolicy.name:
            type: "object"
            properties:
                securityPolicy:
                    allOf:
                        - $ref: "#/components/schemas/attribute.securityPolicy.name"
                        - required:
                            - name
        securityPolicy.identifier:
            type: "object"
            properties:
                securityPolicy:
                    allOf:
                        - $ref: "#/components/schemas/attribute.securityPolicy.identifier"
        securityPolicy.inactivityTimeout:
            type: "object"
            properties:
                securityPolicy:
                    allOf:
                        - $ref: "#/components/schemas/attribute.securityPolicy.inactivityTimeout"
        securityPolicy.maximumSessions:
            type: "object"
            properties:
                securityPolicy:
                    allOf:
                        - $ref: "#/components/schemas/attribute.securityPolicy.maximumSessions"
        securityPolicy.sessionExceededPolicy:
            type: "object"
            properties:
                securityPolicy:
                    allOf:
                        - $ref: "#/components/schemas/attribute.securityPolicy.sessionExceededPolicy"
        attribute.passwordPolicy.minimumLength:
            type: "object"
            properties:
                minimumLength:
                    description: "the minimum length a password can have; a value of zero implies no minimum required; the default value is determined by the system administrator when creating the initial tables; do note that to enable length validation the appropriate 'validationChecks' flag must be set"
                    type: "integer"
                    format: "int32"
                    example: 0
        attribute.passwordPolicy.validationChecks:
            type: "object"
            properties:
                validationChecks:
                    description: "a set of validation checks applied to a password"
                    type: "object"
                    properties:
                        minimumLengthCheck:
                            type: "boolean"
                            description: "Validate against password.minimumLength"
                        alphaCheck:
                            type: "boolean"
                            description: "Must contain at least one alphabet"
                        upperCaseCheck:
                            type: "boolean"
                            description: "Must contain at least one upper case letter"
                        lowerCaseCheck:
                            type: "boolean"
                            description: "Must contain at least one lower case letter"
                        digitCheck:
                            type: "boolean"
                            description: "Must contain at least one digit"
                        specialCharacterCheck:
                            type: "boolean"
                            description: "Must contain at least one special char (not an alphabet, not a digit)"
                        usernameStrippedCheck:
                            type: "boolean"
                            description: "The password cannot contain the user name (in this case the user name and password are stripped of all non-alphabet as well as email suffix before a match is attempted)"
                        usernameCheck:
                            type: "boolean"
                            description: "The password cannot contain the user name (in this the user name is not stripped of non-alphabet and the email suffix)"
        attribute.passwordPolicy.name:
            type: "object"
            properties:
                name:
                    description: "The name assigned to this password policy"
                    type: "string"
                    example: "my_password_policy"
            required:
                - name
        attribute.passwordPolicy.identifier:
            type: "object"
            properties:
                identifier:
                    description: "a special string assigned to this policy by the system"
                    type: "string"
                    example: "1234567890"
        attribute.passwordPolicy.minimumStrength:
            type: "object"
            properties:
                identifier:
                    description: "the minimum strength, as determined by entropy, which this password must have"
                    type: "integer"
                    format: "int32"
                    example: "1"
        attribute.passwordPolicy.historySize:
            type: "object"
            properties:
                historySize:
                    description: "the number of past passwords in the password history file; this indicates how many past passwords are checked when a user attempts to change their password"
                    type: "integer"
                    format: "int32"
                    example: "1"
        attribute.passwordPolicy.maximumLife:
            type: "object"
            properties:
                maximumLife:
                    description: "the number of days after which the user must change their password"
                    type: "integer"
                    format: "int32"
                    example: "2"
        attribute.passwordPolicy.maximumFailedAttempts:
            type: "object"
            properties:
                maximumFailedAttempts:
                    description: "the maximum consecutive times a password authentication fails after which the user is locked out"
                    type: "integer"
                    format: "int32"
                    example: "0"
        attribute.passwordPolicy.lockoutPeriod:
            type: "object"
            properties:
                lockoutPeriod:
                    description: "the number of seconds to lockout an account after 'maximumFailedAttempts' consecutive password failures; if this field is zero, then the record is locked until an administrator unlocks the record"
                    type: "integer"
                    format: "int32"
                    example: "3600"
        attribute.passwordPolicy.resetLife:
            type: "object"
            properties:
                resetLife:
                    description: "the number of seconds a temporary password is valid"
                    type: "integer"
                    format: "int32"
                    example: "500"
        attribute.passwordPolicy.hashAlgorithm:
            type: "object"
            properties:
                hashAlgorithm:
                    description: >
                        the hashing algorithm to use:
                            1.    pbkdf2:
                                    Password Based Key Derivation Function # 2.
                            2.    digest:
                                    Apply a supported message digest to the password.
                            3.    bcrypt:
                                    Use a modified version of the Blowfish cipher to generated the hash.
                            4.    scrypt:
                                    Apply the SCRYPT algorithm as created by COLIN PERCIVAL
                            5.    encrypt:
                                    Rather than hash the password, encrypt it via the HSM using a unique key and iv.
                            6.    random:
                                    Allow the authentication system to choose an algorithm randomly for each password.
                    type: "string"
                    example: "random"
                    enum:
                        - "pbkdf2"
                        - "digest"
                        - "bcrypt"
                        - "scrypt"
                        - "encrypt"
                        - "random"
        attribute.passwordPolicy.hashDigest:
            type: "object"
            properties:
                hashDigest:
                    description: "the message digest to use with the 'hashAlgorithm'; 'random' allow the authentication system to randomly choose a strong digest for each password"
                    type: "string"
                    example: "random"
                    enum:
                        - "md5"
                        - "sha1"
                        - "sha224"
                        - "sha256"
                        - "sha512"
                        - "ripemd160"
                        - "whirlpool"
                        - "random"
        attribute.passwordPolicy.hashEncoding:
            type: "object"
            properties:
                hashEncoding:
                    description: >
                        How the final hash is encoded in the database:
                            1.    ascii: The result is encoded as an ascii representation of the binary hex hash
                            2.    crypt: The result is encoded to be compatible with the Unix password encoding scheme.
                            3.    binary:  The result is left as a binary string.
                    type: "string"
                    example: "crypt"
                    enum:
                        - "ascii"
                        - "crypt"
                        - "binary"
        attribute.passwordPolicy.hashSaltSize:
            type: "object"
            properties:
                hashSaltSize:
                    description: "the size of the salt value to apply to password"
                    type: "integer"
                    format: "int32"
                    example: "64"
        attribute.passwordPolicy.hashKeySize:
            type: "object"
            properties:
                hashKeySize:
                    description: "the size of the key to pass to the PBKDF2 function"
                    type: "integer"
                    format: "int32"
                    example: "256"
        attribute.passwordPolicy.hashRounds:
            type: "object"
            properties:
                hashRounds:
                    description: "the number of rounds (iterations) to apply the hash algorithm (default is 131,072)"
                    type: "integer"
                    format: "int32"
                    example: "131072"
        passwordPolicy.name:
            type: "object"
            properties:
                passwordPolicy:
                    allOf:
                        - $ref: "#/components/schemas/attribute.passwordPolicy.name"
        passwordPolicy.minimumLength:
            type: "object"
            properties:
                passwordPolicy:
                    allOf:
                        - $ref: "#/components/schemas/attribute.passwordPolicy.minimumLength"
        passwordPolicy.validationChecks:
            type: "object"
            properties:
                passwordPolicy:
                    allOf:
                        - $ref: "#/components/schemas/attribute.passwordPolicy.validationChecks"
        attribute.contact.type:
            type: "object"
            properties:
                type:
                    description: "the type of contact being considered"
                    type: "string"
                    enum:
                        - "mobile"
                        - "email"
                        - "landline"
                        - "url"
        attribute.contact.addressOrNumber:
            type: "object"
            properties:
                addressOrNumber:
                    description: "the plain text address/number of a contact; it will be empty if the actor is not the target user; this element holds the address/number which has been parsed by the system"
                    type: "string"
        attribute.contact.classification:
            type: "object"
            properties:
                classification:
                    description: "the classification of a contact to be interpretated by the client application"
                    type: "number"
                    example: 1
        attribute.contact.identifier:
            type: "object"
            properties:
                identifier:
                    description: "a special string which can be used to uniquely identify the record at a later time; applications should never attempt to set the contact key directly; rather the system will provide a key for the record based on an internal algorithm"
                    type: "string"
        attribute.contact.maskedData:
            type: "object"
            properties:
                maskedData:
                    description: "the masked data of contact for security purposes; an application must only display the masked data even if a plain text address or number is present in the response"
                    type: "string"
        attribute.contact.flags:
            type: "object"
            properties:
                flags:
                    type: "object"
                    properties:
                        verified:
                            type: "boolean"
                            description: "the record has been verified"
                        primary:
                            type: "boolean"
                            description: "this is a primary address"
                        default:
                            type: "boolean"
                            description: "this is a default address"
                        phone:
                            type: "boolean"
                            description: "this is a phone type record"
                        messageCapable:
                            type: "boolean"
                            description: "this type of address is capable of receiving notification messages"
                        url:
                            type: "boolean"
                            description: "this is a social media address record"
                        notification:
                            type: "boolean"
                            description: "this record can receive account notification messages from the system"
                        recovery:
                            type: "boolean"
                            description: "this record can be used for password and account recovery operations"
        contact.identifier:
            type: "object"
            properties:
                contact:
                    allOf:
                        - $ref: "#/components/schemas/attribute.contact.identifier"
                        - required:
                            - identifier
        attribute.location.name:
            type: "object"
            properties:
                name:
                    description: "name of the user's device currently used such as ip address, mac address, terminal name, and etc"
                    type: "string"
                    example: "192.168.1.1"
        attribute.location.currentTimestamp:
            type: "object"
            properties:
                currentTimestamp:
                    description: "local date & time of the device"
                    type: "string"
                    format: "date-time"
        attribute.application.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique text to identify an application"
                    type: "string"
                    example: "application_identifier"
        attribute.node.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique text to identify a node"
                    type: "string"
                    example: "0001"
        node.identifier:
            type: "object"
            properties:
                node:
                    allOf:
                        - $ref: "#/components/schemas/attribute.node.identifier"
        attribute.session.number:
            type: "object"
            properties:
                number:
                    description: "the internal session index"
                    type: "string"
                    example: "4450"
        attribute.session.flags:
            type: "object"
            properties:
                flags:
                    description: "the internal session flags"
                    type: "string"
                    example: "10"
        attribute.session.authenticationMethod:
            type: "object"
            properties:
                authenticationMethod:
                    description: "the authentication method used for this session"
                    type: "string"
                    example: "password"
        attribute.session.recordStatus:
            type: "object"
            properties:
                recordStatus:
                    description: "the status of this session"
                    type: "string"
                    example: "Active"
        attribute.session.identifier:
            type: "object"
            properties:
                identifier:
                    description: "the unique identifier of this session"
                    type: "string"
                    example: "(xxY?hE*6:*qx~Bz|3.#YB}kQ2:6:*cc~B*b|z|~QQ}xS++WM0p~BqH|3|3z{N{Q{j::TuxZx~d"
        attribute.device.publicKey:
            type: "object"
            properties:
                publicKey:
                    description: "the Base64 encoded public key generated by device"
                    type: "string"
                    example: "<Base64 encoded public key>"
        attribute.device.identifier:
            type: "object"
            properties:
                identifier:
                    description: "the unique identifier of this device"
                    type: "string"
                    example: "B2EAAF6E3B803B21B31822FCA7848E76DA5BFA7C07DA004F"
        attribute.device.addedTimestamp:
            type: "object"
            properties:
                addedTimestamp:
                    description: "date & time of the device added"
                    type: "string"
                    format: "date-time"
        attribute.device.authenticationData:
            type: "object"
            properties:
                authenticationData:
                    description: "this value is returned by the server when biometric login is attempted and is encrypted using the public key of the device and base64 encoded; the device must save this value (encrypted) and on the next biometric login attempt must present this value hashed using SHA256 and encoded as a base64 value; even if the login failed, the device must check for and store the returned value"
                    type: "string"
                    example: "<Base64 encoded biometric authentication data>"
        attribute.device.lastVerificationTimestamp:
            type: "object"
            properties:
                lastVerificationTimestamp:
                    description: "last date & time of the biometrics verification"
                    type: "string"
                    format: "date-time"
        attribute.device.totalVerificationAttempts:
            type: "object"
            properties:
                totalVerificationAttempts:
                    description: "total nunber of verification attempts"
                    type: "integer"
                    format: "int32"
                    example: 1
        attribute.device.totalFailedVerificationAttempts:
            type: "object"
            properties:
                totalFailedVerificationAttempts:
                    description: "total nunber of failed verification attempted"
                    type: "integer"
                    format: "int32"
                    example: 0
        attribute.currency.name:
            type: "object"
            properties:
                name:
                    description: "the common name of the currency"
                    type: "string"
                    example: "US Dollar"
        attribute.currency.isoAlphaCode:
            type: "object"
            properties:
                isoAlphaCode:
                    description: "the ISO-4216 alpha currency code"
                    type: "string"
                    example: "USD"
        attribute.currency.isoNumericCode:
            type: "object"
            properties:
                isoNumericCode:
                    description: "the ISO-4216 numeric currency code"
                    type: "integer"
                    format: "int32"
                    example: 840
        attribute.currency.symbol:
            type: "object"
            properties:
                symbol:
                    description: "the symbol used to denote the currency (this is an UTF-8 string)"
                    type: "string"
                    example: "$"
        attribute.currency.minorUnits:
            type: "object"
            properties:
                minorUnits:
                    description: "the number of digits to the right of the decimal point"
                    type: "integer"
                    format: "int32"
                    example: 2
        attribute.currency.isPrefix:
            type: "object"
            properties:
                isPrefix:
                    description: "Indicates if currency's symbol is displayed before the value (isPrefix = true) or after the value (isPrefix = false)"
                    type: "boolean"
                    example: true
        currency.isoNumericCode:
            type: "object"
            properties:
                currency:
                    allOf:
                        - $ref: "#/components/schemas/attribute.currency.isoNumericCode"
        attribute.country.name:
            type: "object"
            properties:
                name:
                    description: "the name of the country"
                    type: "string"
                    example: "United States"
        attribute.country.isoAlpha2Code:
            type: "object"
            properties:
                isoAlpha2Code:
                    description: "the ISO 3166-1 alpha-2 country code"
                    type: "string"
                    example: "US"
        attribute.country.isoAlpha3Code:
            type: "object"
            properties:
                isoAlpha3Code:
                    description: "the ISO 3166-1 alpha-3 country code"
                    type: "string"
                    example: "USA"
        attribute.country.isoNumericCode:
            type: "object"
            properties:
                isoNumericCode:
                    description: "the ISO 3166-1 numeric country code"
                    type: "integer"
                    format: "int32"
                    example: 840
        country.isoNumericCode:
            type: "object"
            properties:
                country:
                    allOf:
                        - $ref: "#/components/schemas/attribute.country.isoNumericCode"
        attribute.transaction.messageTypeIdentifier:
            type: "object"
            properties:
                messageTypeIdentifier:
                    description: "the message type identifier"
                    type: "string"
                    example: "0200"
        attribute.transaction.messageTypeIdentifiers:
            type: "object"
            properties:
                messageTypeIdentifiers:
                    description: "the list of message type identifiers"
                    type: "string"
                    example: "0200"
        attribute.transaction.switchSequence:
            type: "object"
            properties:
                switchSequence:
                    description: "the internal transaction sequence number"
                    type: "string"
                    example: "1234567890"
        attribute.transaction.switchChainSequence:
            type: "object"
            properties:
                switchChainSequence:
                    description: "the internal chain transaction sequence number used for lookup related transactions"
                    type: "string"
                    example: "1234567890"
        attribute.transaction.type:
            type: "object"
            properties:
                type:
                    description: "the type of transaction"
                    type: "string"
                    enum:
                        - "purchase"
                        - "refund"
        attribute.transaction.traceNumber:
            type: "object"
            properties:
                traceNumber:
                    description: "the trace number of transaction"
                    type: "string"
                    example: "123456"
        attribute.transaction.transmissionTimestamp:
            type: "object"
            properties:
                transmissionTimestamp:
                    description: "date & time of the transaction transmission"
                    type: "string"
                    format: "date-time"
        attribute.transaction.status:
            type: "object"
            properties:
                status:
                    description: "the status of transaction"
                    type: "string"
                    example: "success"
        attribute.transaction.amount:
            type: "object"
            properties:
                amount:
                    description: "the amount of transaction"
                    type: "number"
                    example: 1.0
        attribute.transaction.localDate:
            type: "object"
            properties:
                localDate:
                    description: "the local date of transaction"
                    type: "string"
                    format: "date"
        attribute.transaction.localTime:
            type: "object"
            properties:
                localTime:
                    description: "the local time of transaction"
                    type: "string"
                    format: "time"
        attribute.transaction.retrievalReferenceNumber:
            type: "object"
            properties:
                retrievalReferenceNumber:
                    description: "the retrieval reference number of transaction"
                    type: "string"
                    example: "123456789012"
        attribute.transaction.types:
            type: "object"
            properties:
                types:
                    description: "the list of transaction type"
                    type: "object"
                    properties:
                        purchase:
                            description: "goods & services purchase transaction"
                            type: "boolean"
                        refund:
                            description: "refund transaction"
                            type: "boolean"
        attribute.transaction.captureModes:
            type: "object"
            properties:
                captureModes:
                    description: "the list of transaction capture modes"
                    type: "object"
                    properties:
                        chip:
                            description: "EMV chip transaction"
                            type: "boolean"
                        magneticStripe:
                            description: "magnetic strip transaction"
                            type: "boolean"
                        manualEntry:
                            description: "manual entry transaction"
                            type: "boolean"
        attribute.transaction.statuses:
            type: "object"
            properties:
                statuses:
                    description: "the list of transaction statuses"
                    type: "object"
                    properties:
                        success:
                            description: "success transaction"
                            type: "boolean"
                        failed:
                            description: "failed transaction"
                            type: "boolean"
        attribute.transaction.descriptiveText:
            type: "object"
            properties:
                descriptiveText:
                    description: "more descriptive text about the transaction"
                    type: "string"
                    example: "Help us protect children around the world"
        attribute.transaction.purpose:
            type: "object"
            properties:
                purpose:
                    description: "purpose of the transaction which could be product's description of this transaction for"
                    type: "string"
                    example: "Donate For Child"
        attribute.transaction.authorizationCode:
            type: "object"
            properties:
                authorizationCode:
                    description: "authorization code of the transaction"
                    type: "string"
                    example: "060453"
        attribute.localDate.start:
            type: "object"
            properties:
                start:
                    description: "the start local date on a query request"
                    type: "string"
                    format: "date"
        attribute.localDate.end:
            type: "object"
            properties:
                end:
                    description: "the end local date on a query request"
                    type: "string"
                    format: "date"
        attribute.acquirer.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique text to identify an acquirer"
                    type: "string"
                    example: "acquirer_identifier"
        acquirer.identifier:
            type: "object"
            properties:
                acquirer:
                    allOf:
                        - $ref: "#/components/schemas/attribute.acquirer.identifier"
        attribute.issuer.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique text to identify an issuer"
                    type: "string"
                    example: "issuer_identifier"
        attribute.settlement.date:
            type: "object"
            properties:
                date:
                    description: "the settlement date"
                    type: "string"
                    format: "date"
        attribute.settlement.amount:
            type: "object"
            properties:
                amount:
                    description: "the settlement's amount"
                    type: "number"
                    example: "12.3"
        attribute.settlement.conversionRate:
            type: "object"
            properties:
                conversionRate:
                    description: "the forex conversion rate for settlement's amount"
                    type: "number"
                    example: "0.123"
        attribute.refund.lastRefundTimestamp:
            type: "object"
            properties:
                lastRefundTimestamp:
                    description: "the timestamp of last refund for this transaction"
                    type: "string"
                    format: "date-time"
        attribute.refund.amount:
            type: "object"
            properties:
                amount:
                    description: "the total refund's amount"
                    type: "number"
                    example: "10.2"
        attribute.adjustment.lastAdjustmentTimestamp:
            type: "object"
            properties:
                lastAdjustmentTimestamp:
                    description: "the timestamp of last adjustment for this transaction"
                    type: "string"
                    format: "date-time"
        attribute.adjustment.amount:
            type: "object"
            properties:
                amount:
                    description: "the total adjustment's amount"
                    type: "number"
                    example: "10.2"
        attribute.recordStatuses:
            type: "object"
            properties:
                recordStatuses:
                    description: "the list of payment token statuses"
                    type: "object"
                    properties:
                        active:
                            description: "payment token is active"
                            type: "boolean"
                        suspense:
                            description: "payment token is suspensed"
                            type: "boolean"
        attribute.paymentToken.identifier:
            type: "object"
            properties:
                identifier:
                    description: "the unique identifier of a payment token"
                    type: "string"
                    example: "d75df86a"
        attribute.paymentToken.name:
            type: "object"
            properties:
                name:
                    description: "the purpose/usage of the payment"
                    type: "string"
                    minLength: 1
                    example: "Donate For Children"
        attribute.paymentToken.description:
            type: "object"
            properties:
                description:
                    description: "more descriptive text for the payment"
                    type: "string"
                    minLength: 1
                    example: "Help us protect children around the world"
        attribute.paymentToken.image:
            type: "object"
            properties:
                image:
                    description: "the url path or Base64 encoded string of an image"
                    type: "string"
                    format: "byte"
        attribute.paymentToken.amount:
            type: "object"
            properties:
                amount:
                    description: "the payment amount to be collected"
                    type: "number"
                    minimum: 0
                    example: 10
        attribute.paymentToken.minimumAmount:
            type: "object"
            properties:
                minimumAmount:
                    description: "the manimum amount needed"
                    type: "number"
                    minimum: 0
                    exclusiveMinimum: true
                    example: 1
        attribute.paymentToken.maximumAmount:
            type: "object"
            properties:
                maximumAmount:
                    description: "the maximum amount allowed"
                    type: "number"
                    minimum: 0
                    exclusiveMinimum: true
                    example: 100
        attribute.paymentToken.amountIsFlexible:
            type: "object"
            properties:
                amountIsFlexible:
                    description: "indicator if shopper/customer is allowed to change amount"
                    type: "boolean"
                    example: true
        attribute.paymentToken.allowPromotionCodes:
            type: "object"
            properties:
                allowPromotionCodes:
                    description: "indicator if shopper/customer is allowed to enter promotion codes"
                    type: "boolean"
                    example: true
        attribute.paymentToken.savePaymentDetails:
            type: "object"
            properties:
                savePaymentDetails:
                    description: "indicator if collected payment details shall be saved"
                    type: "boolean"
                    example: true
        attribute.paymentToken.requirePhoneNumber:
            type: "object"
            properties:
                requirePhoneNumber:
                    description: "indicator if shopper/customer is required to enter phone number"
                    type: "boolean"
                    example: true
        attribute.paymentToken.requireBillingAddress:
            type: "object"
            properties:
                requireBillingAddress:
                    description: "indicator if shopper/customer is required to enter billing address"
                    type: "boolean"
                    example: true
        attribute.paymentToken.requireShippingAddress:
            type: "object"
            properties:
                requireShippingAddress:
                    description: "indicator if shopper/customer is required to enter shipping address"
                    type: "boolean"
                    example: true
        attribute.paymentToken.payButtonText:
            type: "object"
            properties:
                payButtonText:
                    description: "text to be presented on the 'PAY' button"
                    type: "string"
                    enum:
                        - "pay"
                        - "donate"
                        - "book"
        attribute.url.address:
            type: "object"
            properties:
                address:
                    description: "full URL path with end point to initiate the payment process"
                    type: "string"
                    format: "uri"
                    example: "https://pay.example.com/paymentToken/payment_token_identifier"
        attribute.recordTimestamp.start:
            type: "object"
            properties:
                start:
                    description: "the start record timestamp on a query request"
                    type: "string"
                    format: "date"
        attribute.recordTimestamp.end:
            type: "object"
            properties:
                end:
                    description: "the end record timestamp on a query request"
                    type: "string"
                    format: "date"
        attribute.fee.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique text to identify a fee"
                    type: "string"
                    example: "fee_identifier"
        fee.identifier:
            type: "object"
            properties:
                fee:
                    allOf:
                        - $ref: "#/components/schemas/attribute.fee.identifier"
        attribute.limit.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique text to identify a limit"
                    type: "string"
                    example: "0001"
        attribute.limit.useExtended:
            type: "object"
            properties:
                useExtended:
                    description: "indicate if extended limit shall be applied to the merchant"
                    type: "boolean"
                    example: false
        attribute.limit.dailyMaximumAmount:
            type: "object"
            properties:
                dailyMaximumAmount:
                    description: "the daily maximum of accumulated transaction amount allowed for a merchant"
                    type: "number"
                    example: 0.0
        attribute.limit.dailyMaximumCount:
            type: "object"
            properties:
                dailyMaximumCount:
                    description: "the daily maximum of accumulated number of transaction allowed for a merchant"
                    type: "number"
                    example: 0.0
        attribute.limit.weeklyMaximumAmount:
            type: "object"
            properties:
                weeklyMaximumAmount:
                    description: "the weekly maximum of accumulated transaction amount allowed for a merchant"
                    type: "number"
                    example: 0.0
        attribute.limit.weeklyMaximumCount:
            type: "object"
            properties:
                weeklyMaximumCount:
                    description: "the weekly maximum of accumulated number of transaction allowed for a merchant"
                    type: "number"
                    example: 0.0
        attribute.limit.monthlyMaximumAmount:
            type: "object"
            properties:
                monthlyMaximumAmount:
                    description: "the monthly maximum of accumulated transaction amount allowed for a merchant"
                    type: "number"
                    example: 0.0
        attribute.limit.monthlyMaximumCount:
            type: "object"
            properties:
                monthlyMaximumCount:
                    description: "the monthly maximum of accumulated number of transaction allowed for a merchant"
                    type: "number"
                    example: 0.0
        attribute.limit.EMVChipMaximumAmount:
            type: "object"
            properties:
                EMVChipMaximumAmount:
                    description: "the maximum of accumulated EMV chip transaction amount allowed for a merchant"
                    type: "number"
                    example: 0.0
        attribute.limit.magneticStripeMaximumAmount:
            type: "object"
            properties:
                magneticStripeMaximumAmount:
                    description: "the maximum of accumulated magnetic strip transaction amount allowed for a merchant"
                    type: "number"
                    example: 0.0
        attribute.limit.manualEntryMaximumAmount:
            type: "object"
            properties:
                manualEntryMaximumAmount:
                    description: "the maximum of accumulated manual entry transaction amount allowed for a merchant"
                    type: "number"
                    example: 0.0
        limit.identifier:
            type: "object"
            properties:
                limit:
                    allOf:
                        - $ref: "#/components/schemas/attribute.limit.identifier"
        attribute.total.identifier:
            type: "object"
            properties:
                identifier:
                    description: "An unique text to identify a total/accumulation"
                    type: "string"
                    example: "0001"
        attribute.total.useExtended:
            type: "object"
            properties:
                useExtended:
                    description: "indicate if extended total/accumulation shall be applied to the merchant"
                    type: "boolean"
                    example: false
        attribute.total.accumulationMethod:
            type: "object"
            properties:
                accumulationMethod:
                    description: "method used for total/accumulation"
                    type: "string"
        attribute.total.dailyLastTimestamp:
            type: "object"
            properties:
                dailyLastTimestamp:
                    description: "last timestamp of a daily accumulation is calculated"
                    type: "string"
                    format: "date-time"
        attribute.total.dailyAccumulatedAmount:
            type: "object"
            properties:
                dailyAccumulatedAmount:
                    description: "a daily accumulated transaction amount"
                    type: "number"
        attribute.total.dailyAccumulatedCount:
            type: "object"
            properties:
                dailyAccumulatedCount:
                    description: "a daily accumulated number of transactions"
                    type: "integer"
        attribute.total.weeklyLastTimestamp:
            type: "object"
            properties:
                weeklyLastTimestamp:
                    description: "last timestamp of a weekly accumulation is calculated"
                    type: "string"
                    format: "date-time"
        attribute.total.weeklyAccumulatedAmount:
            type: "object"
            properties:
                weeklyAccumulatedAmount:
                    description: "a weekly accumulated transaction amount"
                    type: "number"
        attribute.total.weeklyAccumulatedCount:
            type: "object"
            properties:
                weeklyAccumulatedCount:
                    description: "a weekly accumulated number of transactions"
                    type: "integer"
        attribute.total.monthlyLastTimestamp:
            type: "object"
            properties:
                monthlyLastTimestamp:
                    description: "last timestamp of a monthly accumulation is calculated"
                    type: "string"
                    format: "date-time"
        attribute.total.monthlyAccumulatedAmount:
            type: "object"
            properties:
                monthlyAccumulatedAmount:
                    description: "a monthly accumulated transaction amount"
                    type: "number"
        attribute.total.monthlyAccumulatedCount:
            type: "object"
            properties:
                monthlyAccumulatedCount:
                    description: "a monthly accumulated number of transactions"
                    type: "integer"
        request.cursor.query:
            type: "object"
            properties:
                cursor:
                    allOf:
                        - $ref: "#/components/schemas/cursor.creation"
                        - $ref: "#/components/schemas/cursor.recordOffset"
                        - $ref: "#/components/schemas/cursor.recordCount"
                        - required:
                            - creation
                            - recordOffset
                            - recordCount
        response.result.code:
            type: "object"
            properties:
                code:
                    type: "string"
                    description: "success or error code"
                    example: "ErrorCode"
        response.result.reason:
            type: "object"
            properties:
                reason:
                    type: "string"
                    description: "reason for error occur"
                    example: "ErrorReason"
        response.result:
            type: "object"
            properties:
                result:
                    allOf:
                        - $ref: "#/components/schemas/response.result.code"
                        - $ref: "#/components/schemas/response.result.reason"
                        - required:
                            - code
        response.cursor:
            type: "object"
            properties:
                cursor:
                    allOf:
                        - $ref: "#/components/schemas/cursor.identifier"
                        - $ref: "#/components/schemas/cursor.totalRecords"
                        - required:
                            - identifier
                            - totalRecords
        response.team.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/generic.rowId"
                    - $ref: "#/components/schemas/generic.recordStatus"
                    - $ref: "#/components/schemas/generic.createTimestamp"
                    - $ref: "#/components/schemas/generic.recordTimestamp"
                    - $ref: "#/components/schemas/attribute.team.name"
                    - $ref: "#/components/schemas/attribute.team.identifier"
                    - $ref: "#/components/schemas/organization.identifier"
                    - required:
                        - name
                        - identifier
        response.user.record:
            allOf:
                - $ref: "#/components/schemas/attribute.rowId"
                - $ref: "#/components/schemas/attribute.recordStatus"
                - $ref: "#/components/schemas/attribute.createTimestamp"
                - $ref: "#/components/schemas/attribute.recordTimestamp"
                - $ref: "#/components/schemas/attribute.user.name"
                - $ref: "#/components/schemas/attribute.user.identifier"
                - $ref: "#/components/schemas/merchant.identifier"
                - $ref: "#/components/schemas/team.identifier"
                - $ref: "#/components/schemas/securityPolicy.identifier"
                - $ref: "#/components/schemas/organization.identifier"
                - $ref: "#/components/schemas/email.address"
                - $ref: "#/components/schemas/mobile.number"
                - $ref: "#/components/schemas/multiFactorAuthentication.name"
                - $ref: "#/components/schemas/multiFactorAuthentication.identifier"
                - $ref: "#/components/schemas/attribute.user.lastLoginTimestamp"
                - $ref: "#/components/schemas/attribute.user.lastFailedAuthenticateTimestamp"
                - $ref: "#/components/schemas/attribute.user.lastLoginLocation"
                - $ref: "#/components/schemas/attribute.user.lastFailedLoginLocation"
                - $ref: "#/components/schemas/attribute.user.lockoutPeriod"
                - $ref: "#/components/schemas/attribute.user.failedAuthenticateAttemptCount"
                - $ref: "#/components/schemas/securityPolicy.sessionExceededPolicy"
                - $ref: "#/components/schemas/attribute.user.loginShell"
                - $ref: "#/components/schemas/attribute.user.loginShellArguments"
                - $ref: "#/components/schemas/attribute.user.serverLoginScriptPath"
                - $ref: "#/components/schemas/attribute.user.homeDirectoryPath"
                - $ref: "#/components/schemas/attribute.user.notificationOptInMap"
                - $ref: "#/components/schemas/attribute.user.restrictedDomain"
                - $ref: "#/components/schemas/attribute.user.preferName"
        response.user.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/response.user.record"
        response.userProfile.record:
            allOf:
                - $ref: "#/components/schemas/attribute.createTimestamp"
                - $ref: "#/components/schemas/attribute.nationalIdentityCard"
                - $ref: "#/components/schemas/attribute.gender"
                - $ref: "#/components/schemas/attribute.nationality"
                - $ref: "#/components/schemas/attribute.race"
                - $ref: "#/components/schemas/attribute.birthdate"
                - $ref: "#/components/schemas/attribute.salutationPrefix"
                - $ref: "#/components/schemas/attribute.salutationSuffix"
                - $ref: "#/components/schemas/attribute.firstName"
                - $ref: "#/components/schemas/attribute.middleName"
                - $ref: "#/components/schemas/attribute.lastName"
                - $ref: "#/components/schemas/attribute.otherName"
        response.contact.record:
            allOf:
                - $ref: "#/components/schemas/attribute.contact.type"
                - $ref: "#/components/schemas/attribute.recordStatus"
                - $ref: "#/components/schemas/attribute.contact.addressOrNumber"
                - $ref: "#/components/schemas/attribute.contact.classification"
                - $ref: "#/components/schemas/attribute.contact.identifier"
                - $ref: "#/components/schemas/attribute.contact.maskedData"
                - $ref: "#/components/schemas/attribute.contact.flags"
        response.contact.records:
            anyOf:
                - type: "object"
                  properties:
                    mobiles:
                        type: "array"
                        items:
                            allOf:
                                - $ref: "#/components/schemas/response.contact.record"
                - type: "object"
                  properties:
                    emails:
                        type: "array"
                        items:
                            allOf:
                                - $ref: "#/components/schemas/response.contact.record"
                - type: "object"
                  properties:
                    landlines:
                        type: "array"
                        items:
                            allOf:
                                - $ref: "#/components/schemas/response.contact.record"
                - type: "object"
                  properties:
                    urls:
                        type: "array"
                        items:
                            allOf:
                                - $ref: "#/components/schemas/response.contact.record"
        response.passwordPolicy.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.rowId"
                    - $ref: "#/components/schemas/attribute.recordStatus"
                    - $ref: "#/components/schemas/attribute.recordTimestamp"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.name"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.identifier"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.minimumStrength"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.minimumLength"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.historySize"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.maximumLife"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.maximumFailedAttempts"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.lockoutPeriod"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.resetLife"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.validationChecks"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.hashAlgorithm"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.hashDigest"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.hashEncoding"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.hashSaltSize"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.hashKeySize"
                    - $ref: "#/components/schemas/attribute.passwordPolicy.hashRounds"
                    - $ref: "#/components/schemas/organization.identifier"
        response.securityPolicy.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.rowId"
                    - $ref: "#/components/schemas/attribute.recordStatus"
                    - $ref: "#/components/schemas/attribute.recordTimestamp"
                    - $ref: "#/components/schemas/attribute.securityPolicy.name"
                    - $ref: "#/components/schemas/attribute.securityPolicy.identifier"
                    - $ref: "#/components/schemas/attribute.securityPolicy.externalValidator"
                    - $ref: "#/components/schemas/multiFactorAuthentication.name"
                    - $ref: "#/components/schemas/attribute.securityPolicy.authenticationFlags"
                    - $ref: "#/components/schemas/attribute.securityPolicy.inactivityTimeout"
                    - $ref: "#/components/schemas/attribute.securityPolicy.maximumSessions"
                    - $ref: "#/components/schemas/attribute.securityPolicy.sessionExceededPolicy"
                    - $ref: "#/components/schemas/organization.identifier"
                    - type: "object"
                      properties:
                        passwordPolicy:
                            allOf:
                                - $ref: "#/components/schemas/attribute.passwordPolicy.identifier"
        response.organization.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.rowId"
                    - $ref: "#/components/schemas/attribute.recordStatus"
                    - $ref: "#/components/schemas/attribute.recordTimestamp"
                    - $ref: "#/components/schemas/attribute.organization.name"
                    - $ref: "#/components/schemas/attribute.organization.identifier"
                    - $ref: "#/components/schemas/attribute.organization.externalIdentity"
                    - $ref: "#/components/schemas/attribute.organization.preferName"
                    - type: "object"
                      properties:
                        restricted:
                            description: "indicates if this organization is marked as restricted (non-zero) or unrestricted (zero)"
                            type: "string"
                            example: "0"
                    - $ref: "#/components/schemas/securityPolicy.identifier"
                    - $ref: "#/components/schemas/team.identifier"
        response.session.user.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.user.name"
                    - $ref: "#/components/schemas/attribute.user.identifier"
                    - $ref: "#/components/schemas/attribute.recordStatus"
                    - $ref: "#/components/schemas/attribute.user.lastActivityTimestamp"
                    - $ref: "#/components/schemas/attribute.user.expirySeconds"
                    - $ref: "#/components/schemas/attribute.user.activeSessions"
                    - $ref: "#/components/schemas/node.identifier"
        response.session.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.session.number"
                    - $ref: "#/components/schemas/attribute.session.flags"
                    - $ref: "#/components/schemas/attribute.session.authenticationMethod"
                    - $ref: "#/components/schemas/attribute.session.recordStatus"
                    - $ref: "#/components/schemas/attribute.user.lastActivityTimestamp"
                    - $ref: "#/components/schemas/attribute.createTimestamp"
                    - $ref: "#/components/schemas/attribute.session.identifier"
                    - type: "object"
                      properties:
                        location:
                            allOf:
                                - $ref: "#/components/schemas/attribute.location.name"
        response.currency.record:
            allOf:
                - $ref: "#/components/schemas/attribute.currency.name"
                - $ref: "#/components/schemas/attribute.currency.isoAlphaCode"
                - $ref: "#/components/schemas/attribute.currency.isoNumericCode"
                - $ref: "#/components/schemas/attribute.currency.symbol"
                - $ref: "#/components/schemas/attribute.currency.minorUnits"
                - $ref: "#/components/schemas/attribute.currency.isPrefix"
        response.currency.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/response.currency.record"
        response.country.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.country.name"
                    - $ref: "#/components/schemas/attribute.country.isoAlpha2Code"
                    - $ref: "#/components/schemas/attribute.country.isoAlpha3Code"
                    - $ref: "#/components/schemas/attribute.country.isoNumericCode"
                    - type: "object"
                      properties:
                        currency:
                            allOf:
                                - $ref: "#/components/schemas/response.currency.record"
        response.payment.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.recordTimestamp"
                    - $ref: "#/components/schemas/attribute.transaction.messageTypeIdentifier"
                    - $ref: "#/components/schemas/attribute.transaction.type"
                    - $ref: "#/components/schemas/attribute.transaction.traceNumber"
                    - $ref: "#/components/schemas/attribute.transaction.transmissionTimestamp"
                    - $ref: "#/components/schemas/attribute.transaction.status"
                    - $ref: "#/components/schemas/attribute.transaction.switchSequence"
                    - $ref: "#/components/schemas/attribute.transaction.amount"
                    - $ref: "#/components/schemas/attribute.transaction.localDate"
                    - $ref: "#/components/schemas/attribute.transaction.localTime"
                    - $ref: "#/components/schemas/attribute.transaction.retrievalReferenceNumber"
                    - $ref: "#/components/schemas/attribute.transaction.descriptiveText"
                    - $ref: "#/components/schemas/attribute.transaction.purpose"
                    - $ref: "#/components/schemas/attribute.transaction.authorizationCode"
                    - $ref: "#/components/schemas/currency.isoNumericCode"
                    - type: "object"
                      properties:
                        acquirer:
                            allOf:
                                - $ref: "#/components/schemas/attribute.acquirer.identifier"
                                - $ref: "#/components/schemas/country.isoNumericCode"
                        settlement:
                            allOf:
                                - $ref: "#/components/schemas/attribute.settlement.date"
                                - $ref: "#/components/schemas/attribute.settlement.amount"
                                - $ref: "#/components/schemas/attribute.settlement.conversionRate"
                                - $ref: "#/components/schemas/currency.isoNumericCode"
                        paymentInstrument:
                            allOf:
                                - $ref: "#/components/schemas/attribute.paymentInstrument.maskedNumber"
                                - $ref: "#/components/schemas/attribute.paymentInstrument.cryptogram"
                                - $ref: "#/components/schemas/attribute.paymentInstrument.fingerprint"
                                - $ref: "#/components/schemas/attribute.paymentInstrument.expiryDateMMYY"
                                - $ref: "#/components/schemas/country.isoNumericCode"
                                - $ref: "#/components/schemas/currency.isoNumericCode"
                                - type: "object"
                                  properties:
                                    issuer:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.issuer.identifier"
                        refund:
                            allOf:
                                - $ref: "#/components/schemas/attribute.refund.lastRefundTimestamp"
                                - $ref: "#/components/schemas/attribute.refund.amount"
                        adjustment:
                            allOf:
                                - $ref: "#/components/schemas/attribute.adjustment.lastAdjustmentTimestamp"
                                - $ref: "#/components/schemas/attribute.adjustment.amount"
                        merchant:
                            allOf:
                                - $ref: "#/components/schemas/attribute.merchant.identifier"
                                - $ref: "#/components/schemas/attribute.merchant.categoryCode"
                                - $ref: "#/components/schemas/attribute.merchant.nameAndLocation"
                        device:
                            allOf:
                                - $ref: "#/components/schemas/attribute.device.identifier"
                        customer:
                            allOf:
                                - $ref: "#/components/schemas/attribute.customer.name"
        response.paymentToken.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.rowId"
                    - $ref: "#/components/schemas/attribute.recordStatus"
                    - $ref: "#/components/schemas/attribute.recordTimestamp"
                    - $ref: "#/components/schemas/attribute.createTimestamp"
                    - $ref: "#/components/schemas/attribute.paymentToken.identifier"
                    - $ref: "#/components/schemas/attribute.paymentToken.name"
                    - $ref: "#/components/schemas/attribute.paymentToken.description"
                    - $ref: "#/components/schemas/attribute.paymentToken.image"
                    - $ref: "#/components/schemas/attribute.paymentToken.amount"
                    - $ref: "#/components/schemas/attribute.paymentToken.minimumAmount"
                    - $ref: "#/components/schemas/attribute.paymentToken.maximumAmount"
                    - $ref: "#/components/schemas/attribute.paymentToken.amountIsFlexible"
                    - $ref: "#/components/schemas/attribute.paymentToken.allowPromotionCodes"
                    - $ref: "#/components/schemas/attribute.paymentToken.savePaymentDetails"
                    - $ref: "#/components/schemas/attribute.paymentToken.requirePhoneNumber"
                    - $ref: "#/components/schemas/attribute.paymentToken.requireBillingAddress"
                    - $ref: "#/components/schemas/attribute.paymentToken.requireShippingAddress"
                    - $ref: "#/components/schemas/attribute.paymentToken.payButtonText"
                    - type: "object"
                      properties:
                        merchant:
                            allOf:
                                - $ref: "#/components/schemas/attribute.merchant.identifier"
                        currency:
                            allOf:
                                - $ref: "#/components/schemas/attribute.currency.isoNumericCode"
                        url:
                            allOf:
                                - $ref: "#/components/schemas/attribute.url.address"
        response.multiFactorAuthentication.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.user.name"
                    - type: "object"
                      properties:
                        multiFactorAuthentication:
                            allOf:
                                - $ref: "#/components/schemas/attribute.rowId"
                                - $ref: "#/components/schemas/attribute.recordStatus"
                                - $ref: "#/components/schemas/attribute.recordTimestamp"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.identifier"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.name"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.timeZero"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.timeStep"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.syncFactor"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.delayFactor"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.throttleFactor"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.secretCodeLength"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.offlineSecretCodeLength"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.digestAlgorithm"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.tokenDeviceName"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.tokenDeviceSerial"
                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.failedAttemptCount"
        response.merchant.records:
            type: "array"
            items:
                allOf:
                    - $ref: "#/components/schemas/attribute.rowId"
                    - $ref: "#/components/schemas/attribute.recordStatus"
                    - $ref: "#/components/schemas/attribute.recordTimestamp"
                    - $ref: "#/components/schemas/attribute.merchant.identifier"
                    - $ref: "#/components/schemas/attribute.merchant.parent"
                    - $ref: "#/components/schemas/attribute.merchant.numberOfDevices"
                    - $ref: "#/components/schemas/attribute.merchant.categoryCode"
                    - $ref: "#/components/schemas/attribute.merchant.allowedCaptureMethods"
                    - $ref: "#/components/schemas/attribute.merchant.flexibleCurrency"
                    - $ref: "#/components/schemas/attribute.merchant.crossBorder"
                    - $ref: "#/components/schemas/attribute.merchant.restrictedLocation"
                    - $ref: "#/components/schemas/attribute.merchant.businessHourClose"
                    - $ref: "#/components/schemas/attribute.merchant.allowedServices"
                    - $ref: "#/components/schemas/attribute.merchant.restrictedLatitude"
                    - $ref: "#/components/schemas/attribute.merchant.restrictedLongitude"
                    - $ref: "#/components/schemas/attribute.merchant.restrictedRadius"
                    - $ref: "#/components/schemas/attribute.merchant.effectiveTimestamp"
                    - $ref: "#/components/schemas/attribute.merchant.expiryTimestamp"
                    - $ref: "#/components/schemas/acquirer.identifier"
                    - $ref: "#/components/schemas/currency.isoNumericCode"
                    - $ref: "#/components/schemas/country.isoNumericCode"
                    - $ref: "#/components/schemas/fee.identifier"
                    - type: "object"
                      properties:
                        limit:
                            allOf:
                                - $ref: "#/components/schemas/attribute.limit.identifier"
                                - $ref: "#/components/schemas/attribute.limit.useExtended"
                                - $ref: "#/components/schemas/attribute.limit.dailyMaximumAmount"
                                - $ref: "#/components/schemas/attribute.limit.dailyMaximumCount"
                                - $ref: "#/components/schemas/attribute.limit.weeklyMaximumAmount"
                                - $ref: "#/components/schemas/attribute.limit.weeklyMaximumCount"
                                - $ref: "#/components/schemas/attribute.limit.monthlyMaximumAmount"
                                - $ref: "#/components/schemas/attribute.limit.monthlyMaximumCount"
                                - $ref: "#/components/schemas/attribute.limit.EMVChipMaximumAmount"
                                - $ref: "#/components/schemas/attribute.limit.magneticStripeMaximumAmount"
                                - $ref: "#/components/schemas/attribute.limit.manualEntryMaximumAmount"
                    - type: "object"
                      properties:
                        total:
                            allOf:
                                - $ref: "#/components/schemas/attribute.total.identifier"
                                - $ref: "#/components/schemas/attribute.total.useExtended"
                                - $ref: "#/components/schemas/attribute.total.accumulationMethod"
                                - $ref: "#/components/schemas/attribute.total.dailyLastTimestamp"
                                - $ref: "#/components/schemas/attribute.total.dailyAccumulatedAmount"
                                - $ref: "#/components/schemas/attribute.total.dailyAccumulatedCount"
                                - $ref: "#/components/schemas/attribute.total.weeklyLastTimestamp"
                                - $ref: "#/components/schemas/attribute.total.weeklyAccumulatedAmount"
                                - $ref: "#/components/schemas/attribute.total.weeklyAccumulatedCount"
                                - $ref: "#/components/schemas/attribute.total.monthlyLastTimestamp"
                                - $ref: "#/components/schemas/attribute.total.monthlyAccumulatedAmount"
                                - $ref: "#/components/schemas/attribute.total.monthlyAccumulatedCount"
    parameters:
        SessionToken:
            name: "x-synap-SessionToken"
            in: "header"
            description: "Synap's session token"
            required: true
            schema:
                type: "string"
                example: "<session_token>"
    requestBodies:
        GrantAndRevokeAccessRights:
            required: true
            content:
                application/json:
                    schema:
                        allOf:
                            - oneOf:
                                - type: "object"
                                  properties:
                                    user:
                                        type: "object"
                                        properties:
                                            name:
                                                type: "string"
                                        required:
                                            - name
                                  required:
                                    - user
                                - type: "object"
                                  properties:
                                    team:
                                        type: "object"
                                        properties:
                                            name:
                                                type: "string"
                                        required:
                                            - name
                                  required:
                                    - team
                                - type: "object"
                                  properties:
                                    organization:
                                        type: "object"
                                        properties:
                                            name:
                                                type: "string"
                                        required:
                                            - name
                                  required:
                                    - organization
                            - type: "object"
                              properties:
                                accessRightObject:
                                    allOf:
                                        - $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                                        - type: "object"
                                          properties:
                                            accessRightActions:
                                                $ref: "#/components/schemas/AccessRightActions"
                                          required:
                                            - accessRightActions
                              required:
                                - accessRightObject
        UserAccessRightsRequestBody:
            required: true
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            user:
                                type: "object"
                                properties:
                                    name:
                                        type: "string"
                            accessRightObject:
                                allOf:
                                    - $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                                    - type: "object"
                                      properties:
                                            accessRightActions:
                                                $ref: "#/components/schemas/AccessRightActions"
        TeamAccessRightsRequestBody:
            required: true
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            team:
                                type: "object"
                                properties:
                                    name:
                                        type: "string"
                            accessRightObject:
                                allOf:
                                    - $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                                    - type: "object"
                                      properties:
                                            accessRightActions:
                                                $ref: "#/components/schemas/AccessRightActions"
        OrganizationAccessRightsRequestBody:
            required: true
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            organization:
                                type: "object"
                                properties:
                                    name:
                                        type: "string"
                            accessRightObject:
                                allOf:
                                    - $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                                    - type: "object"
                                      properties:
                                            accessRightActions:
                                                $ref: "#/components/schemas/AccessRightActions"
        PaymentRequestBody:
            required: true
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            merchant:
                                $ref: "#/components/schemas/MerchantIdentifier"
                            payment:
                                type: "object"
                                properties:
                                    amount:
                                        description: "The total payment's value including tax"
                                        type: "number"
                                        minimum: 0
                                        example: 1.23
                                    taxAmount:
                                        description: "The payment's tax value"
                                        type: "number"
                                        minimum: 0
                                        example: 1.23
                                    currencyCode:
                                        description: "The payment's currency in ISO numeric code"
                                        type: "integer"
                                        format: "int32"
                                        minimum: 0
                                        maximum: 999
                                        example: 840
                                    merchantReferenceNumber:
                                        description: "An unique identifier allows merchant to track payment"
                                        type: "string"
                                        example: "merchant_reference_number"
                                    purposeOfPayment:
                                        description: "The summary of the payment"
                                        type: "string"
                                        example: "Donate For Child"
                                    description:
                                        description: "More details about the payment"
                                        type: "string"
                                        example: "Help us protect children around the world"
                                    captureFundLater:
                                        description: "Reserve funds now and will be charged at later time"
                                        type: "boolean"
                                required:
                                    - amount
                                    - currencyCode
                            paymentToken:
                                type: "object"
                                properties:
                                    identifier:
                                        description: "The payment token identifier"
                                        type: "string"
                                        example: "payment_token_identifier"
                                required:
                                    - identifier
                            paymentMethod:
                                type: "object"
                                properties:
                                    type:
                                        description: "unique payment method code from 'GetPaymentMethod' response"
                                        type: "string"
                                        example: "card"
                            device:
                                type: "object"
                                properties:
                                    identifier:
                                        type: "string"
                                        example: "06045338"
                                    type:
                                        description: "The platform of the shopper's device"
                                        type: "string"
                                        enum:
                                            - "web"
                                            - "ios"
                                            - "android"
                                        example: "web"
                                required:
                                    - type
                            paymentInstrument:
                                type: "object"
                                properties:
                                    type:
                                        type: "string"
                                        enum:
                                            - "card"
                                        example: "card"
                                    number:
                                        type: "string"
                                        example: "5522300012953018"
                                    cardVerificationValue:
                                        type: "integer"
                                        format: "int32"
                                        minimum: 1
                                        maximum: 9999
                                        example: 123
                                    expiryDate:
                                        description: "expiry date shall be presented as 'YYMM'"
                                        type: "integer"
                                        format: "int32"
                                        minimum: 1
                                        maximum: 9999
                                        example: 1234
                                    ownerName:
                                        description: "name printed on plastic card or owner's name"
                                        type: "string"
                                        example: "John Smith"
                                    issuingCountryCode:
                                        description: "The payment instrument issuing's ISO numeric country code"
                                        type: "integer"
                                        format: "int32"
                                        minimum: 0
                                        maximum: 999
                                        example: 840
                                    savePaymentDetails:
                                        description: "to save this payment instrument details onto customer profile"
                                        type: "boolean"
                                        example: true
                                required:
                                    - type
                                    - number
                                    - ownerName
                                    - issuingCountryCode
                            customer:
                                allOf:
                                    - $ref: "#/components/schemas/EntityIdentifier"
                                    - $ref: "#/components/schemas/CustomerRecord"
                            billingAddress:
                                $ref: "#/components/schemas/BillingAddress"
                            shippingAddress:
                                $ref: "#/components/schemas/ShippingAddress"
                            returnURL:
                                description: "URL where the shopper will be taken back to after payment processing"
                                type: "string"
                                format: "uri"
                                example: "https://payment.merchant.com/result/merchant_reference_number"
        accessRights.grant.revoke:
            required: true
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: "#/components/schemas/accessRights.entities"
                            - allOf:
                                - type: "object"
                                  properties:
                                    accessRightsObject:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.accessRightsObject.name"
                                            - $ref: "#/components/schemas/attribute.accessRightsObject.accessRightsActions"
                                            - required:
                                                - name
                                                - accessRightsActions
                                  required:
                                    - accessRightsObject
        fetch.with.cursor:
            required: true
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            cursor:
                                allOf:
                                    - $ref: "#/components/schemas/cursor.identifier"
                                    - $ref: "#/components/schemas/cursor.recordOffset"
                                    - $ref: "#/components/schemas/cursor.recordCount"
                                    - required:
                                        - identifier
                                        - recordOffset
                                        - recordCount
                        required:
                            - cursor
    responses:
        ResultOnlyResponse:
            description: "Receive only result object on response"
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            result:
                                $ref: "#/components/schemas/ResponseResult"
        GetAccessRightsResponse:
            description: "Returned list of user's access rights"
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            result:
                                $ref: "#/components/schemas/ResponseResult"
                            accessRights:
                                type: "array"
                                items:
                                    type: "object"
                                    properties:
                                        accessRightObject:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                                accessRightActions:
                                                    $ref: "#/components/schemas/AccessRightActions"
        GetAccessRightsResponse_v1:
            description: "Returned list of user's access rights"
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            result:
                                $ref: "#/components/schemas/ResponseResult"
                            accessRightObjects:
                                type: "array"
                                items:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        accessRightActions:
                                            $ref: "#/components/schemas/AccessRightActions"
        PaymentResponse:
            description: "Receive payment's result object and/or action on response"
            content:
                application/json:
                    schema:
                        type: "object"
                        properties:
                            result:
                                $ref: "#/components/schemas/ResponseResult"
                            payment:
                                type: "object"
                                properties:
                                    switchSequence:
                                        type: "string"
                            action:
                                type: "object"
                                properties:
                                    type:
                                        type: "string"
                                        enum:
                                            - "redirect"
                                    url:
                                        type: "object"
                                        properties:
                                            address:
                                                type: "string"
                                            method:
                                                type: "string"
                        required:
                            - result
        generic.result:
            description: "Receive only result object on response"
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: "#/components/schemas/response.result"
                            - required:
                                - result
        login:
            description: "Returned a session token and related data"
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: "#/components/schemas/response.result"
                            - type: "object"
                              properties:
                                sessionToken:
                                    type: "string"
                                    example: "<session_token>"
                                user:
                                    allOf:
                                        - $ref: "#/components/schemas/securityPolicy.inactivityTimeout"
                                        - $ref: "#/components/schemas/attribute.user.name"
                                        - $ref: "#/components/schemas/attribute.user.preferName"
                                        - $ref: "#/components/schemas/attribute.user.lastLoginTimestamp"
                                        - $ref: "#/components/schemas/passwordPolicy.minimumLength"
                                        - $ref: "#/components/schemas/passwordPolicy.validationChecks"
                                        - $ref: "#/components/schemas/organization.name"
                                        - $ref: "#/components/schemas/organization.preferName"
                                        - $ref: "#/components/schemas/merchant.identifier"
                                        - type: "object"
                                          properties:
                                            device:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.device.authenticationData"
                            - required:
                                - result
                                - sessionToken
                                - user
                                - passwordPolicy
                                - organization
    securitySchemes:
        synapSessionToken:
            type: "apiKey"
            description: "Synap's session token is required for all commands except few specific purpose commands"
            name: x-synap-SessionToken
            in: header
security:
    - synapSessionToken: []
paths:
    /Echo:
        summary: "Ping the server"
        post:
            operationId: "Echo"
            tags:
                -  "System"
            summary: "Echo back request body"
            security: []
            requestBody:
                description: "content to be echoed back"
                content:
                    application/json:
                        schema:
                            anyOf:
                                - type: "array"
                                - type: "boolean"
                                - type: "number"
                                - type: "object"
                                - type: "string"
            responses:
                200:
                    description: "Echo back request body"
                    content:
                        application/json:
                            schema:
                                anyOf:
                                    - type: "array"
                                    - type: "boolean"
                                    - type: "number"
                                    - type: "object"
                                    - type: "string"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/logout:
        summary: "User logout or sign out"
        post:
            tags:
                -  "Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/login:
        summary: "User login or sign in"
        post:
            security: []
            tags:
                -  "Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.user.name"
                                        - $ref: "#/components/schemas/attribute.user.password"
                                        - required:
                                            - name
                                device:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.device.identifier"
                                        - $ref: "#/components/schemas/attribute.device.authenticationData"
                                        - required:
                                            - identifier
                                            - authenticationData
            responses:
                200:
                    $ref: "#/components/responses/login"
                default:
                    $ref: "#/components/responses/generic.result"
    /command/login.continue.with.secretCode:
        summary: "Continue login with secret code validation"
        post:
            tags:
                -  "Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                multiFactorAuthentication:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.multiFactorAuthentication.secretCode"
                                        - $ref: "#/components/schemas/attribute.multiFactorAuthentication.keystream"
                                        - required:
                                            - secretCode
                            required:
                                - multiFactorAuthentication
            responses:
                200:
                    $ref: "#/components/responses/login"
                default:
                    $ref: "#/components/responses/generic.result"
    /command/ContactShortList:  # deprecated
        summary: "Retrieve list of contact for an user"
        post:
            summary: "refer to /command/userContact.query.without.session"
            deprecated: true
            security: []
            tags:
                -  "Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                            minLength: 1
                                    required:
                                        - name
                            required:
                                - user
            responses:
                200:
                    description: "Returned a list of user's contact"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    mobiles:
                                        $ref: "#/components/schemas/UserMobileContactRecords"
                                    emails:
                                        $ref: "#/components/schemas/UserEmailContactRecords"
                                    landlines:
                                        $ref: "#/components/schemas/UserLandlineContactRecords"
                                required:
                                    - result
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/user.contact.query.without.session:
        summary: "Retrieve list of contact for an user"
        post:
            description: "Retrieve list of contact for an user without session token"
            security: []
            tags:
                -  "Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - user
                            required:
                                - filters
            responses:
                200:
                    description: "Returned a list of user's contact"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.contact.records"
                                    - required:
                                        - result
                default:
                    $ref: "#/components/responses/generic.result"
    /command/ChangePassword:  # deprecated
        summary: "Change user's existing password"
        post:
            summary: "refer to /command/password.change"
            deprecated: true
            security: []
            tags:
                -  "Password"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                            minLength: 1
                                        password:
                                            type: "string"
                                            minLength: 1
                                        newPassword:
                                            type: "string"
                                            minLength: 1
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/RequestToResetPassword:  # deprecated
        summary: "Request to reset user's existing password"
        post:
            summary: "refer to /command/password.reset.request.token"
            deprecated: true
            security: []
            tags:
                -  "Password"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                            minLength: 1
                                location:
                                    type: "object"
                                    properties:
                                        ipAddress:
                                            type: "string"
                                        currentTimestamp:
                                            type: "string"
                                            format: "date-time"
                                application:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                email:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                mobile:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
            responses:
                200:
                    description: "Returned an URL for user to reset password"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    password:
                                        type: "object"
                                        properties:
                                            resetURL:
                                                type: "string"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/VerifyResetPasswordToken:  # deprecated
        summary: "Verify security token for reset password"
        post:
            summary: "refer to /command/password.reset.verify.token"
            deprecated: true
            security: []
            tags:
                -  "Password"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                password:
                                    type: "object"
                                    properties:
                                        resetToken:
                                            type: "string"
                                            minLength: 1
                                    required:
                                        - resetToken
                            required:
                                - password
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/ResetPassword:
        summary: "Reset user's reset password"
        post:
            summary: "refer to /command/password.reset"
            deprecated: true
            security: []
            tags:
                -  "Password"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        newPassword:
                                            type: "string"
                                            minLength: 1
                                    required:
                                        - newPassword
                                password:
                                    type: "object"
                                    properties:
                                        resetToken:
                                            type: "string"
                                            minLength: 1
                                    required:
                                        - resetToken
                                location:
                                    type: "object"
                                    properties:
                                        ipAddress:
                                            type: "string"
                                            minLength: 1
                                    required:
                                        - ipAddress
                            required:
                                - user
                                - password
                                - location
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/password.change:
        summary: "Change user's existing password"
        post:
            tags:
                -  "Password"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.user.name"
                                        - $ref: "#/components/schemas/attribute.user.password"
                                        - $ref: "#/components/schemas/attribute.user.newPassword"
                                        - required:
                                            - name
                                            - password
                                            - newPassword
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/password.reset.request.token:
        summary: "Request to reset user's existing password"
        post:
            security: []
            tags:
                -  "Password"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - $ref: "#/components/schemas/contact.identifier"
                                - type: "object"
                                  properties:
                                    location:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.location.name"
                                            - $ref: "#/components/schemas/attribute.location.currentTimestamp"
                                            - required:
                                                - ipAddress
                                                - currentTimestamp
                                    application:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.application.identifier"
                                            - required:
                                                - identifier
                                - required:
                                    - user
                                    - contact
                                    - location
                                    - application
            responses:
                200:
                    description: "Returned an URL for user to reset password"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        user:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.user.passwordResetURL"
                                                - required:
                                                    - passwordResetURL
                                    - required:
                                        - result
                                        - user
                default:
                    $ref: "#/components/responses/generic.result"
    /command/password.reset.verify.token:
        summary: "Verify security token for reset password"
        post:
            security: []
            tags:
                -  "Password"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.user.passwordResetToken"
                                        - required:
                                            - passwordResetToken
                            required:
                                - user
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/password.reset:
        summary: "Reset user's reset password"
        post:
            security: []
            tags:
                -  "Password"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.user.newPassword"
                                        - $ref: "#/components/schemas/attribute.user.passwordResetToken"
                                        - required:
                                            - newPassword
                                            - passwordResetToken
                                location:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.location.name"
                                        - required:
                                            - ipAddress
                            required:
                                - user
                                - location
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/CheckUserAccessRights:  # deprecated
        summary: "Check user's access rights; refer to /command/accessRights.user.check"
        post:
            summary: "refer to /command/accessRights.user.check"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                accessRight:
                                    type: "object"
                                    properties:
                                        expression:
                                            type: "string"
                                            description: "arbitrary rights expression"
                                            example: "%user(joe) and transact(reversal)"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetAccessRights:  # deprecated
        summary: "Get list of access rights for an entity; refer to /command/accessRights.query"
        post:
            summary: "refer to /command/accessRights.query"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - oneOf:
                                    - type: "object"
                                      properties:
                                        user:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                            required:
                                                - name
                                      required:
                                        - user
                                    - type: "object"
                                      properties:
                                        team:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                            required:
                                                - name
                                      required:
                                        - team
                                    - type: "object"
                                      properties:
                                        organization:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                            required:
                                                - name
                                      required:
                                        - organization
                                - type: "object"
                                  properties:
                                    accessRightObject:
                                        $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
            responses:
                200:
                    $ref: "#/components/responses/GetAccessRightsResponse"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetUserAccessRights_v1:  # deprecated
        summary: "Get list of user's access rights; refer to /command/accessRights.query"
        post:
            summary: "refer to /command/accessRights.query"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                accessRightObject:
                                    $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                            required:
                                - user
                                - accessRightObject
            responses:
                200:
                    $ref: "#/components/responses/GetAccessRightsResponse_v1"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetTeamAccessRights:  # deprecated
        summary: "Get list of team's access rights; refer to /command/accessRights.query"
        post:
            summary: "refer to /command/accessRights.query"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                accessRightObject:
                                    $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                            required:
                                - team
                                - accessRightObject
            responses:
                200:
                    $ref: "#/components/responses/GetAccessRightsResponse"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetTeamAccessRights_v1:  # deprecated
        summary: "Get list of team's access rights; refer to /command/accessRights.query"
        post:
            summary: "refer to /command/accessRights.query"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                accessRightObject:
                                    $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                            required:
                                - team
                                - accessRightObject
            responses:
                200:
                    $ref: "#/components/responses/GetAccessRightsResponse_v1"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetOrganizationAccessRights:  # deprecated
        summary: "Get list of organization's access rights; refer to /command/accessRights.query"
        post:
            summary: "refer to /command/accessRights.query"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                accessRightObject:
                                    $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                            required:
                                - organization
                                - accessRightObject
            responses:
                200:
                    $ref: "#/components/responses/GetAccessRightsResponse"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetOrganizationAccessRights_v1:  # deprecated
        summary: "Get list of organization's access rights; refer to /command/accessRights.query"
        post:
            summary: "refer to /command/accessRights.query"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                accessRightObject:
                                    $ref: "#/components/schemas/AccessRightObjectNameOnRequest"
                            required:
                                - organization
                                - accessRightObject
            responses:
                200:
                    $ref: "#/components/responses/GetAccessRightsResponse_v1"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GrantAccessRights:  # deprecated
        summary: "Grant access rights to an entity; refer to /command/accessRights.grant"
        post:
            summary: "refer to /command/accessRights.grant"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/GrantAndRevokeAccessRights"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GrantUserAccessRights:  # deprecated
        summary: "Grant user's access rights; refer to /command/accessRights.grant"
        post:
            summary: "refer to /command/accessRights.grant"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/UserAccessRightsRequestBody"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GrantTeamAccessRights:  # deprecated
        summary: "Grant team's access rights; refer to /command/accessRights.grant"
        post:
            summary: "refer to /command/accessRights.grant"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/TeamAccessRightsRequestBody"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GrantOrganizationAccessRights:  # deprecated
        summary: "Grant organization's access rights; refer to /command/accessRights.grant"
        post:
            summary: "refer to /command/accessRights.grant"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/OrganizationAccessRightsRequestBody"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/RevokeAccessRights:  # deprecated
        summary: "Revoke access rights of an entity; refer to /command/accessRights.revoke"
        post:
            summary: "refer to /command/accessRights.revoke"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/GrantAndRevokeAccessRights"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/RevokeUserAccessRights:  # deprecated
        summary: "Revoke user's access rights; refer to /command/accessRights.revoke"
        post:
            summary: "refer to /command/accessRights.revoke"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/UserAccessRightsRequestBody"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/RevokeTeamAccessRights:  # deprecated
        summary: "Revoke team's access rights; refer to /command/accessRights.revoke"
        post:
            summary: "refer to /command/accessRights.revoke"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/TeamAccessRightsRequestBody"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/RevokeOrganizationAccessRights:  # deprecated
        summary: "Revoke organization's access rights; refer to /command/accessRights.revoke"
        post:
            summary: "refer to /command/accessRights.revoke"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/OrganizationAccessRightsRequestBody"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/RevokeAndGrantAccessRights:
        summary: "Revoke and grant access rights of/to an entity"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/accessRights.grant.revoke"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.user.check:
        summary: "Check user's access rights"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - allOf:
                                    - $ref: "#/components/schemas/user.name"
                                    - type: "object"
                                      properties:
                                        task:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                                    description: "name of a defined task"
                                                    example: "a task"
                                                actionName:
                                                    type: "string"
                                                    description: "action's name of a defined task"
                                                    example: "an action"
                                            required:
                                                - name
                                                - actionName
                                    - required:
                                        - task
                                - allOf:
                                    - $ref: "#/components/schemas/user.name"
                                    - type: "object"
                                      properties:
                                        accessRights:
                                            type: "object"
                                            properties:
                                                expression:
                                                    type: "string"
                                                    description: "arbitrary rights expression"
                                                    example: "%user(joe) and transact(reversal)"
                                            required:
                                                - expression
                                    - required:
                                        - accessRights
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.query:
        summary: "Get list of access rights for an entity"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    $ref: "#/components/schemas/accessRights.entities"
                            required:
                                - filters
            responses:
                200:
                    description: "Returned list of access rights"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        accessRightsObjects:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.accessRightsObject.name"
                                                    - $ref: "#/components/schemas/attribute.accessRightsObject.accessRightsActions"
                                                    - required:
                                                        - name
                                                        - accessRightsActions
                                    - required:
                                        - result
                                        - accessRightsObjects
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.grant:
        summary: "Grant access rights to an entity"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/accessRights.grant.revoke"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.revoke:
        summary: "Revoke access rights of an entity"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/accessRights.grant.revoke"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetUser:  # deprecated
        summary: "Get user's details"
        post:
            summary: "refer to /command/user.query"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    users:
                                        $ref: "#/components/schemas/UserRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchUser:  # deprecated
        summary: "Fetch more user's details with cursor"
        post:
            summary: "refer to /command/user.fetch"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    users:
                                        $ref: "#/components/schemas/UserRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetUserDetailsOfAnUser:  # deprecated
        summary: "Get user's details of an user"
        post:
            summary: "refer to /command/user.query.for.an.user"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - user
            responses:
                200:
                    description: "Returned user details record of an user"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    user:
                                        $ref: "#/components/schemas/UserRecord"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewUser:  # deprecated
        summary: "Create a new user's record"
        post:
            summary: "refer to /command/user.new"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                policy:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        inactivityTimeout:
                                            type: "integer"
                                            format: "int32"
                                        maximumSessions:
                                            type: "integer"
                                            format: "int32"
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                            description: "default team of an user"
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        preferName:
                                            type: "string"
                                        newPassword:
                                            type: "string"
                                        oneTimePassword:
                                            type: "string"
                                        firstTimePassword:
                                            type: "string"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateUser:  # deprecated
        summary: "Update an existing user's record"
        post:
            summary: "refer to /command/user.update"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/attribute.organization.name"
                                policy:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        inactivityTimeout:
                                            type: "integer"
                                            format: "int32"
                                        maximumSessions:
                                            type: "integer"
                                            format: "int32"
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                            description: "default team of an user"
                                user:
                                    allOf:
                                        - $ref: "#/components/schemas/RecordStatus"
                                        - type: "object"
                                          properties:
                                            name:
                                                type: "string"
                                            preferName:
                                                type: "string"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteUser:  # deprecated
        summary: "Delete an existing user's record"
        post:
            summary: "refer to /command/user.delete"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/user.query:
        summary: "Get user's details"
        post:
            description: "Get user's details"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/user.name"
                                            - $ref: "#/components/schemas/organization.name"
                                            - $ref: "#/components/schemas/team.name"
                                            - $ref: "#/components/schemas/securityPolicy.name"
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        users:
                                            allOf:
                                                - $ref: "#/components/schemas/response.user.records"
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.fetch:
        summary: "Fetch more user's details with cursor"
        post:
            description: "Fetch more user's details with cursor"
            tags:
                -  "User"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        users:
                                            allOf:
                                                - $ref: "#/components/schemas/response.user.records"
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.query.for.an.user:
        summary: "Get user's details of an user"
        post:
            description: "Get user's details of an user"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/user.name"
                                            - required:
                                                - user
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned user details record of an user"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        user:
                                            allOf:
                                                - $ref: "#/components/schemas/response.user.record"
                                    - required:
                                        - result
                                        - user
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.new:
        summary: "Create a new user's record"
        post:
            description: "Create a new user's record"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/attribute.user.name"
                                - $ref: "#/components/schemas/attribute.user.preferName"
                                - $ref: "#/components/schemas/attribute.user.newPassword"
                                - oneOf:
                                    - $ref: "#/components/schemas/attribute.user.oneTimePassword"
                                    - $ref: "#/components/schemas/attribute.user.firstTimePassword"
                                - $ref: "#/components/schemas/attribute.user.loginShell"
                                - $ref: "#/components/schemas/attribute.user.loginShellArguments"
                                - $ref: "#/components/schemas/attribute.user.serverLoginScriptPath"
                                - $ref: "#/components/schemas/attribute.user.homeDirectoryPath"
                                - $ref: "#/components/schemas/attribute.user.notificationOptInMap"
                                - $ref: "#/components/schemas/email.address"
                                - $ref: "#/components/schemas/organization.name"
                                - $ref: "#/components/schemas/securityPolicy.name"
                                - $ref: "#/components/schemas/securityPolicy.inactivityTimeout"
                                - $ref: "#/components/schemas/securityPolicy.maximumSessions"
                                - $ref: "#/components/schemas/securityPolicy.sessionExceededPolicy"
                                - $ref: "#/components/schemas/team.name"
                                - required:
                                    - name
                                    - organization
                                    - securityPolicy
                                    - team
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.update:
        summary: "Update an existing user's record"
        post:
            description: "Update an existing user's record"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - user
                                user:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.recordStatus"
                                        - $ref: "#/components/schemas/attribute.user.preferName"
                                        - $ref: "#/components/schemas/attribute.user.loginShell"
                                        - $ref: "#/components/schemas/attribute.user.loginShellArguments"
                                        - $ref: "#/components/schemas/attribute.user.serverLoginScriptPath"
                                        - $ref: "#/components/schemas/attribute.user.homeDirectoryPath"
                                        - $ref: "#/components/schemas/attribute.user.notificationOptInMap"
                                        - $ref: "#/components/schemas/organization.name"
                                        - $ref: "#/components/schemas/securityPolicy.name"
                                        - $ref: "#/components/schemas/securityPolicy.inactivityTimeout"
                                        - $ref: "#/components/schemas/securityPolicy.maximumSessions"
                                        - $ref: "#/components/schemas/securityPolicy.sessionExceededPolicy"
                                        - $ref: "#/components/schemas/team.name"
                            required:
                                - filters
                                - user
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.delete:
        summary: "Delete an existing user's record"
        post:
            description: "Delete an existing user's record"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - user
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetUserProfile:  # deprecated
        summary: "Get user's profile"
        post:
            summary: "refer to /command/userProfile.query"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    userProfile:
                                        $ref: "#/components/schemas/UserProfile"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewUserProfile:  # deprecated
        summary: "Create a new user profile's record"
        post:
            summary: "refer to /command/userProfile.new"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                userProfile:
                                    $ref: "#/components/schemas/UserProfile"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateUserProfile:  # deprecated
        summary: "Update an existing user profile's record"
        post:
            summary: "refer to /command/userProfile.update"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                userProfile:
                                    $ref: "#/components/schemas/UserProfile"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/userProfile.query:
        summary: "Get user's profile"
        post:
            description: "Get user's profile"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - user
                            required:
                                - filters
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        userProfile:
                                            $ref: "#/components/schemas/response.userProfile.record"
                                    - required:
                                        - result
                                        - userProfile
                default:
                    $ref: "#/components/responses/generic.result"
    /command/userProfile.new:
        summary: "Create a new user profile's record"
        post:
            description: "Create a new user profile's record"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - type: "object"
                                  properties:
                                    userProfile:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.nationalIdentityCard"
                                            - $ref: "#/components/schemas/attribute.gender"
                                            - $ref: "#/components/schemas/attribute.nationality"
                                            - $ref: "#/components/schemas/attribute.race"
                                            - $ref: "#/components/schemas/attribute.birthdate"
                                            - $ref: "#/components/schemas/attribute.salutationPrefix"
                                            - $ref: "#/components/schemas/attribute.salutationSuffix"
                                            - $ref: "#/components/schemas/attribute.firstName"
                                            - $ref: "#/components/schemas/attribute.middleName"
                                            - $ref: "#/components/schemas/attribute.lastName"
                                            - $ref: "#/components/schemas/attribute.otherName"
                                - required:
                                    - user
                                    - userProfile
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/userProfile.update:
        summary: "Update an existing user profile's record"
        post:
            description: "Update an existing user profile's record"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - user
                                userProfile:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.nationalIdentityCard"
                                        - $ref: "#/components/schemas/attribute.gender"
                                        - $ref: "#/components/schemas/attribute.nationality"
                                        - $ref: "#/components/schemas/attribute.race"
                                        - $ref: "#/components/schemas/attribute.birthdate"
                                        - $ref: "#/components/schemas/attribute.salutationPrefix"
                                        - $ref: "#/components/schemas/attribute.salutationSuffix"
                                        - $ref: "#/components/schemas/attribute.firstName"
                                        - $ref: "#/components/schemas/attribute.middleName"
                                        - $ref: "#/components/schemas/attribute.lastName"
                                        - $ref: "#/components/schemas/attribute.otherName"
                            required:
                                - filters
                                - userProfile
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetUserMailingAddress:  # deprecated
        summary: "Get user's address"
        post:
            summary: "refer to /command/userMailingAddress.query"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                mailingAddress:
                                    $ref: "#/components/schemas/MailingAddressType"
                            required:
                                - user
                                - mailingAddress
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    mailingAddresses:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                mailingAddress:
                                                    allOf:
                                                        - $ref: "#/components/schemas/RecordStatus"
                                                        - $ref: "#/components/schemas/CreateDateTime"
                                                        - $ref: "#/components/schemas/MailingAddressType"
                                                        - $ref: "#/components/schemas/MailingAddress"
                                            required:
                                                - mailingAddress
                                required:
                                    - result
                                    - mailingAddresses
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewUserMailingAddress:  # deprecated
        summary: "Create a new user's mailing address"
        post:
            summary: "refer to /command/userMailingAddress.new"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                mailingAddress:
                                    allOf:
                                        - $ref: "#/components/schemas/MailingAddressType"
                                        - $ref: "#/components/schemas/MailingAddress"
                            required:
                                - user
                                - mailingAddress
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateUserMailingAddress:  # deprecated
        summary: "Update an existing user's mailing address"
        post:
            summary: "refer to /command/userMailingAddress.update"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                mailingAddress:
                                    allOf:
                                        - $ref: "#/components/schemas/MailingAddressType"
                                        - $ref: "#/components/schemas/MailingAddress"
                            required:
                                - user
                                - mailingAddress
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteUserMailingAddress:  # deprecated
        summary: "Delete an existing user's mailing address"
        post:
            summary: "refer to /command/userMailingAddress.delete"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                mailingAddress:
                                    $ref: "#/components/schemas/MailingAddressType"
                            required:
                                - user
                                - mailingAddress
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/userMailingAddress.query:  # deprecated
        summary: "Get user's mailing address"
        post:
            description: "Get user's mailing address; refer to /command/user.mailingAddress.query"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - $ref: "#/components/schemas/mailingAddress.type"
                                        - required:
                                            - user
                            required:
                                - filters
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        mailingAddresses:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.recordStatus"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.type"
                                                    - $ref: "#/components/schemas/country.isoNumericCode"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                required:
                                    - result
                                    - mailingAddresses
                default:
                    $ref: "#/components/responses/generic.result"
    /command/userMailingAddress.new:  #deprecated
        summary: "Create a new user's mailing address"
        post:
            description: "Create a new user's mailing address; refer to /command/user.mailingAddress.new"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - type: "object"
                                  properties:
                                    mailingAddress:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.mailingAddress.type"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                            - required:
                                                - type
                                    country:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.country.isoNumericCode"
                                            - required:
                                                - isoNumericCode
                                - required:
                                    - user
                                    - mailingAddress
                                    - country
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/userMailingAddress.update:  #deprecated
        summary: "Update an existing user's mailing address"
        post:
            description: "Update an existing user's mailing address; refer to /command/user.mailingAddress.update"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - $ref: "#/components/schemas/mailingAddress.type"
                                        - required:
                                            - user
                                            - mailingAddress
                                mailingAddress:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                country:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.country.isoNumericCode"
                                        - required:
                                            - isoNumericCode
                            required:
                                - filters
                                - mailingAddress
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/userMailingAddress.delete:  #deprecated
        summary: "Delete an existing user's mailing address"
        post:
            description: "Delete an existing user's mailing address; refer to /command/user.mailingAddress.delete"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - $ref: "#/components/schemas/mailingAddress.type"
                                        - required:
                                            - user
                                            - mailingAddress
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.mailingAddress.query:
        summary: "Get user's mailing address"
        post:
            description: "Get user's mailing address"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - $ref: "#/components/schemas/mailingAddress.type"
                                        - required:
                                            - user
                            required:
                                - filters
            responses:
                200:
                    description: "Returned list of user records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        mailingAddresses:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.recordStatus"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.type"
                                                    - $ref: "#/components/schemas/country.isoNumericCode"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                required:
                                    - result
                                    - mailingAddresses
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.mailingAddress.new:
        summary: "Create a new user's mailing address"
        post:
            description: "Create a new user's mailing address"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - type: "object"
                                  properties:
                                    mailingAddress:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.mailingAddress.type"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                            - required:
                                                - type
                                    country:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.country.isoNumericCode"
                                            - required:
                                                - isoNumericCode
                                - required:
                                    - user
                                    - mailingAddress
                                    - country
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.mailingAddress.update:
        summary: "Update an existing user's mailing address"
        post:
            description: "Update an existing user's mailing address"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - $ref: "#/components/schemas/mailingAddress.type"
                                        - required:
                                            - user
                                            - mailingAddress
                                mailingAddress:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                country:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.country.isoNumericCode"
                                        - required:
                                            - isoNumericCode
                            required:
                                - filters
                                - mailingAddress
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.mailingAddress.delete:
        summary: "Delete an existing user's mailing address"
        post:
            description: "Delete an existing user's mailing address"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - $ref: "#/components/schemas/mailingAddress.type"
                                        - required:
                                            - user
                                            - mailingAddress
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetUserContact:  # deprecated
        summary: "Get user's contact"
        post:
            summary: "refer to /command/user.contact.query"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                contact:
                                    allOf:
                                        - $ref: "#/components/schemas/UserContactType"
                                        - type: "object"
                                          properties:
                                            identifier:
                                                type: "string"
                                        - required:
                                            - type
                            required:
                                - user
            responses:
                200:
                    description: "Returned list of user contact records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    users:
                                        $ref: "#/components/schemas/UserContactRecords"
                                required:
                                    - result
                                    - users
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchUserContact:  # deprecated
        summary: "Fetch more user's contacts with cursor"
        post:
            summary: "refer to /command/user.contact.fetch"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of user contact records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    users:
                                        $ref: "#/components/schemas/UserContactRecords"
                                required:
                                    - result
                                    - users
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetUserContactOfAnUser:  # deprecated
        summary: "Get an user's contact"
        post:
            summary: "refer to /command/user.contact.query.for.an.user"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                contact:
                                    allOf:
                                        - $ref: "#/components/schemas/UserContactType"
                                        - type: "object"
                                          properties:
                                            identifier:
                                                type: "string"
                            required:
                                - user
            responses:
                200:
                    description: "Returned list of contact records of an user"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    user:
                                        type: "object"
                                        properties:
                                            name:
                                                type: "string"
                                        required:
                                            - name
                                    mobiles:
                                        $ref: "#/components/schemas/UserMobileContactRecords"
                                    emails:
                                        $ref: "#/components/schemas/UserEmailContactRecords"
                                    landlines:
                                        $ref: "#/components/schemas/UserLandlineContactRecords"
                                required:
                                    - result
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewUserContact:  # deprecated
        summary: "Create a new contact's record"
        post:
            summary: "refer to /command/user.contact.new"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                contact:
                                    allOf:
                                        - $ref: "#/components/schemas/UserContactType"
                                        - $ref: "#/components/schemas/ContactAddress"
                                        - type: "object"
                                          properties:
                                            class:
                                                type: "string"
                                        - required:
                                            - type
                                            - address
                                flags:
                                    $ref: "#/components/schemas/UserContactFlags"
                            required:
                                - user
                                - contact
                                - flags
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateUserContact:  # deprecated
        summary: "Update an existing contact's record"
        post:
            summary: "refer to /command/user.contact.update"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                contact:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                        address:
                                            type: "string"
                                        class:
                                            type: "string"
                                    required:
                                        - identifier
                                flags:
                                    $ref: "#/components/schemas/UserContactFlags"
                            required:
                                - user
                                - contact
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteUserContact:  # deprecated
        summary: "Delete an existing contact's record"
        post:
            summary: "refer to /command/user.contact.delete"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                contact:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                                flags:
                                    $ref: "#/components/schemas/UserContactFlags"
                            required:
                                - user
                                - contact
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/VerifyUserContact:  # deprecated
        summary: "Verify an existing contact's record"
        post:
            summary: "refer to /command/user.contact.verify"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                contact:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                                flags:
                                    $ref: "#/components/schemas/UserContactFlags"
                            required:
                                - user
                                - contact
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/user.contact.query:
        summary: "Get user's contact"
        post:
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - type: "object"
                                          properties:
                                            contact:
                                                anyOf:
                                                    - $ref: "#/components/schemas/attribute.contact.type"
                                                    - $ref: "#/components/schemas/attribute.contact.classification"
                                                    - $ref: "#/components/schemas/attribute.contact.identifier"
                                                    - $ref: "#/components/schemas/attribute.contact.addressOrNumber"
                                                    - $ref: "#/components/schemas/attribute.contact.flags"
                                        - required:
                                            - user
                            required:
                                - filters
            responses:
                200:
                    description: "Returned list of user contact records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        users:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.user.identifier"
                                                    - $ref: "#/components/schemas/response.contact.records"
                                                    - required:
                                                        - identifier
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.contact.fetch:
        summary: "Fetch more user's contacts with cursor"
        post:
            tags:
                -  "User"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of user contact records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        users:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.user.identifier"
                                                    - $ref: "#/components/schemas/response.contact.records"
                                                    - required:
                                                        - identifier
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.contact.query.for.an.user:
        summary: "Get an user's contact"
        post:
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - user
                            required:
                                - filters
            responses:
                200:
                    description: "Returned list of contact records of an user"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.contact.records"
                                required:
                                    - result
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.contact.new:
        summary: "Create a new contact record for an existing user"
        post:
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - type: "object"
                                  properties:
                                    contact:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.contact.type"
                                            - $ref: "#/components/schemas/attribute.contact.classification"
                                            - $ref: "#/components/schemas/attribute.contact.addressOrNumber"
                                            - $ref: "#/components/schemas/attribute.contact.flags"
                                            - required:
                                                - type
                                                - addressOrNumber
                                - required:
                                    - user
                                    - contact
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.contact.update:
        summary: "Update an existing user's contact record"
        post:
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - type: "object"
                                          properties:
                                            contact:
                                                anyOf:
                                                    - $ref: "#/components/schemas/attribute.contact.type"
                                                    - $ref: "#/components/schemas/attribute.contact.classification"
                                                    - $ref: "#/components/schemas/attribute.contact.identifier"
                                                    - $ref: "#/components/schemas/attribute.contact.addressOrNumber"
                                                    - $ref: "#/components/schemas/attribute.contact.flags"
                                        - required:
                                            - user
                                            - contact
                                contact:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.contact.classification"
                                        - $ref: "#/components/schemas/attribute.contact.addressOrNumber"
                                        - $ref: "#/components/schemas/attribute.contact.flags"
                            required:
                                - filters
                                - contact
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.contact.delete:
        summary: "Delete an existing user's contact record"
        post:
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - type: "object"
                                          properties:
                                            contact:
                                                anyOf:
                                                    - $ref: "#/components/schemas/attribute.contact.type"
                                                    - $ref: "#/components/schemas/attribute.contact.identifier"
                                                    - $ref: "#/components/schemas/attribute.contact.flags"
                                        - required:
                                            - user
                                            - contact
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/user.contact.verify:
        summary: "Verify an existing user's contact record"
        post:
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - $ref: "#/components/schemas/contact.identifier"
                                        - required:
                                            - user
                                            - contact
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetUserTeam:  # deprecated
        summary: "Get list of teams for users"
        post:
            summary: "refer to /command/user.team.query"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of user's team records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    users:
                                        $ref: "#/components/schemas/UserTeamRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchUserTeam:  # deprecated
        summary: "Fetch more teams of users with cursor"
        post:
            summary: "no longer supported"
            deprecated: true
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of user's team records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    users:
                                        $ref: "#/components/schemas/UserTeamRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetTeam:  # deprecated
        summary: "Get team's details"
        post:
            summary: "refer to /command/team.query"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
                            required:
                                - team
                                - user
            responses:
                200:
                    description: "Returned list of team records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    teams:
                                        $ref: "#/components/schemas/TeamRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchTeam:  # deprecated
        summary: "Fetch more team's details with cursor"
        post:
            summary: "refer to /command/team.fetch"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of team records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    teams:
                                        $ref: "#/components/schemas/TeamRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewTeam:  # deprecated
        summary: "Create a new team's record"
        post:
            summary: "refer to /command/team.new"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        restricted:
                                            type: "string"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateTeam:  # deprecated
        summary: "Update an existing team's record"
        post:
            summary: "refer to /command/team.update"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    allOf:
                                        - type: "object"
                                          properties:
                                            name:
                                                type: "string"
                                        - $ref: "#/components/schemas/RecordStatus"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteTeam:  # deprecated
        summary: "Delete an existing team's record"
        post:
            summary: "refer to /command/team.delete"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                migrateToTeam:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - team
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetTeamUser:  # deprecated
        summary: "Get list of users for a team or list of teams for an user"
        post:
            summary: "refer to /command/team.user.query"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of team user records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    teams:
                                        $ref: "#/components/schemas/TeamUserRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchTeamUser:  # deprecated
        summary: "Fetch more team users with cursor"
        post:
            summary: "no longer supported"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of team user records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    teams:
                                        $ref: "#/components/schemas/TeamUserRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewTeamUser:  # deprecated
        summary: "Create a new team user's record"
        post:
            summary: "refer to /command/team.user.new"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateTeamUser:  # deprecated
        summary: "Update an existing team user's record"
        post:
            summary: "refer to /command/team.user.update"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                user:
                                    allOf:
                                        - type: "object"
                                          properties:
                                            name:
                                                type: "string"
                                        - $ref: "#/components/schemas/RecordStatus"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteTeamUser:  # deprecated
        summary: "Delete an existing team user's record"
        post:
            summary: "refer to /command/team.user.delete"
            deprecated: true
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/user.team.query:
        summary: "Get list of teams for an user"
        post:
            description: "Retrieve list of teams for an user"
            tags:
                -  "User"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - user
                            required:
                                - filters
            responses:
                200:
                    description: "Returned list of user's team records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        teams:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.team.name"
                                                    - required:
                                                        - name
                                    - required:
                                        - result
                                        - teams
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.query:
        summary: "Get team's details"
        post:
            description: "Retrieve the list of teams"
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/team.name"
                                            - required:
                                                - team
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of team records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        teams:
                                            allOf:
                                                - $ref: "#/components/schemas/response.team.records"
                                    - required:
                                        - result
                                        - teams
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.fetch:
        summary: "Fetch more team's details with cursor"
        post:
            description: "Fetch more team's details with cursor"
            tags:
                -  "Team"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of team records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        teams:
                                            allOf:
                                                - $ref: "#/components/schemas/response.team.records"
                                    - required:
                                        - result
                                        - teams
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.new:
        summary: "Create a new team's record"
        post:
            description: "Create a new team's record"
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/team.name"
                                - $ref: "#/components/schemas/organization.name"
                                - required:
                                    - team
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.update:
        summary: "Update an existing team's record"
        post:
            description: "Update an existing team's record"
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/team.name"
                                        - required:
                                            - team
                                team:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.recordStatus"
                                        - required:
                                            - recordStatus
                            required:
                                - filters
                                - team
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.delete:
        summary: "Delete an existing team's record"
        post:
            description: "Delete an existing team's record"
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/team.name"
                                        - required:
                                            - team
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.user.query:
        summary: "Get list of users for a team"
        post:
            description: "Get list of users for a team"
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/team.name"
                                            - required:
                                                - team
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of team user records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        users:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.user.name"
                                                    - required:
                                                        - name
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.user.new:
        summary: "Create a new team user's record"
        post:
            description: "Create a new team user's record"
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/team.name"
                                - $ref: "#/components/schemas/user.name"
                                - required:
                                    - team
                                    - user
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.user.update:
        summary: "Update an existing team user's record"
        post:
            description: "Update an existing team user's record"
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/team.name"
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - team
                                            - user
                                user:
                                    allOf:
                                        - $ref: "#/components/schemas/generic.recordStatus"
                                        - required:
                                            - recordStatus
                            required:
                                - filters
                                - user
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/team.user.delete:
        summary: "Delete an existing team user's record"
        post:
            description: "Delete an existing team user's record"
            tags:
                -  "Team"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/team.name"
                                        - $ref: "#/components/schemas/user.name"
                                        - required:
                                            - team
                                            - user
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetAccessRightObject:  # deprecated
        summary: "Get access rights's object; refer to /command/accessRights.object.query"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                accessRightObject:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
                            required:
                                - accessRightObject
            responses:
                200:
                    description: "Returned list of access rights object records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    accessRightObjects:
                                        $ref: "#/components/schemas/AccessRightObjectRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchAccessRightObject:  # deprecated
        summary: "Fetch more access right object's details with cursor; refer to /command/accessRights.object.fetch"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of access right object records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    accessRightObjects:
                                        $ref: "#/components/schemas/AccessRightObjectRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewAccessRightObject:  # deprecated
        summary: "Create a new access right object's record; refer to /command/accessRights.object.new"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                accessRightObject:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        restricted:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - accessRightObject
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateAccessRightObject:  # deprecated
        summary: "Update an existing access right object's record; refer to /command/accessRights.object.update"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                accessRightObject:
                                    allOf:
                                        - type: "object"
                                          properties:
                                            name:
                                                type: "string"
                                          required:
                                            - name
                                        - $ref: "#/components/schemas/RecordStatus"
                            required:
                                - accessRightObject
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteAccessRightObject:  # deprecated
        summary: "Delete an existing access right object's record; refer to /command/accessRights.object.delete"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                accessRightObject:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - accessRightObject
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetAccessRightAction:  # deprecated
        summary: "Get access rights's action; refer to /command/accessRights.action.query"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                accessRightObject:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
                            required:
                                - accessRightObject
            responses:
                200:
                    description: "Returned list of access rights action records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    accessRightObjects:
                                        $ref: "#/components/schemas/AccessRightActionRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchAccessRightAction:  # deprecated
        summary: "Fetch more access right actions with cursor; refer to /command/accessRights.action.fetch"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of access right action records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    accessRightObjects:
                                        $ref: "#/components/schemas/AccessRightActionRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewAccessRightAction:  # deprecated
        summary: "Create a new access right action's record; refer to /command/accessRights.action.new"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                accessRightObject:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        actionName:
                                            type: "string"
                                    required:
                                        - name
                                        - actionName
                            required:
                                - accessRightObject
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateAccessRightAction:  # deprecated
        summary: "Update an existing access right action's record; refer to /command/accessRights.action.rename"
        post:
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                accessRightObject:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        actionName:
                                            type: "string"
                                    required:
                                        - name
                                        - actionName
                            required:
                                - accessRightObject
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteAccessRightAction:  # deprecated
        summary: "Delete an existing access right action's record; refer to /command/accessRights.action.delete"
        post:
            summary: "refer to /command/accessRights.action.delete"
            deprecated: true
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                accessRightObject:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        actionName:
                                            type: "string"
                                    required:
                                        - name
                                        - actionName
                            required:
                                - accessRightObject
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/accessRights.object.query:
        summary: "Get access rights's object"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/accessRightsObject.name"
                                            - required:
                                                - accessRightsObject
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of access rights object records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - $ref: "#/components/schemas/response.accessRightsObjects"
                                    - required:
                                        - result
                                        - accessRightsObjects
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.object.fetch:
        summary: "Fetch more access right object's details with cursor"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of access right object records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.accessRightsObjects"
                                    - required:
                                        - result
                                        - accessRightsObjects
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.object.new:
        summary: "Create a new access right object's record"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/accessRightsObject.name"
                                - $ref: "#/components/schemas/organization.name"
                                - required:
                                    - accessRightsObject
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.object.update:
        summary: "Update an existing access right object's record"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    type: "object"
                                    properties:
                                        accessRightsObject:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.accessRightsObject.name"
                                                - required:
                                                    - name
                                accessRightsObject:
                                    allOf:
                                        - $ref: "#/components/schemas/generic.recordStatus"
                                        - required:
                                            - recordStatus
                            required:
                                - filters
                                - accessRightsObject
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.object.delete:
        summary: "Delete an existing access right object's record"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/accessRightsObject.name"
                                        - required:
                                            - accessRightsObject
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.action.query:
        summary: "Get access rights's action"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/accessRightsObject.name"
                                            - required:
                                                - accessRightsObject
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of access rights action records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - $ref: "#/components/schemas/response.accessRightsActions"
                                    - required:
                                        - result
                                        - accessRightsObjects
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.action.fetch:
        summary: "Fetch more access right actions with cursor"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of access right action records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.accessRightsActions"
                                    - required:
                                        - result
                                        - accessRightsObjects
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.action.new:
        summary: "Create a new access right action's record"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/accessRightsObject.name"
                                - $ref: "#/components/schemas/accessRightsAction.name"
                                - required:
                                    - accessRightsObject
                                    - accessRightsAction
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.action.rename:
        summary: "Rename an existing access right action's record"
        description: "Rename an existing access right action name to a new name defined in 'accessRightsAction.name'"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/accessRightsObject.name"
                                            - $ref: "#/components/schemas/accessRightsAction.name"
                                            - required:
                                                - accessRightsObject
                                                - accessRightsAction
                                - $ref: "#/components/schemas/accessRightsAction.name"
                            required:
                                - filters
                                - accessRightsAction
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/accessRights.action.delete:
        summary: "Delete an existing access right action's record"
        post:
            tags:
                -  "Access Rights"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                        allOf:
                                            - $ref: "#/components/schemas/accessRightsObject.name"
                                            - $ref: "#/components/schemas/accessRightsAction.name"
                                            - required:
                                                - accessRightsObject
                                                - accessRightsAction
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetPasswordPolicy:  # deprecated
        summary: "Get password policy's details"
        post:
            summary: "refer to /command/passwordPolicy.query"
            deprecated: true
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                passwordPolicy:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of password policy records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    passwordPolicies:
                                        $ref: "#/components/schemas/PasswordPolicyRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchPasswordPolicy:  # deprecated
        summary: "Fetch more password policy with cursor"
        post:
            summary: "refer to /command/passwordPolicy.fetch"
            deprecated: true
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of password policy records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    passwordPolicies:
                                        $ref: "#/components/schemas/PasswordPolicyRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewPasswordPolicy:  # deprecated
        summary: "Create a new password policy's record"
        post:
            summary: "refer to /command/passwordPolicy.new"
            deprecated: true
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                passwordPolicy:
                                    $ref: "#/components/schemas/PasswordPolicy"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdatePasswordPolicy:  # deprecated
        summary: "Update an existing password policy's record"
        post:
            summary: "refer to /command/passwordPolicy.update"
            deprecated: true
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                passwordPolicy:
                                    $ref: "#/components/schemas/PasswordPolicy"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeletePasswordPolicy:  # deprecated
        summary: "Delete an existing password policy's record"
        post:
            summary: "refer to /command/passwordPolicy.delete"
            deprecated: true
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                passwordPolicy:
                                    $ref: "#/components/schemas/PasswordPolicyName"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/passwordPolicy.query:
        summary: "Get password policy's details"
        post:
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/passwordPolicy.name"
                                            - required:
                                                - passwordPolicy
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of password policy records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        passwordPolicies:
                                            $ref: "#/components/schemas/response.passwordPolicy.records"
                                    - required:
                                        - result
                                        - passwordPolicies
                default:
                    $ref: "#/components/responses/generic.result"
    /command/passwordPolicy.fetch:
        summary: "Fetch more password policy with cursor"
        post:
            tags:
                -  "Password Policy"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of password policy records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        passwordPolicies:
                                            $ref: "#/components/schemas/response.passwordPolicy.records"
                                    - required:
                                        - result
                                        - passwordPolicies
                default:
                    $ref: "#/components/responses/generic.result"
    /command/passwordPolicy.new:
        summary: "Create a new password policy's record"
        post:
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    passwordPolicy:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.name"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.minimumStrength"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.minimumLength"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.historySize"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.maximumLife"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.maximumFailedAttempts"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.lockoutPeriod"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.resetLife"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.validationChecks"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.hashAlgorithm"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.hashDigest"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.hashEncoding"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.hashSaltSize"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.hashKeySize"
                                            - $ref: "#/components/schemas/attribute.passwordPolicy.hashRounds"
                                - $ref: "#/components/schemas/organization.name"
                                - required:
                                    - passwordPolicy
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/passwordPolicy.update:
        summary: "Update an existing password policy's record"
        post:
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/passwordPolicy.name"
                                        - required:
                                            - passwordPolicy
                                passwordPolicy:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.recordStatus"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.minimumStrength"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.minimumLength"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.historySize"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.maximumLife"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.maximumFailedAttempts"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.lockoutPeriod"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.resetLife"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.validationChecks"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.hashAlgorithm"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.hashDigest"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.hashEncoding"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.hashSaltSize"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.hashKeySize"
                                        - $ref: "#/components/schemas/attribute.passwordPolicy.hashRounds"
                            required:
                                - filters
                                - passwordPolicy
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/passwordPolicy.delete:
        summary: "Delete an existing password policy's record"
        post:
            tags:
                -  "Password Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/passwordPolicy.name"
                                        - required:
                                            - passwordPolicy
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetAuthenticationPolicy:  # deprecated
        summary: "Get authentication policy's details"
        post:
            summary: "refer to /command/securityPolicy.query"
            deprecated: true
            tags:
                -  "Authentication Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                authenticationPolicy:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of authentication policy records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    authenticationPolicies:
                                        $ref: "#/components/schemas/AuthenticationPolicyRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchAuthenticationPolicy:  # deprecated
        summary: "Fetch more authentication policy with cursor"
        post:
            summary: "refer to /command/securityPolicy.fetch"
            deprecated: true
            tags:
                -  "Authentication Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of authentication policy records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    authenticationPolicies:
                                        $ref: "#/components/schemas/AuthenticationPolicyRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewAuthenticationPolicy:  # deprecated
        summary: "Create a new authentication policy's record"
        post:
            summary: "refer to /command/securityPolicy.new"
            deprecated: true
            tags:
                -  "Authentication Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                authenticationPolicy:
                                    $ref: "#/components/schemas/AuthenticationPolicyRecord"
                                passwordPolicy:
                                    $ref: "#/components/schemas/PasswordPolicyName"
                            required:
                                - authenticationPolicy
                                - passwordPolicy
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateAuthenticationPolicy:  # deprecated
        summary: "Update an existing authentication policy's record"
        post:
            summary: "refer to /command/securityPolicy.update"
            deprecated: true
            tags:
                -  "Authentication Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                authenticationPolicy:
                                    $ref: "#/components/schemas/AuthenticationPolicyRecord"
                                passwordPolicy:
                                    $ref: "#/components/schemas/PasswordPolicyName"
                            required:
                                - authenticationPolicy
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteAuthenticationPolicy:  # deprecated
        summary: "Delete an existing authentication policy's record"
        post:
            summary: "refer to /command/securityPolicy.delete"
            deprecated: true
            tags:
                -  "Authentication Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                authenticationPolicy:
                                    $ref: "#/components/schemas/AuthenticationPolicyName"
                                migrateToAuthenticationPolicy:
                                    $ref: "#/components/schemas/AuthenticationPolicyName"
                            required:
                                - authenticationPolicy
                                - migrateToAuthenticationPolicy
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/securityPolicy.query:
        summary: "Get authentication security policy's details"
        post:
            tags:
                -  "Security Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/securityPolicy.name"
                                            - required:
                                                - securityPolicy
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of authentication policy records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        securityPolicies:
                                            allOf:
                                                - $ref: "#/components/schemas/response.securityPolicy.records"
                                    - required:
                                        - result
                                        - securityPolicies
                default:
                    $ref: "#/components/responses/generic.result"
    /command/securityPolicy.fetch:
        summary: "Fetch more authentication security policy with cursor"
        post:
            tags:
                -  "Security Policy"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of authentication policy records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        securityPolicies:
                                            allOf:
                                                - $ref: "#/components/schemas/response.securityPolicy.records"
                                    - required:
                                        - result
                                        - securityPolicies
                default:
                    $ref: "#/components/responses/generic.result"
    /command/securityPolicy.new:
        summary: "Create a new authentication security policy's record"
        post:
            tags:
                -  "Security Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    securityPolicy:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.securityPolicy.name"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.identifier"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.externalValidator"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.authenticationFlags"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.inactivityTimeout"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.maximumSessions"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.sessionExceededPolicy"
                                - $ref: "#/components/schemas/multiFactorAuthentication.name"
                                - $ref: "#/components/schemas/passwordPolicy.name"
                                - $ref: "#/components/schemas/organization.name"
                            required:
                                - securityPolicy
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/securityPolicy.update:
        summary: "Update an existing authentication security policy's record"
        post:
            tags:
                -  "Security Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/securityPolicy.name"
                                            - required:
                                                - securityPolicy
                                - type: "object"
                                  properties:
                                    securityPolicy:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.recordStatus"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.externalValidator"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.authenticationFlags"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.inactivityTimeout"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.maximumSessions"
                                            - $ref: "#/components/schemas/attribute.securityPolicy.sessionExceededPolicy"
                                - $ref: "#/components/schemas/multiFactorAuthentication.name"
                                - $ref: "#/components/schemas/passwordPolicy.name"
                                - required:
                                    - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/securityPolicy.delete:
        summary: "Delete an existing authentication security policy's record"
        post:
            tags:
                -  "Security Policy"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/securityPolicy.name"
                                            - required:
                                                - securityPolicy
                                    migrateToSecurityPolicy:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.securityPolicy.name"
                                            - required:
                                                - name
                                - required:
                                    - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetOrganization:  # deprecated
        summary: "Get organization's details"
        post:
            summary: "refer to /command/organization.query"
            deprecated: true
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/OrganizationName"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
                            required:
                                - organization
            responses:
                200:
                    description: "Returned list of organization records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    organizations:
                                        $ref: "#/components/schemas/OrganizationRecords"
                                required:
                                    - result
                                    - organizations
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchOrganization:  # deprecated
        summary: "Fetch more organization with cursor"
        post:
            summary: "refer to /command/organization.fetch"
            deprecated: true
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
                            required:
                                - cursor
            responses:
                200:
                    description: "Returned list of organization records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    organizations:
                                        $ref: "#/components/schemas/OrganizationRecords"
                                required:
                                    - result
                                    - organizations
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewOrganization:  # deprecated
        summary: "Create a new organization's record"
        post:
            summary: "refer to /command/organization.new"
            deprecated: true
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/OrganizationRecord"
                                authenticationPolicy:
                                    $ref: "#/components/schemas/AuthenticationPolicyName"
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - organization
                                - authenticationPolicy
                                - team
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateOrganization:  # deprecated
        summary: "Update an existing organization's record"
        post:
            summary: "refer to /command/organization.update"
            deprecated: true
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/OrganizationRecord"
                                authenticationPolicy:
                                    $ref: "#/components/schemas/AuthenticationPolicyName"
                                team:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - organization
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteOrganization:  # deprecated
        summary: "Update an existing organization's record"
        post:
            summary: "refer to /command/organization.delete"
            deprecated: true
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/OrganizationName"
                                migrateToOrganization:
                                    $ref: "#/components/schemas/OrganizationName"
                            required:
                                - organization
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/organization.query:
        summary: "Get organization's details"
        post:
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/organization.name"
                                            - required:
                                                - organization
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of organization records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        organizations:
                                            allOf:
                                                - $ref: "#/components/schemas/response.organization.records"
                                    - required:
                                        - result
                                        - organizations
                default:
                    $ref: "#/components/responses/generic.result"
    /command/organization.fetch:
        summary: "Fetch more organization with cursor"
        post:
            tags:
                -  "Organization"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of organization records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        organizations:
                                            allOf:
                                                - $ref: "#/components/schemas/response.organization.records"
                                    - required:
                                        - result
                                        - organizations
                default:
                    $ref: "#/components/responses/generic.result"
    /command/organization.new:
        summary: "Create a new organization's record"
        post:
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    organization:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.organization.name"
                                            - $ref: "#/components/schemas/attribute.organization.externalIdentity"
                                            - $ref: "#/components/schemas/attribute.organization.preferName"
                                            - type: "object"
                                              properties:
                                                restricted:
                                                    description: "indicates if this organization is marked as restricted (true) or unrestricted (false); default is 'false'"
                                                    type: "boolean"
                                                    example: false
                                - $ref: "#/components/schemas/securityPolicy.name"
                                - $ref: "#/components/schemas/team.name"
                            required:
                                - organization
                                - securityPolicy
                                - team
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/organization.update:
        summary: "Update an existing organization's record"
        post:
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/organization.name"
                                            - required:
                                                - organization
                                - type: "object"
                                  properties:
                                    organization:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.recordStatus"
                                            - $ref: "#/components/schemas/attribute.organization.externalIdentity"
                                            - $ref: "#/components/schemas/attribute.organization.preferName"
                                - $ref: "#/components/schemas/securityPolicy.name"
                                - $ref: "#/components/schemas/team.name"
                                - required:
                                    - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/organization.delete:
        summary: "Update an existing organization's record"
        post:
            tags:
                -  "Organization"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/organization.name"
                                            - required:
                                                - organization
                                - type: "object"
                                  properties:
                                    migrateToOrganization:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.organization.name"
                                            - required:
                                                - name
                                - required:
                                    - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetSessionUser:  # deprecated
        summary: "Get list of session user records"
        post:
            summary: "refer to /command/session.user.query"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of session user records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    totalUsers:
                                        description: "The total number of users whom has session records"
                                        type: "number"
                                    totalSessions:
                                        description: "The total number of session records in the system"
                                        type: "number"
                                    sessionUsers:
                                        $ref: "#/components/schemas/SessionUserRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchSessionUser:  # deprecated
        summary: "Fetch more session users with cursor"
        post:
            summary: "refer to /command/session.user.fetch"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of session user records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    sessionUsers:
                                        $ref: "#/components/schemas/SessionUserRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetUserSession:  # deprecated
        summary: "Get list of user's session records"
        post:
            summary: "refer to /command/session.query"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
                                user:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - user
            responses:
                200:
                    description: "Returned list of user's session records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    sessionUsers:
                                        $ref: "#/components/schemas/SessionRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchUserSession:  # deprecated
        summary: "Fetch more user's session with cursor"
        post:
            summary: "refer to /command/session.fetch"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
            responses:
                200:
                    description: "Returned list of user's session records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    sessionUsers:
                                        $ref: "#/components/schemas/SessionRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/LockSession:  # deprecated
        summary: "Lock one or more user's session records"
        post:
            summary: "refer to /command/session.lock"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - type: "object"
                                  properties:
                                    user:
                                        type: "object"
                                        properties:
                                            name:
                                                type: "string"
                                        required:
                                            - name
                                  required:
                                    - user
                                - type: "object"
                                  properties:
                                    session:
                                        type: "object"
                                        properties:
                                            identifier:
                                                type: "string"
                                        required:
                                            - identifier
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UnlockSession:  # deprecated
        summary: "Unlock one or more user's session records"
        post:
            summary: "refer to /command/session.unlock"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - type: "object"
                                  properties:
                                    user:
                                        type: "object"
                                        properties:
                                            name:
                                                type: "string"
                                        required:
                                            - name
                                  required:
                                    - user
                                - type: "object"
                                  properties:
                                    session:
                                        type: "object"
                                        properties:
                                            identifier:
                                                type: "string"
                                        required:
                                            - identifier
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteSession:  # deprecated
        summary: "Delete one or more user's session records"
        post:
            summary: "refer to /command/session.delete"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - type: "object"
                                  properties:
                                    user:
                                        type: "object"
                                        properties:
                                            name:
                                                type: "string"
                                        required:
                                            - name
                                  required:
                                    - user
                                - type: "object"
                                  properties:
                                    session:
                                        type: "object"
                                        properties:
                                            identifier:
                                                type: "string"
                                        required:
                                            - identifier
                                  required:
                                    - session
                                - type: "object"
                                  properties:
                                    session:
                                        type: "object"
                                        properties:
                                            lastActivityDateTime:
                                                type: "string"
                                                format: "date-time"
                                        required:
                                            - lastActivityDateTime
                                  required:
                                    - session
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteExpiredSession:  # deprecated
        summary: "Delete all expired user's session records"
        post:
            summary: "refer to /command/session.delete.expired"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteDeadSession:  # deprecated
        summary: "Delete all dead user's session records"
        post:
            summary: "refer to /command/session.delete.dead"
            deprecated: true
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/session.user.query:
        summary: "Get list of session user records"
        post:
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/user.name"
            responses:
                200:
                    description: "Returned list of session user records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        users:
                                            allOf:
                                                - $ref: "#/components/schemas/response.session.user.records"
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/session.user.fetch:
        summary: "Fetch more session users with cursor"
        post:
            tags:
                -  "Session"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of session user records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        users:
                                            allOf:
                                                - $ref: "#/components/schemas/response.session.user.records"
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/session.query:
        summary: "Get list of user's session records"
        post:
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/user.name"
                                            - required:
                                                - user
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of user's session records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        sessions:
                                            allOf:
                                                - $ref: "#/components/schemas/response.session.records"
                                    - required:
                                        - result
                                        - sessions
                default:
                    $ref: "#/components/responses/generic.result"
    /command/session.fetch:
        summary: "Fetch more user's session with cursor"
        post:
            tags:
                -  "Session"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of user's session records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        sessions:
                                            allOf:
                                                - $ref: "#/components/schemas/response.session.records"
                                    - required:
                                        - result
                                        - sessions
                default:
                    $ref: "#/components/responses/generic.result"
    /command/session.lock:
        summary: "Lock one or more user's session records"
        post:
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - type: "object"
                                  properties:
                                    session:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.session.identifier"
                                            - required:
                                                - identifier
                                - $ref: "#/components/schemas/user.name"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/session.unlock:
        summary: "Unlock one or more user's session records"
        post:
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - type: "object"
                                  properties:
                                    session:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.session.identifier"
                                            - required:
                                                - identifier
                                - $ref: "#/components/schemas/user.name"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/session.delete:
        summary: "Delete one or more user's session records"
        post:
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                session:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.session.identifier"
                                        - required:
                                            - identifier
                            required:
                                - session
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/session.delete.expired:
        summary: "Delete all expired user's session records"
        post:
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/session.delete.dead:
        summary: "Delete all dead user's session records"
        post:
            tags:
                -  "Session"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/biometrics.enroll:
        summary: "Enroll a device that supports biometrics"
        post:
            tags:
                -  "Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - type: "object"
                                  properties:
                                    device:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.device.publicKey"
            responses:
                200:
                    description: "Returned biometric authentication data"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        device:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.device.identifier"
                                                - $ref: "#/components/schemas/attribute.device.addedTimestamp"
                                                - $ref: "#/components/schemas/attribute.device.authenticationData"
                                    - required:
                                        - result
                                        - device
                default:
                    $ref: "#/components/responses/generic.result"
    /command/biometrics.query:
        summary: "Get list of user's biometrics enabled device records"
        post:
            tags:
                -  "Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/user.name"
                                            - type: "object"
                                              properties:
                                                device:
                                                    allOf:
                                                        - $ref: "#/components/schemas/attribute.device.identifier"
                                            - required:
                                                - user
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of user's biometrics enabled device records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        devices:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.device.identifier"
                                                    - $ref: "#/components/schemas/attribute.device.addedTimestamp"
                                                    - $ref: "#/components/schemas/attribute.device.authenticationData"
                                                    - $ref: "#/components/schemas/attribute.device.lastVerificationTimestamp"
                                                    - $ref: "#/components/schemas/attribute.device.totalVerificationAttempts"
                                                    - $ref: "#/components/schemas/attribute.device.totalFailedVerificationAttempts"
                                    - required:
                                        - result
                                        - devices
                default:
                    $ref: "#/components/responses/generic.result"
    /command/biometrics.delete:
        summary: "Delete one or all of user's biometrics enabled device records"
        post:
            tags:
                -  "Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/user.name"
                                            - type: "object"
                                              properties:
                                                device:
                                                    allOf:
                                                        - $ref: "#/components/schemas/attribute.device.identifier"
                                            - required:
                                                - user
                                - required:
                                    - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/multiFactorAuthentication.activated.users.query:
        summary: "Retrieve list of users who activate multi factor authentication"
        post:
            tags:
                -  "Multi Factor Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/user.name"
                                            - type: "object"
                                              properties:
                                                multiFactorAuthentication:
                                                    allOf:
                                                        - $ref: "#/components/schemas/attribute.multiFactorAuthentication.name"
                                                        - required:
                                                            - name
                                            - required:
                                                - user
                                                - multiFactorAuthentication
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of users and the related multi factor authentication record"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        users:
                                            allOf:
                                                - $ref: "#/components/schemas/response.multiFactorAuthentication.records"
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/multiFactorAuthentication.activated.users.fetch:
        summary: "Fetch more multi factor authentication activated users with cursor"
        post:
            tags:
                -  "Multi Factor Authentication"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of organization records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        users:
                                            allOf:
                                                - $ref: "#/components/schemas/response.multiFactorAuthentication.records"
                                    - required:
                                        - result
                                        - users
                default:
                    $ref: "#/components/responses/generic.result"
    /command/multiFactorAuthentication.user.activate:
        summary: "Activate multi factor authentication for an user"
        post:
            tags:
                -  "Multi Factor Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - type: "object"
                                  properties:
                                    multiFactorAuthentication:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.multiFactorAuthentication.name"
                                            - required:
                                                - name
                                - required:
                                    - user
                                    - multiFactorAuthentication
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/multiFactorAuthentication.user.deactivate:
        summary: "Deactivate multi factor authentication for an user"
        post:
            tags:
                -  "Multi Factor Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - required:
                                    - user
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/multiFactorAuthentication.user.reset:
        summary: "Reset User's multi factor authentication parameters"
        post:
            tags:
                -  "Multi Factor Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - required:
                                    - user
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/multiFactorAuthentication.secretCode.generate:
        summary: "Generate secret code of multi factor authentication"
        post:
            tags:
                -  "Multi Factor Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - type: "object"
                                  properties:
                                    multiFactorAuthentication:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.multiFactorAuthentication.keystream"
                                            - $ref: "#/components/schemas/attribute.multiFactorAuthentication.keystreamAddress"
                                - required:
                                    - user
            responses:
                200:
                    description: "Returned secret code"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        multiFactorAuthentication:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.multiFactorAuthentication.secretCode"
                                    - required:
                                        - result
                                        - multiFactorAuthentication
                default:
                    $ref: "#/components/responses/generic.result"
    /command/multiFactorAuthentication.secretCode.validate:
        summary: "Validate secret code of multi factor authentication"
        post:
            tags:
                -  "Multi Factor Authentication"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/user.name"
                                - type: "object"
                                  properties:
                                    multiFactorAuthentication:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.multiFactorAuthentication.keystream"
                                            - $ref: "#/components/schemas/attribute.multiFactorAuthentication.secretCode"
                                            - required:
                                                - secretCode
                                - required:
                                    - user
                                    - multiFactorAuthentication
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetCurrency:  # deprecated
        summary: "Get list of currencies"
        post:
            summary: "refer to /command/currency.query"
            deprecated: true
            security: []
            tags:
                -  "Countries & Currencies"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                currency:
                                    oneOf:
                                        - type: "object"
                                          properties:
                                            isoAlphaCode:
                                                type: "string"
                                        - type: "object"
                                          properties:
                                            isoNumericCode:
                                                type: "number"
            responses:
                200:
                    description: "Returned list of currency records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    currencies:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                currency:
                                                    $ref: "#/components/schemas/CurrencyRecord"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetCountry:  # deprecated
        summary: "Get list of countries"
        post:
            summary: "refer to /command/country.query"
            deprecated: true
            security: []
            tags:
                -  "Countries & Currencies"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                country:
                                    oneOf:
                                        - type: "object"
                                          properties:
                                            isoAlpha2Code:
                                                type: "string"
                                        - type: "object"
                                          properties:
                                            isoAlpha3Code:
                                                type: "string"
                                        - type: "object"
                                          properties:
                                            isoNumericCode:
                                                type: "number"
            responses:
                200:
                    description: "Returned list of country records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    currencies:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                country:
                                                    $ref: "#/components/schemas/CountryRecord"
                                                currency:
                                                    $ref: "#/components/schemas/CurrencyRecord"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/currency.query:
        summary: "Get list of currencies"
        post:
            security: []
            tags:
                -  "Countries & Currencies"
            requestBody:
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        type: "object"
                                        properties:
                                            currency:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.currency.isoAlphaCode"
                                                    - $ref: "#/components/schemas/attribute.currency.isoNumericCode"
            responses:
                200:
                    description: "Returned list of currency records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        currencies:
                                            allOf:
                                                - $ref: "#/components/schemas/response.currency.records"
                                    - required:
                                        - result
                                        - currencies
                default:
                    $ref: "#/components/responses/generic.result"
    /command/currency.fetch:
        summary: "Fetch more currency records with cursor"
        post:
            tags:
                -  "Countries & Currencies"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of currency records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        currencies:
                                            allOf:
                                                - $ref: "#/components/schemas/response.currency.records"
                                    - required:
                                        - result
                                        - currencies
                default:
                    $ref: "#/components/responses/generic.result"
    /command/country.query:
        summary: "Get list of countries"
        post:
            security: []
            tags:
                -  "Countries & Currencies"
            requestBody:
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        type: "object"
                                        properties:
                                            country:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.country.isoAlpha2Code"
                                                    - $ref: "#/components/schemas/attribute.country.isoAlpha3Code"
                                                    - $ref: "#/components/schemas/attribute.country.isoNumericCode"
            responses:
                200:
                    description: "Returned list of country records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        countries:
                                            allOf:
                                                - $ref: "#/components/schemas/response.country.records"
                                    - required:
                                        - result
                                        - countries
                default:
                    $ref: "#/components/responses/generic.result"
    /command/country.fetch:
        summary: "Fetch more country records with cursor"
        post:
            tags:
                -  "Countries & Currencies"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of country records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        countries:
                                            allOf:
                                                - $ref: "#/components/schemas/response.country.records"
                                    - required:
                                        - result
                                        - countries
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetPayment:  # deprecated
        summary: "Get list of payments"
        post:
            summary: "refer to /command/payment.query"
            deprecated: true
            tags:
                -  "Payment History"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    type: "object"
                                    properties:
                                        searchText:
                                            type: "string"
                                        merchant:
                                            $ref: "#/components/schemas/MerchantIdentifier"
                                        customer:
                                            $ref: "#/components/schemas/EntityIdentifier"
                                        payment:
                                            type: "object"
                                            properties:
                                                switchSequence:
                                                    type: "string"
                                                status:
                                                    type: "object"
                                                    properties:
                                                        succeeded:
                                                            type: "boolean"
                                                        failed:
                                                            type: "boolean"
                                                localDate:
                                                    type: "object"
                                                    properties:
                                                        start:
                                                            type: "string"
                                                            format: "date"
                                                        end:
                                                            type: "string"
                                                            format: "date"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of payment records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    payments:
                                        $ref: "#/components/schemas/PaymentRecords"
                                required:
                                    - result
                                    - payments
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchPayment:  # deprecated
        summary: "Fetch more payment records with cursor"
        post:
            summary: "refer to /command/payment.fetch"
            deprecated: true
            tags:
                -  "Payment History"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
                            required:
                                - cursor
            responses:
                200:
                    description: "Returned list of payment records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    payments:
                                        $ref: "#/components/schemas/PaymentRecords"
                                required:
                                    - result
                                    - payments
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetPaymentWithSwitchSequence:  # deprecated
        summary: "Get payment"
        post:
            summary: "refer to /command/payment.query"
            deprecated: true
            tags:
                -  "Payment History"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                payment:
                                    type: "object"
                                    properties:
                                        switchSequence:
                                            type: "string"
            responses:
                200:
                    description: "Returned list of payment records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    payments:
                                        $ref: "#/components/schemas/PaymentRecords"
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/payment.query:
        summary: "Get list of payments"
        post:
            tags:
                -  "Transaction History"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        type: "object"
                                        properties:
                                            searchText:
                                                description: "to filter records that consists of the text on following data elements: merchant identifier, masked payment instrument number, device identifier, transaction currency code, authorization code and transaction amount"
                                                type: "string"
                                                example: "filtered text"
                                            merchant:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.merchant.identifier"
                                            transaction:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.transaction.messageTypeIdentifier"
                                                    - $ref: "#/components/schemas/attribute.transaction.switchSequence"
                                                    - $ref: "#/components/schemas/attribute.transaction.switchChainSequence"
                                                    - $ref: "#/components/schemas/attribute.transaction.types"
                                                    - $ref: "#/components/schemas/attribute.transaction.captureModes"
                                                    - $ref: "#/components/schemas/attribute.transaction.statuses"
                                                    - $ref: "#/components/schemas/currency.isoNumericCode"
                                                    - type: "object"
                                                      properties:
                                                        messageTypeIdentifiers:
                                                            type: "array"
                                                            items:
                                                                type: "number"
                                                        localDate:
                                                            allOf:
                                                                - $ref: "#/components/schemas/attribute.localDate.start"
                                                                - $ref: "#/components/schemas/attribute.localDate.end"
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of payment records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        payments:
                                            allOf:
                                                - $ref: "#/components/schemas/response.payment.records"
                                    - required:
                                        - result
                                        - payments
                default:
                    $ref: "#/components/responses/generic.result"
    /command/payment.fetch:
        summary: "Fetch more payments with cursor"
        post:
            tags:
                -  "Transaction History"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of payment records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        payments:
                                            allOf:
                                                - $ref: "#/components/schemas/response.payment.records"
                                    - required:
                                        - result
                                        - payments
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetPaymentToken:  # deprecated
        summary: "Get payment token"
        post:
            summary: "refer to /command/paymentToken.query"
            deprecated: true
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    type: "object"
                                    properties:
                                        searchText:
                                            type: "string"
                                        merchant:
                                            $ref: "#/components/schemas/MerchantIdentifier"
                                        paymentToken:
                                            type: "object"
                                            properties:
                                                identifier:
                                                    description: "indicates the specific payment token details to retrieved"
                                                    type: "string"
                                                recordStatus:
                                                    type: "object"
                                                    properties:
                                                        active:
                                                            type: "boolean"
                                                        disable:
                                                            type: "boolean"
                                                recordDate:
                                                    type: "object"
                                                    properties:
                                                        start:
                                                            type: "string"
                                                            format: "date"
                                                        end:
                                                            type: "string"
                                                            format: "date"
                                orderBy:
                                    type: "object"
                                    properties:
                                        paymentToken:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                                    enum:
                                                        - "asc"
                                                        - "desc"
                                                amount:
                                                    type: "string"
                                                    enum:
                                                        - "asc"
                                                        - "desc"
                                                recordDate:
                                                    type: "string"
                                                    enum:
                                                        - "asc"
                                                        - "desc"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
                            required:
                                - merchant
                                - paymentToken
            responses:
                200:
                    description: "Receive result object and payment tokens on response"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    paymentTokens:
                                        $ref: "#/components/schemas/PaymentTokenRecords"
                                required:
                                    - result
                                    - paymentTokens
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchPaymentToken:  # deprecated
        summary: "Fetch more payment tokens with cursor"
        post:
            summary: "refer to /command/paymentToken.fetch"
            deprecated: true
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
                            required:
                                - cursor
            responses:
                200:
                    description: "Returned list of payment tokens"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    paymentTokens:
                                        $ref: "#/components/schemas/PaymentTokenRecords"
                                required:
                                    - result
                                    - paymentTokens
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewPaymentToken:  # deprecated
        summary: "Create a new payment token"
        post:
            summary: "refer to /command/paymentToken.new"
            deprecated: true
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                merchant:
                                    $ref: "#/components/schemas/MerchantIdentifier"
                                paymentToken:
                                    allOf:
                                        - $ref: "#/components/schemas/PaymentTokenRecord"
                                        - required:
                                            - amount
                                            - currencyCode
                                            - name
                                            - description
                                            - amountIsFlexible
                                            - payButtonText
                                url:
                                    type: "object"
                                    properties:
                                        baseURL:
                                            type: "string"
                                            format: "uri"
                                    required:
                                        - baseURL
                            required:
                                - merchant
                                - paymentToken
            responses:
                200:
                    description: "Receive result object and payment token on response"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    paymentToken:
                                        $ref: "#/components/schemas/EntityIdentifier"
                                    url:
                                        type: "object"
                                        properties:
                                            path:
                                                type: "string"
                                        required:
                                            - path
                                required:
                                    - result
                                    - paymentToken
                                    - url
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdatePaymentToken:  # deprecated
        summary: "Update a payment token"
        post:
            summary: "refer to /command/paymentToken.update"
            deprecated: true
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                paymentToken:
                                    allOf:
                                        - $ref: "#/components/schemas/RecordStatus"
                                        - $ref: "#/components/schemas/EntityIdentifier"
                                        - $ref: "#/components/schemas/PaymentTokenRecord"
                                url:
                                    type: "object"
                                    properties:
                                        baseURL:
                                            type: "string"
                                            format: "uri"
                                    required:
                                        - baseURL
                            required:
                                - paymentToken
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeletePaymentToken:  # deprecated
        summary: "Delete an existing payment token"
        post:
            summary: "refer to /command/paymentToken.delete"
            deprecated: true
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                paymentToken:
                                    $ref: "#/components/schemas/EntityIdentifier"
                            required:
                                - paymentToken
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/paymentToken.query:
        summary: "Get payment token"
        post:
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.recordStatuses"
                                            - type: "object"
                                              properties:
                                                searchText:
                                                    description: "to filter records that consists of the text on following payment token's data elements: identifier, name, currency code and amount"
                                                    type: "string"
                                                    example: "filtered text"
                                                merchant:
                                                    allOf:
                                                        - $ref: "#/components/schemas/attribute.merchant.identifier"
                                                        - required:
                                                            - identifier
                                                paymentToken:
                                                    allOf:
                                                        - $ref: "#/components/schemas/attribute.paymentToken.identifier"
                                                recordTimestamp:
                                                    allOf:
                                                        - $ref: "#/components/schemas/attribute.recordTimestamp.start"
                                                        - $ref: "#/components/schemas/attribute.recordTimestamp.end"
                                        required:
                                            - merchant
                                    orderBy:
                                        type: "object"
                                        properties:
                                            paymentToken:
                                                type: "object"
                                                properties:
                                                    name:
                                                        type: "string"
                                                        enum:
                                                            - "asc"
                                                            - "desc"
                                                    amount:
                                                        type: "string"
                                                        enum:
                                                            - "asc"
                                                            - "desc"
                                                    recordTimestamp:
                                                        type: "string"
                                                        enum:
                                                            - "asc"
                                                            - "desc"
                                - required:
                                    - filters
            responses:
                200:
                    description: "Receive result object and payment tokens on response"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        paymentTokens:
                                            allOf:
                                                - $ref: "#/components/schemas/response.paymentToken.records"
                                    - required:
                                        - result
                                        - paymentTokens
                default:
                    $ref: "#/components/responses/generic.result"
    /command/paymentToken.fetch:
        summary: "Fetch more payment tokens with cursor"
        post:
            tags:
                -  "Payment Token"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of payment tokens"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        paymentTokens:
                                            allOf:
                                                - $ref: "#/components/schemas/response.paymentToken.records"
                                    - required:
                                        - result
                                        - paymentTokens
                default:
                    $ref: "#/components/responses/generic.result"
    /command/paymentToken.new:
        summary: "Create a new payment token"
        post:
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                merchant:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.merchant.identifier"
                                        - required:
                                            - identifier
                                paymentToken:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.paymentToken.name"
                                        - $ref: "#/components/schemas/attribute.paymentToken.description"
                                        - $ref: "#/components/schemas/attribute.paymentToken.image"
                                        - $ref: "#/components/schemas/attribute.paymentToken.amount"
                                        - $ref: "#/components/schemas/attribute.paymentToken.minimumAmount"
                                        - $ref: "#/components/schemas/attribute.paymentToken.maximumAmount"
                                        - $ref: "#/components/schemas/attribute.paymentToken.amountIsFlexible"
                                        - $ref: "#/components/schemas/attribute.paymentToken.allowPromotionCodes"
                                        - $ref: "#/components/schemas/attribute.paymentToken.savePaymentDetails"
                                        - $ref: "#/components/schemas/attribute.paymentToken.requirePhoneNumber"
                                        - $ref: "#/components/schemas/attribute.paymentToken.requireBillingAddress"
                                        - $ref: "#/components/schemas/attribute.paymentToken.requireShippingAddress"
                                        - $ref: "#/components/schemas/attribute.paymentToken.payButtonText"
                                        - required:
                                            - name
                                            - description
                                            - amount
                                            - amountIsFlexible
                                            - payButtonText
                                currency:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.currency.isoNumericCode"
                                        - required:
                                            - isoNumericCode
                                url:
                                    type: "object"
                                    properties:
                                        path:
                                            description: "user defined payment url path"
                                            type: "string"
                                            format: "uri"
                                            example: "https://pay.example.com"
                                    required:
                                        - path
                            required:
                                - merchant
                                - paymentToken
                                - currency
            responses:
                200:
                    description: "Receive result object and payment token on response"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        paymentToken:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.paymentToken.identifier"
                                        url:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.url.address"
                                                - required:
                                                    - path
                                    - required:
                                        - result
                                        - paymentToken
                                        - url
                default:
                    $ref: "#/components/responses/generic.result"
    /command/paymentToken.update:
        summary: "Update a payment token"
        post:
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    type: "object"
                                    properties:
                                        paymentToken:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.paymentToken.identifier"
                                                - required:
                                                    - identifier
                                    required:
                                        - paymentToken
                                paymentToken:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.recordStatus"
                                        - $ref: "#/components/schemas/attribute.paymentToken.name"
                                        - $ref: "#/components/schemas/attribute.paymentToken.description"
                                        - $ref: "#/components/schemas/attribute.paymentToken.image"
                                        - $ref: "#/components/schemas/attribute.paymentToken.amount"
                                        - $ref: "#/components/schemas/attribute.paymentToken.minimumAmount"
                                        - $ref: "#/components/schemas/attribute.paymentToken.maximumAmount"
                                        - $ref: "#/components/schemas/attribute.paymentToken.amountIsFlexible"
                                        - $ref: "#/components/schemas/attribute.paymentToken.allowPromotionCodes"
                                        - $ref: "#/components/schemas/attribute.paymentToken.savePaymentDetails"
                                        - $ref: "#/components/schemas/attribute.paymentToken.requirePhoneNumber"
                                        - $ref: "#/components/schemas/attribute.paymentToken.requireBillingAddress"
                                        - $ref: "#/components/schemas/attribute.paymentToken.requireShippingAddress"
                                        - $ref: "#/components/schemas/attribute.paymentToken.payButtonText"
                                        - required:
                                            - name
                                            - description
                                            - amount
                                            - amountIsFlexible
                                            - payButtonText
                                currency:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.currency.isoNumericCode"
                                        - required:
                                            - isoNumericCode
                                url:
                                    type: "object"
                                    properties:
                                        path:
                                            description: "user defined payment url path"
                                            type: "string"
                                            format: "uri"
                                            example: "https://pay.example.com"
                                    required:
                                        - path
                            required:
                                - filters
                                - paymentToken
                                - currency
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/paymentToken.delete:
        summary: "Delete an existing payment token"
        post:
            tags:
                -  "Payment Token"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    type: "object"
                                    properties:
                                        paymentToken:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.paymentToken.identifier"
                                                - required:
                                                    - identifier
                                    required:
                                        - paymentToken
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetPaymentMethod:
        summary: "Get list of payment method"
        post:
            tags:
                -  "Payment Method [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                merchant:
                                    $ref: "#/components/schemas/MerchantIdentifier"
                                payment:
                                    type: "object"
                                    properties:
                                        amount:
                                            description: "The payment's value"
                                            type: "number"
                                            example: 1.23
                                        currencyCode:
                                            description: "The payment's currency in ISO numeric code"
                                            type: "integer"
                                            format: "int32"
                                            example: 840
                                        channel:
                                            description: "The platform of the shopper's device"
                                            type: "string"
                                            enum:
                                                - "web"
                                                - "ios"
                                                - "android"
                                    required:
                                        - amount
                                        - currencyCode
                                        - channel
                                customer:
                                    type: "object"
                                    properties:
                                        locale:
                                            description: "Shopper's preferred language and country code"
                                            type: "string"
                                            example: "en-US"
                                        countryCode:
                                            description: "Shopper's ISO numeric country code"
                                            type: "number"
                                            example: 840
                            required:
                                - merchant
            responses:
                default:
                    description: "Receive result object and/or payment methods on response"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    paymentMethods:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                paymentMethod:
                                                    type: "object"
                                                    properties:
                                                        name:
                                                            description: "name of the payment method to be presented on screen"
                                                            type: "string"
                                                        type:
                                                            description: "unique payment method code to be included in 'Pay' command"
                                                            type: "string"
    /command/Pay:
        summary: "Make a payment"
        post:
            tags:
                -  "Payment"
            requestBody:
                $ref: "#/components/requestBodies/PaymentRequestBody"
            responses:
                default:
                    $ref: "#/components/responses/PaymentResponse"
    /command/CapturePayment:
        summary: "Capture payment that hold separately"
        post:
            tags:
                -  "Payment [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                payment:
                                    type: "object"
                                    properties:
                                        switchSequence:
                                            type: "string"
                                        amount:
                                            description: "The payment's value"
                                            type: "number"
                                            minimum: 0
                                            example: 1.23
                                    required:
                                        - switchSequence
                                        - amount
            responses:
                default:
                    description: "Receive capture's result object on response"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
    /command/RefundPayment:
        summary: "Refund of a payment"
        post:
            tags:
                -  "Payment [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                payment:
                                    type: "object"
                                    properties:
                                        switchSequence:
                                            type: "string"
                                refund:
                                    type: "object"
                                    properties:
                                        amount:
                                            type: "number"
                                        reason:
                                            type: "string"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/SendPaymentReceipt:  # deprecated
        summary: "Send a payment receipt"
        post:
            summary: "refer to those supported send commands such as 'sendMail' and etc"
            deprecated: true
            tags:
                -  "Payment [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                payment:
                                    type: "object"
                                    properties:
                                        switchSequence:
                                            type: "string"
                                paymentReceipt:
                                    type: "object"
                                    properties:
                                        sendTo:
                                            type: "object"
                                            properties:
                                                emails:
                                                    type: "array"
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            email:
                                                                $ref: "#/components/schemas/ContactAddress"
                                                mobiles:
                                                    type: "array"
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            mobile:
                                                                $ref: "#/components/schemas/ContactAddress"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/CalculateTaxAmount:
        summary: "Calculate the tax amount of a given tax category code"
        post:
            tags:
                -  "Tax [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                taxCategory:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                                payment:
                                    type: "object"
                                    properties:
                                        amount:
                                            type: "number"
                                        currencyCode:
                                            $ref: "#/components/schemas/CurrencyCode"
                                    required:
                                        - amount
                                        - currencyCode
                                billingAddress:
                                    $ref: "#/components/schemas/MailingAddress"
                                shippingAddress:
                                    $ref: "#/components/schemas/MailingAddress"
                            required:
                                - taxCategory
                                - payment
            responses:
                200:
                    description: "Returned the calculated tax amount"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    payment:
                                        type: "object"
                                        properties:
                                            amount:
                                                type: "number"
                                            taxAmount:
                                                type: "number"
                                            currencyCode:
                                                $ref: "#/components/schemas/CurrencyCode"
                                        required:
                                            - amount
                                            - taxAmount
                                            - currencyCode
                                required:
                                    - result
                                    - payment
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/merchant.query:
        summary: "Get list of merchant"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/merchant.identifier"
                                            - $ref: "#/components/schemas/organization.name"
                                            - required:
                                                - merchant
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of merchant records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - $ref: "#/components/schemas/response.cursor"
                                    - type: "object"
                                      properties:
                                        merchants:
                                            allOf:
                                                - $ref: "#/components/schemas/response.merchant.records"
                                    - required:
                                        - result
                                        - merchants
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.fetch:
        summary: "Fetch more merchant with cursor"
        post:
            tags:
                -  "Merchant"
            requestBody:
                $ref: "#/components/requestBodies/fetch.with.cursor"
            responses:
                200:
                    description: "Returned list of merchant records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        merchants:
                                            allOf:
                                                - $ref: "#/components/schemas/response.merchant.records"
                                    - required:
                                        - result
                                        - merchants
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.new:
        summary: "Create a new merchant's record"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    merchant:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.merchant.identifier"
                                            - $ref: "#/components/schemas/attribute.merchant.parent"
                                            - $ref: "#/components/schemas/attribute.merchant.categoryCode"
                                            - $ref: "#/components/schemas/attribute.merchant.allowedCaptureMethods"
                                            - $ref: "#/components/schemas/attribute.merchant.flexibleCurrency"
                                            - $ref: "#/components/schemas/attribute.merchant.crossBorder"
                                            - $ref: "#/components/schemas/attribute.merchant.restrictedLocation"
                                            - $ref: "#/components/schemas/attribute.merchant.businessHourClose"
                                            - $ref: "#/components/schemas/attribute.merchant.allowedServices"
                                            - $ref: "#/components/schemas/attribute.merchant.restrictedLatitude"
                                            - $ref: "#/components/schemas/attribute.merchant.restrictedLongitude"
                                            - $ref: "#/components/schemas/attribute.merchant.restrictedRadius"
                                            - $ref: "#/components/schemas/attribute.merchant.effectiveTimestamp"
                                            - $ref: "#/components/schemas/attribute.merchant.expiryTimestamp"
                                - type: "object"
                                  properties:
                                    limit:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.limit.identifier"
                                            - $ref: "#/components/schemas/attribute.limit.useExtended"
                                            - $ref: "#/components/schemas/attribute.limit.dailyMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.dailyMaximumCount"
                                            - $ref: "#/components/schemas/attribute.limit.weeklyMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.weeklyMaximumCount"
                                            - $ref: "#/components/schemas/attribute.limit.monthlyMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.monthlyMaximumCount"
                                            - $ref: "#/components/schemas/attribute.limit.EMVChipMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.magneticStripeMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.manualEntryMaximumAmount"
                                - type: "object"
                                  properties:
                                    total:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.total.identifier"
                                            - $ref: "#/components/schemas/attribute.total.useExtended"
                                            - $ref: "#/components/schemas/attribute.total.accumulationMethod"
                                - type: "object"
                                  properties:
                                    fee:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.fee.identifier"
                                - $ref: "#/components/schemas/acquirer.identifier"
                                - $ref: "#/components/schemas/currency.isoNumericCode"
                                - $ref: "#/components/schemas/country.isoNumericCode"
                            required:
                                - merchant
                                - acquirer
                                - currency
                                - country
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.update:
        summary: "Update a merchant's record"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/merchant.identifier"
                                            - required:
                                                - merchant
                                - type: "object"
                                  properties:
                                    merchant:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.merchant.parent"
                                            - $ref: "#/components/schemas/attribute.merchant.categoryCode"
                                            - $ref: "#/components/schemas/attribute.merchant.allowedCaptureMethods"
                                            - $ref: "#/components/schemas/attribute.merchant.flexibleCurrency"
                                            - $ref: "#/components/schemas/attribute.merchant.crossBorder"
                                            - $ref: "#/components/schemas/attribute.merchant.restrictedLocation"
                                            - $ref: "#/components/schemas/attribute.merchant.businessHourClose"
                                            - $ref: "#/components/schemas/attribute.merchant.allowedServices"
                                            - $ref: "#/components/schemas/attribute.merchant.restrictedLatitude"
                                            - $ref: "#/components/schemas/attribute.merchant.restrictedLongitude"
                                            - $ref: "#/components/schemas/attribute.merchant.restrictedRadius"
                                            - $ref: "#/components/schemas/attribute.merchant.effectiveTimestamp"
                                            - $ref: "#/components/schemas/attribute.merchant.expiryTimestamp"
                                - type: "object"
                                  properties:
                                    fee:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.fee.identifier"
                                - $ref: "#/components/schemas/acquirer.identifier"
                                - $ref: "#/components/schemas/currency.isoNumericCode"
                                - $ref: "#/components/schemas/country.isoNumericCode"
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.delete:
        summary: "Delete a merchant's record"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/merchant.identifier"
                                            - required:
                                                - merchant
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.limit.update:
        summary: "Update a merchant's limit record"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/merchant.identifier"
                                            - required:
                                                - merchant
                                - type: "object"
                                  properties:
                                    limit:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.limit.identifier"
                                            - $ref: "#/components/schemas/attribute.limit.useExtended"
                                            - $ref: "#/components/schemas/attribute.limit.dailyMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.dailyMaximumCount"
                                            - $ref: "#/components/schemas/attribute.limit.weeklyMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.weeklyMaximumCount"
                                            - $ref: "#/components/schemas/attribute.limit.monthlyMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.monthlyMaximumCount"
                                            - $ref: "#/components/schemas/attribute.limit.EMVChipMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.magneticStripeMaximumAmount"
                                            - $ref: "#/components/schemas/attribute.limit.manualEntryMaximumAmount"
                            required:
                                - filters
                                - limit
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.total.update:
        summary: "Update a merchant's total record"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/merchant.identifier"
                                            - required:
                                                - merchant
                                - type: "object"
                                  properties:
                                    total:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.total.identifier"
                                            - $ref: "#/components/schemas/attribute.total.useExtended"
                                            - $ref: "#/components/schemas/attribute.total.accumulationMethod"
                            required:
                                - filters
                                - total
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.business.query:
        summary: "Get merchant's business profile"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/request.cursor.query"
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/merchant.identifier"
                                            - required:
                                                - merchant
                                - required:
                                    - filters
            responses:
                200:
                    description: "Returned list of merchant records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        business:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.business.preferName"
                                                - $ref: "#/components/schemas/attribute.business.otherName"
                                    - required:
                                        - result
                                        - business
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.business.new:
        summary: "Create a new merchant's business record"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/merchant.identifier"
                                - type: "object"
                                  properties:
                                    business:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.business.preferName"
                                            - $ref: "#/components/schemas/attribute.business.otherName"
                            required:
                                - merchant
                                - business
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.business.update:
        summary: "Update a merchant's business record"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/merchant.identifier"
                                            - required:
                                                - merchant
                                - type: "object"
                                  properties:
                                    business:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.business.preferName"
                                            - $ref: "#/components/schemas/attribute.business.otherName"
                            required:
                                - filters
                                - business
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.business.delete:
        summary: "Delete a merchant's business record"
        post:
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - type: "object"
                                  properties:
                                    filters:
                                        allOf:
                                            - $ref: "#/components/schemas/merchant.identifier"
                                            - required:
                                                - merchant
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.mailingAddress.query:
        summary: "Get merchant's mailing address"
        post:
            description: "Get merchant's mailing address"
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/merchant.identifier"
                                        - required:
                                            - merchant
                            required:
                                - filters
            responses:
                200:
                    description: "Returned list of merchant records"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        mailingAddresses:
                                            type: "array"
                                            items:
                                                allOf:
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.type"
                                                    - $ref: "#/components/schemas/country.isoNumericCode"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                                    - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                required:
                                    - result
                                    - mailingAddresses
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.mailingAddress.new:
        summary: "Create a new merchant's mailing address"
        post:
            description: "Create a new merchant's mailing address"
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/merchant.identifier"
                                - type: "object"
                                  properties:
                                    mailingAddress:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.mailingAddress.type"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                            - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                            - required:
                                                - type
                                    country:
                                        allOf:
                                            - $ref: "#/components/schemas/attribute.country.isoNumericCode"
                                            - required:
                                                - isoNumericCode
                                - required:
                                    - merchant
                                    - mailingAddress
                                    - country
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.mailingAddress.update:
        summary: "Update an existing merchant's mailing address"
        post:
            description: "Update an existing merchant's mailing address"
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/merchant.identifier"
                                        - $ref: "#/components/schemas/mailingAddress.type"
                                        - required:
                                            - merchant
                                            - mailingAddress
                                mailingAddress:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line1"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line2"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.line3"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.city"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.provinceState"
                                        - $ref: "#/components/schemas/attribute.mailingAddress.postalCode"
                                country:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.country.isoNumericCode"
                                        - required:
                                            - isoNumericCode
                            required:
                                - filters
                                - mailingAddress
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/merchant.mailingAddress.delete:
        summary: "Delete an existing merchant's mailing address"
        post:
            description: "Delete an existing merchant's mailing address"
            tags:
                -  "Merchant"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    allOf:
                                        - $ref: "#/components/schemas/merchant.identifier"
                                        - $ref: "#/components/schemas/mailingAddress.type"
                                        - required:
                                            - merchant
                                            - mailingAddress
                            required:
                                - filters
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetCustomer:
        summary: "Get list of customers"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    type: "object"
                                    properties:
                                        searchText:
                                            type: "string"
                                        merchant:
                                            $ref: "#/components/schemas/MerchantIdentifier"
                                        customer:
                                            type: "object"
                                            properties:
                                                identifier:
                                                    type: "string"
                                                asGuest:
                                                    type: "boolean"
                                                withAccount:
                                                    type: "boolean"
                                                recordDate:
                                                    type: "object"
                                                    properties:
                                                        start:
                                                            type: "string"
                                                            format: "date"
                                                        end:
                                                            type: "string"
                                                            format: "date"
                                orderBy:
                                    type: "object"
                                    properties:
                                        customer:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                                    enum:
                                                        - "asc"
                                                        - "desc"
                                                totalAmountSpent:
                                                    type: "string"
                                                    enum:
                                                        - "asc"
                                                        - "desc"
                                                totalAmountRefunded:
                                                    type: "string"
                                                    enum:
                                                        - "asc"
                                                        - "desc"
                                                totalAmountDisputeLost:
                                                    type: "string"
                                                    enum:
                                                        - "asc"
                                                        - "desc"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of customer records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    customers:
                                        $ref: "#/components/schemas/CustomerRecords"
                                required:
                                    - result
                                    - customers
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchCustomer:
        summary: "Fetch more customer records with cursor"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
                            required:
                                - cursor
            responses:
                200:
                    description: "Returned list of customer records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    customers:
                                        $ref: "#/components/schemas/CustomerRecords"
                                required:
                                    - result
                                    - customers
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewCustomer:
        summary: "Create a new customer"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                merchant:
                                    $ref: "#/components/schemas/MerchantIdentifier"
                                customer:
                                    allOf:
                                        - $ref: "#/components/schemas/CustomerRecord"
                                        - required:
                                            - name
                                            - email
                                billingAddress:
                                    allOf:
                                        - $ref: "#/components/schemas/BillingAddress"
                                        - required:
                                            - countryCode
                                            - addressLine1
                                            - city
                                            - provinceState
                                            - postalCode
                                shippingAddress:
                                    allOf:
                                        - $ref: "#/components/schemas/ShippingAddress"
                                        - required:
                                            - countryCode
                                            - addressLine1
                                            - city
                                            - provinceState
                                            - postalCode
                                tax:
                                    $ref: "#/components/schemas/TaxRecord"
                            required:
                                - merchant
                                - customer
                                - billingAddress
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateCustomer:
        summary: "Update a customer record"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                customer:
                                    allOf:
                                        - $ref: "#/components/schemas/RecordStatus"
                                        - $ref: "#/components/schemas/EntityIdentifier"
                                        - $ref: "#/components/schemas/CustomerRecord"
                                customerPaymentInstrument:
                                    allOf:
                                        - $ref: "#/components/schemas/EntityIdentifier"
                                        - $ref: "#/components/schemas/CustomerPaymentInstrumentRecord"
                                        - required:
                                            - identifier
                                            - number
                                            - maskedNumber
                                billingAddress:
                                    $ref: "#/components/schemas/BillingAddress"
                                shippingAddress:
                                    $ref: "#/components/schemas/ShippingAddress"
                                tax:
                                    $ref: "#/components/schemas/TaxRecord"
                            required:
                                - customer
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteCustomer:
        summary: "Delete an existing customer record"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                customer:
                                    $ref: "#/components/schemas/EntityIdentifier"
                            required:
                                - customer
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetCustomerPaymentInstrument:
        summary: "Get list of customer's payment instrument"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    type: "object"
                                    properties:
                                        customer:
                                            allOf:
                                                - $ref: "#/components/schemas/attribute.customer.identifier"
                                                - required:
                                                     - identifier
                                        customerPaymentInstrument:
                                            $ref: "#/components/schemas/customerPaymentInstrument.identifier"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of customer's payment instrument records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    customerPaymentInstruments:
                                        $ref: "#/components/schemas/CustomerPaymentInstrumentRecords"
                                required:
                                    - result
                                    - customerPaymentInstruments
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchCustomerPaymentInstrument:
        summary: "Fetch more customer's payment instrument records with cursor"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
                            required:
                                - cursor
            responses:
                200:
                    description: "Returned list of customer's payment instrument records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    customerPaymentInstruments:
                                        $ref: "#/components/schemas/CustomerPaymentInstrumentRecords"
                                required:
                                    - result
                                    - customerPaymentInstruments
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewCustomerPaymentInstrument:
        summary: "Create a new customer's payment instrument"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                customer:
                                    allOf:
                                        - $ref: "#/components/schemas/attribute.customer.identifier"
                                        - required:
                                            - identifier
                                customerPaymentInstrument:
                                    $ref: "#/components/schemas/CustomerPaymentInstrumentRecord"
                            required:
                                - customer
                                - customerPaymentInstrument
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdateCustomerPaymentInstrument:
        summary: "Update a customer's payment instrument record"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                customerPaymentInstrument:
                                    allOf:
                                        - $ref: "#/components/schemas/customerPaymentInstrument.identifier"
                                        - $ref: "#/components/schemas/CustomerPaymentInstrumentRecord"
                            required:
                                - customerPaymentInstrument
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeleteCustomerPaymentInstrument:
        summary: "Delete an existing customer's payment instrument record"
        post:
            tags:
                -  "Customer"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                customerPaymentInstrument:
                                    $ref: "#/components/schemas/customerPaymentInstrument.identifier"
                            required:
                                - customerPaymentInstrument
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetPaymentInstrumentProduct:
        summary: "Retrieve list of payment instrument's product records"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/attribute.organization.name"
                                user:
                                    $ref: "#/components/schemas/user.identifier"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
                            required:
                                - organization
            responses:
                200:
                    description: "Returned list of payment instrument's product records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    paymentInstrumentProducts:
                                        $ref: "#/components/schemas/PaymentInstrumentProductRecords"
                                required:
                                    - result
                                    - paymentInstrumentProducts
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchPaymentInstrumentProduct:
        summary: "Fetch more payment instrument's product records with cursor"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
                            required:
                                - cursor
            responses:
                200:
                    description: "Returned list of payment instrument's product records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    paymentInstrumentProducts:
                                        $ref: "#/components/schemas/PaymentInstrumentProductRecords"
                                required:
                                    - result
                                    - paymentInstrumentProducts
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewPaymentInstrumentProduct:
        summary: "Create a new payment instrument's product"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/attribute.organization.name"
                                paymentInstrumentNumber:
                                    $ref: "#/components/schemas/paymentInstrumentNumber.name"
                                paymentInstrumentSerial:
                                    $ref: "#/components/schemas/paymentInstrumentSerial.name"
                                paymentInstrumentProduct:
                                    allOf:
                                        - $ref: "#/components/schemas/PaymentInstrumentProductRecord"
                                        - required:
                                            - category
                                            - issuancePrefix
                                            - currencyCode
                                            - expiryExpectancy
                                            - expiryLife
                                            - cyclePeriod
                                            - appliedIndicator
                                            - minimumScore
                                            - kycDefaultMaximumBalance
                            required:
                                - organization
                                - paymentInstrumentNumber
                                - paymentInstrumentSerial
                                - paymentInstrumentProduct
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdatePaymentInstrumentProduct:
        summary: "Update a payment instrument's product record"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                paymentInstrumentNumber:
                                    $ref: "#/components/schemas/paymentInstrumentNumber.name"
                                paymentInstrumentSerial:
                                    $ref: "#/components/schemas/paymentInstrumentSerial.name"
                                paymentInstrumentProduct:
                                    $ref: "#/components/schemas/PaymentInstrumentProductRecord"
                            required:
                                - paymentInstrumentProduct
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeletePaymentInstrumentProduct:
        summary: "Delete an existing payment instrument's product record"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                paymentInstrumentProduct:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        type:
                                            type: "string"
                                    required:
                                        - name
                                        - type
                            required:
                                - paymentInstrumentProduct
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/ActivatePaymentInstrument:
        summary: "Activate payment instrument function for an user"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    $ref: "#/components/schemas/attribute.user.name"
                            required:
                                - user
            responses:
                200:
                    description: "Returned list of payment instrument records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    paymentInstrumentProducts:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                paymentInstrumentProduct:
                                                    type: "object"
                                                    properties:
                                                        identifier:
                                                            description: "An unique number to identify a payment instrument product"
                                                            type: "string"
                                                            example: "1"
                                                        type:
                                                            description: "type pf payment instrument product"
                                                            type: "string"
                                                            example: "wallet"
                                                        name:
                                                            description: "name of payment instrument product"
                                                            type: "string"
                                                            example: "USD Wallet"
                                required:
                                    - result
                                    - paymentInstrumentProducts
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetPaymentInstrument:
        summary: "Retrieve list of user's payment instrument records"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                user:
                                    $ref: "#/components/schemas/attribute.user.name"
                                paymentInstrument:
                                    type: "object"
                                    properties:
                                        identifier:
                                            description: "An unique number to identify a payment instrument; value of 'all' indicates to retrieve all records of an user"
                                            type: "string"
                                            example: "all"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
                            required:
                                - user
                                - paymentInstrument
            responses:
                200:
                    description: "Returned list of payment instrument records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    paymentInstruments:
                                        $ref: "#/components/schemas/PaymentInstrumentRecords"
                                required:
                                    - result
                                    - paymentInstruments
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchPaymentInstrument:
        summary: "Fetch more payment instrument records with cursor"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
                            required:
                                - cursor
            responses:
                200:
                    description: "Returned list of payment instrument records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    paymentInstruments:
                                        $ref: "#/components/schemas/PaymentInstrumentRecords"
                                required:
                                    - result
                                    - paymentInstruments
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetPaymentInstrumentDetails:
        summary: "Retrieve details of user's payment instrument record"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                paymentInstrument:
                                    $ref: "#/components/schemas/paymentInstrument.identifier"
                            required:
                                - paymentInstrument
            responses:
                200:
                    description: "Returned list of payment instrument records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    paymentInstrument:
                                        allOf:
                                            - $ref: "#/components/schemas/RecordStatus"
                                            - $ref: "#/components/schemas/CreateDateTime"
                                            - $ref: "#/components/schemas/RecordDateTime"
                                            - $ref: "#/components/schemas/paymentInstrument.identifier"
                                            - $ref: "#/components/schemas/PaymentInstrumentRecord"
                                    paymentInstrumentProduct:
                                        $ref: "#/components/schemas/paymentInstrumentProduct.identifier"
                                    paymentInstrumentFunding:
                                        $ref: "#/components/schemas/paymentInstrumentFunding.identifier"
                                    user:
                                        $ref: "#/components/schemas/user.identifier"
                                    merchant:
                                        $ref: "#/components/schemas/attribute.merchant.identifier"
                                    organization:
                                        $ref: "#/components/schemas/attribute.organization.identifier"
                                required:
                                    - result
                                    - paymentInstrument
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/NewPaymentInstrument:
        summary: "Create a new payment instrument"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/attribute.organization.name"
                                user:
                                    $ref: "#/components/schemas/attribute.user.name"
                                merchant:
                                    $ref: "#/components/schemas/attribute.merchant.identifier"
                                paymentInstrumentProduct:
                                    $ref: "#/components/schemas/paymentInstrumentProduct.identifier"
                                paymentInstrumentFunding:
                                    $ref: "#/components/schemas/paymentInstrumentFunding.identifier"
                                paymentInstrument:
                                    allOf:
                                        - type: "object"
                                          properties:
                                            description:
                                                type: "string"
                                            branch:
                                                type: "string"
                                        - $ref: "#/components/schemas/paymentInstrument.autoTopup"
                                        - required:
                                            - description
                            required:
                                - organization
                                - user
                                - paymentInstrumentProduct
                                - paymentInstrument
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/UpdatePaymentInstrument:
        summary: "Update a payment instrument record"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                paymentInstrumentFunding:
                                    $ref: "#/components/schemas/paymentInstrumentFunding.identifier"
                                paymentInstrument:
                                    allOf:
                                        - $ref: "#/components/schemas/paymentInstrument.identifier"
                                        - type: "object"
                                          properties:
                                            status:
                                                type: "string"
                                            description:
                                                type: "string"
                                            branch:
                                                type: "string"
                                        - $ref: "#/components/schemas/paymentInstrument.autoTopup"
                                        - required:
                                            - identifier
                            required:
                                - paymentInstrument
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DeletePaymentInstrument:
        summary: "Delete an existing payment instrument record"
        post:
            tags:
                -  "Payment Instrument"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                paymentInstrument:
                                    $ref: "#/components/schemas/paymentInstrument.identifier"
                            required:
                                - paymentInstrument
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetSubscribedContent:
        summary: "Retrieve list of subscribed content"
        post:
            tags:
                -  "Content"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                organization:
                                    $ref: "#/components/schemas/attribute.organization.name"
                            required:
                                - organization
            responses:
                200:
                    description: "Returned list of subscribed content records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    contents:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                content:
                                                    type: "object"
                                                    properties:
                                                        rowId:
                                                            type: "string"
                                    paymentInstrument:
                                        allOf:
                                            - $ref: "#/components/schemas/RecordStatus"
                                            - $ref: "#/components/schemas/CreateDateTime"
                                            - $ref: "#/components/schemas/RecordDateTime"
                                            - $ref: "#/components/schemas/paymentInstrument.identifier"
                                            - $ref: "#/components/schemas/PaymentInstrumentRecord"
                                    paymentInstrumentProduct:
                                        $ref: "#/components/schemas/paymentInstrumentProduct.identifier"
                                    paymentInstrumentFunding:
                                        $ref: "#/components/schemas/paymentInstrumentFunding.identifier"
                                    user:
                                        $ref: "#/components/schemas/user.identifier"
                                    merchant:
                                        $ref: "#/components/schemas/attribute.merchant.identifier"
                                    organization:
                                        $ref: "#/components/schemas/attribute.organization.identifier"
                                required:
                                    - result
                                    - paymentInstrument
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetLifeMedicalInsuranceCity:
        summary: "Get list of city object for life medical insurance"
        post:
            tags:
                -  "Life Medical Insurance [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                contentProvision:
                                    type: "object"
                                    properties:
                                        serverIdentifier:
                                            type: "string"
                                    required:
                                        - serverIdentifier
                            required:
                                - contentProvision
            responses:
                200:
                    description: "Returned list of city objects"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    lifeMedicalInsuranceCities:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                city:
                                                    type: "object"
                                                    properties:
                                                        code:
                                                            type: "string"
                                                        name:
                                                            type: "string"
                                                    required:
                                                        - code
                                                        - name
                                            required:
                                                - city
                                required:
                                    - result
                                    - lifeMedicalInsuranceCities
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetLifeMedicalInsuranceProduct:
        summary: "Get list of life medical insurance product object"
        post:
            tags:
                -  "Life Medical Insurance [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                contentProvision:
                                    type: "object"
                                    properties:
                                        serverIdentifier:
                                            type: "string"
                                    required:
                                        - serverIdentifier
                            required:
                                - contentProvision
            responses:
                200:
                    description: "Returned list of life medical insurance product objects"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    lifeMedicalInsuranceProducts:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                lifeMedicalInsuranceProduct:
                                                    type: "object"
                                                    properties:
                                                        identifier:
                                                            type: "string"
                                                        name:
                                                            type: "string"
                                                        description:
                                                            type: "string"
                                                        status:
                                                            type: "string"
                                                            enum:
                                                                - "active"
                                                                - "inactive"
                                                        type:
                                                            type: "string"
                                                            enum:
                                                                - "individual"
                                                                - "family"
                                                    required:
                                                        - identifier
                                                        - name
                                                        - description
                                                        - status
                                                        - type
                                            required:
                                                - lifeMedicalInsuranceProduct
                                required:
                                    - result
                                    - lifeMedicalInsuranceProducts
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetLifeMedicalInsurancePlan:
        summary: "Get list of life medical insurance plan object"
        post:
            tags:
                -  "Life Medical Insurance [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                contentProvision:
                                    type: "object"
                                    properties:
                                        serverIdentifier:
                                            type: "string"
                                    required:
                                        - serverIdentifier
                                lifeMedicalInsuranceProduct:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                            required:
                                - contentProvision
            responses:
                200:
                    description: "Returned list of life medical insurance plan objects"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    lifeMedicalInsurancePlans:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                lifeMedicalInsuranceProduct:
                                                    type: "object"
                                                    properties:
                                                        identifier:
                                                            type: "string"
                                                    required:
                                                        - identifier
                                                lifeMedicalInsurancePlan:
                                                    type: "object"
                                                    properties:
                                                        identifier:
                                                            type: "string"
                                                        name:
                                                            type: "string"
                                                        description:
                                                            type: "string"
                                                        recordStatus:
                                                            type: "string"
                                                            enum:
                                                                - "active"
                                                                - "inactive"
                                                        maximumHospitalizationCoverage:
                                                            type: "number"
                                                        premiumType:
                                                            type: "string"
                                                            enum:
                                                                - "flat"
                                                                - "band"
                                                        premiumAmount:
                                                            type: "number"
                                                        outpatientCoverageType:
                                                            type: "string"
                                                            enum:
                                                                - "individual"
                                                                - "family"
                                                        maximumOutpatientCoverage:
                                                            type: "number"
                                                        maximumHospitalizationRoomCoveragePerDay:
                                                            type: "number"
                                                        maximumNormalDeliveryCoverage:
                                                            type: "number"
                                                        maximumCSectionDeliveryCoverage:
                                                            type: "number"
                                                        maternityPremiumType:
                                                            type: "string"
                                                            enum:
                                                                - "flat"
                                                                - "band"
                                                        maternityPremiumAmount:
                                                            type: "number"
                                                        minimumMaternityCoverageAge:
                                                            type: "integer"
                                                            format: "int32"
                                                        maximumMaternityCoverageAge:
                                                            type: "integer"
                                                            format: "int32"
                                                        maternityCoverage:
                                                            type: "boolean"
                                                        minimumHospitalizationCoverageAge:
                                                            type: "integer"
                                                            format: "int32"
                                                        maximumHospitalizationCoverageAge:
                                                            type: "integer"
                                                            format: "int32"
                                                    required:
                                                        - identifier
                                                        - name
                                                        - description
                                                        - status
                                                        - type
                                            required:
                                                - lifeMedicalInsuranceProduct
                                required:
                                    - result
                                    - lifeMedicalInsuranceProducts
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetLifeMedicalInsurancePlanBandPremiumsByProduct:
        summary: "Get list of life medical insurance plan premium by product"
        post:
            tags:
                -  "Life Medical Insurance [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                contentProvision:
                                    type: "object"
                                    properties:
                                        serverIdentifier:
                                            type: "string"
                                    required:
                                        - serverIdentifier
                                lifeMedicalInsuranceProduct:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                            required:
                                - contentProvision
                                - lifeMedicalInsuranceProduct
            responses:
                200:
                    description: "Returned list of life medical insurance plan premiums"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    lifeMedicalInsurancePremiums:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                lifeMedicalInsuranceProduct:
                                                    type: "object"
                                                    properties:
                                                        identifier:
                                                            type: "string"
                                                    required:
                                                        - identifier
                                                lifeMedicalInsurancePlan:
                                                    type: "object"
                                                    properties:
                                                        identifier:
                                                            type: "string"
                                                lifeMedicalInsurancePremium:
                                                    type: "object"
                                                    properties:
                                                        minimumAge:
                                                            type: "integer"
                                                            format: "int32"
                                                        maximumAge:
                                                            type: "integer"
                                                            format: "int32"
                                                        hospitalizationPremiumForMale:
                                                            type: "number"
                                                        hospitalizationPremiumForFemale:
                                                            type: "number"
                                                        maternityPremiumAmount:
                                                            type: "number"
                                                        outPatientPremiumAmount:
                                                            type: "number"
                                                    required:
                                                        - minimumAge
                                                        - maximumAge
                                                        - hospitalizationPremiumForMale
                                                        - hospitalizationPremiumForFemale
                                                        - maternityPremiumAmount
                                                        - outPatientPremiumAmount
                                            required:
                                                - lifeMedicalInsuranceProduct
                                                - lifeMedicalInsurancePlan
                                                - lifeMedicalInsurancePremium
                                required:
                                    - result
                                    - lifeMedicalInsurancePremiums
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetLifeMedicalInsurancePlanBandPremiumsByPlan:
        summary: "Get list of life medical insurance plan premium by plan"
        post:
            tags:
                -  "Life Medical Insurance [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                contentProvision:
                                    type: "object"
                                    properties:
                                        serverIdentifier:
                                            type: "string"
                                    required:
                                        - serverIdentifier
                                lifeMedicalInsuranceProduct:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                                lifeMedicalInsurancePlan:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                            required:
                                - contentProvision
                                - lifeMedicalInsurancePlan
            responses:
                200:
                    description: "Returned list of life medical insurance plan premiums"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    lifeMedicalInsurancePremiums:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                lifeMedicalInsuranceProduct:
                                                    type: "object"
                                                    properties:
                                                        identifier:
                                                            type: "string"
                                                    required:
                                                        - identifier
                                                lifeMedicalInsurancePlan:
                                                    type: "object"
                                                    properties:
                                                        identifier:
                                                            type: "string"
                                                lifeMedicalInsurancePremium:
                                                    type: "object"
                                                    properties:
                                                        minimumAge:
                                                            type: "integer"
                                                            format: "int32"
                                                        maximumAge:
                                                            type: "integer"
                                                            format: "int32"
                                                        hospitalizationPremiumForMale:
                                                            type: "number"
                                                        hospitalizationPremiumForFemale:
                                                            type: "number"
                                                        maternityPremiumAmount:
                                                            type: "number"
                                                        outPatientPremiumAmount:
                                                            type: "number"
                                                    required:
                                                        - minimumAge
                                                        - maximumAge
                                                        - hospitalizationPremiumForMale
                                                        - hospitalizationPremiumForFemale
                                                        - maternityPremiumAmount
                                                        - outPatientPremiumAmount
                                            required:
                                                - lifeMedicalInsurancePlan
                                                - lifeMedicalInsurancePremium
                                required:
                                    - result
                                    - lifeMedicalInsurancePremiums
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetLifeMedicalInsurancePlanPremiumToPay:
        summary: "Get the life medical insurance plan premium for payment"
        post:
            tags:
                -  "Life Medical Insurance [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                contentProvision:
                                    type: "object"
                                    properties:
                                        serverIdentifier:
                                            type: "string"
                                    required:
                                        - serverIdentifier
                                lifeMedicalInsuranceProduct:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                                lifeMedicalInsurancePlan:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                                insuredPersons:
                                    type: "array"
                                    items:
                                        type: "object"
                                        properties:
                                            insuredPerson:
                                                type: "object"
                                                properties:
                                                    name:
                                                        type: "string"
                                                    gender:
                                                        type: "string"
                                                        enum:
                                                            - "M"
                                                            - "F"
                                                    nationalRegistrationIdentityCard:
                                                        type: "string"
                                                    birthdate:
                                                        type: "string"
                                                        format: "date"
                                                    emailAddress:
                                                        type: "string"
                                                        format: "email"
                                                    phoneNumber:
                                                        type: "string"
                                                    maternityCoverage:
                                                        type: "boolean"
                                                    relationship:
                                                        type: "string"
                                                        enum:
                                                            - "self"
                                                            - "spouse"
                                                            - "child"
                                                required:
                                                    - name
                                                    - gender
                                                    - nationalRegistrationIdentityCard
                                                    - birthdate
                                                    - maternityCoverage
                                            correspondenceAddress:
                                                $ref: "#/components/schemas/MailingAddress"
                            required:
                                - contentProvision
                                - lifeMedicalInsurancePlan
                                - insuredPersons
            responses:
                200:
                    description: "Returned life medical insurance plan premium"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    lifeMedicalInsurancePolicy:
                                        type: "object"
                                        properties:
                                            referenceNumber:
                                                type: "string"
                                        required:
                                            - referenceNumber
                                    insuredPersons:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                insuredPerson:
                                                    type: "object"
                                                    properties:
                                                        name:
                                                            type: "string"
                                                        gender:
                                                            type: "string"
                                                            enum:
                                                                - "M"
                                                                - "F"
                                                        nationalRegistrationIdentityCard:
                                                            type: "string"
                                                        birthdate:
                                                            type: "string"
                                                            format: "date"
                                                        emailAddress:
                                                            type: "string"
                                                            format: "email"
                                                        phoneNumber:
                                                            type: "string"
                                                        maternityCoverage:
                                                            type: "boolean"
                                                        relationship:
                                                            type: "string"
                                                            enum:
                                                                - "self"
                                                                - "spouse"
                                                                - "child"
                                                        insurancePremiumReferenceNumber:
                                                            type: "string"
                                                        netPremiumAmount:
                                                            type: "number"
                                                        hospitalizationCoveragePremiumAmount:
                                                            type: "number"
                                                        maternityCoveragePremiumAmount:
                                                            type: "number"
                                                        discountAmounnt:
                                                            type: "number"
                                                    required:
                                                        - name
                                                        - gender
                                                        - nationalRegistrationIdentityCard
                                                        - birthdate
                                                        - maternityCoverage
                                                correspondenceAddress:
                                                    $ref: "#/components/schemas/MailingAddress"
                                required:
                                    - result
                                    - lifeMedicalInsurancePolicy
                                    - insuredPersons
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/PayLifeMedicalInsurancePlanPremium:
        summary: "Purchase life medical insurance policy"
        post:
            tags:
                -  "Life Medical Insurance [TODO]"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                contentProvision:
                                    type: "object"
                                    properties:
                                        serverIdentifier:
                                            type: "string"
                                    required:
                                        - serverIdentifier
                                lifeMedicalInsurancePlan:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                                lifeMedicalInsurancePolicy:
                                    type: "object"
                                    properties:
                                        referenceNumber:
                                            type: "string"
                                    required:
                                        - referenceNumber
                                insuredPersons:
                                    type: "array"
                                    items:
                                        type: "object"
                                        properties:
                                            insuredPerson:
                                                type: "object"
                                                properties:
                                                    name:
                                                        type: "string"
                                                    gender:
                                                        type: "string"
                                                        enum:
                                                            - "M"
                                                            - "F"
                                                    nationalRegistrationIdentityCard:
                                                        type: "string"
                                                    birthdate:
                                                        type: "string"
                                                        format: "date"
                                                    emailAddress:
                                                        type: "string"
                                                        format: "email"
                                                    phoneNumber:
                                                        type: "string"
                                                    maternityCoverage:
                                                        type: "boolean"
                                                    relationship:
                                                        type: "string"
                                                        enum:
                                                            - "self"
                                                            - "spouse"
                                                            - "child"
                                                    insurancePremiumReferenceNumber:
                                                        type: "string"
                                                    netPremiumAmount:
                                                        type: "number"
                                                    hospitalizationCoveragePremiumAmount:
                                                        type: "number"
                                                    maternityCoveragePremiumAmount:
                                                        type: "number"
                                                    discountAmounnt:
                                                        type: "number"
                                                required:
                                                    - name
                                                    - gender
                                                    - nationalRegistrationIdentityCard
                                                    - birthdate
                                                    - maternityCoverage
                                            correspondenceAddress:
                                                $ref: "#/components/schemas/MailingAddress"
                            required:
                                - contentProvision
                                - lifeMedicalInsurancePolicy
            responses:
                200:
                    description: "Returned the details of life medical insurance policy"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    lifeMedicalInsurancePolicy:
                                        type: "object"
                                        properties:
                                            referenceNumber:
                                                type: "string"
                                            identifier:
                                                description: "unique policy number to service provider"
                                                type: "string"
                                            issuanceDate:
                                                type: "string"
                                                format: "date"
                                            coverageStartDate:
                                                type: "string"
                                                format: "date"
                                            coverageEndDate:
                                                type: "string"
                                                format: "date"
                                            grossPremiumAmount:
                                                type: "number"
                                            netPremiumAmount:
                                                type: "number"
                                            policyCode:
                                                type: "string"
                                            invoiceURL:
                                                type: "string"
                                                format: "url"
                                        required:
                                            - identifier
                                            - issuanceDate
                                            - coverageStartDate
                                            - coverageEndDate
                                required:
                                    - result
                                    - lifeMedicalInsurancePolicy
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/DestroyCursor:  # deprecated
        summary: "Destroy an existing cursor"
        post:
            summary: "refer to /command/sql.destroy.cursor"
            deprecated: true
            tags:
                -  "Cursor"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                            required:
                                - cursor
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/sql.destroy.cursor:
        summary: "Destroy an existing cursor"
        post:
            tags:
                -  "Cursor"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    allOf:
                                        - $ref: "#/components/schemas/cursor.identifier"
                                        - required:
                                            - identifier
                            required:
                                - cursor
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/GetTransactionHistory:
        summary: "Get list of transaction history"
        post:
            tags:
                -  "Transaction History"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                filters:
                                    type: "object"
                                    properties:
                                        searchText:
                                            type: "string"
                                        merchant:
                                            type: "object"
                                            properties:
                                                identifier:
                                                    type: "string"
                                        transaction:
                                            type: "object"
                                            properties:
                                                messageTypeIdentifiers:
                                                    type: "array"
                                                    items:
                                                        type: "number"
                                                currencyCode:
                                                    type: "integer"
                                                    format: "int32"
                                                switchSequence:
                                                    type: "string"
                                                type:
                                                    type: "object"
                                                    properties:
                                                        purchase:
                                                            type: "boolean"
                                                        refund:
                                                            type: "boolean"
                                                status:
                                                    type: "object"
                                                    properties:
                                                        success:
                                                            type: "boolean"
                                                        failed:
                                                            type: "boolean"
                                                captureMode:
                                                    type: "object"
                                                    properties:
                                                        chip:
                                                            type: "boolean"
                                                        magneticStripe:
                                                            type: "boolean"
                                                        manualEntry:
                                                            type: "boolean"
                                                localDate:
                                                    type: "object"
                                                    properties:
                                                        start:
                                                            type: "string"
                                                            format: "date"
                                                        end:
                                                            type: "string"
                                                            format: "date"
                                cursor:
                                    $ref: "#/components/schemas/CursorRecordCountOnRequest"
            responses:
                200:
                    description: "Returned list of transaction history records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    cursor:
                                        $ref: "#/components/schemas/CursorOnResponse"
                                    transactions:
                                        $ref: "#/components/schemas/TransactionRecords"
                                required:
                                    - result
                                    - transactions
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/FetchTransactionHistory:
        summary: "Fetch more transaction history records with cursor"
        post:
            tags:
                -  "Transaction History"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                cursor:
                                    $ref: "#/components/schemas/CursorOnRequest"
                            required:
                                - cursor
            responses:
                200:
                    description: "Returned list of transaction history records"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    transactions:
                                        $ref: "#/components/schemas/TransactionRecords"
                                required:
                                    - result
                                    - transactions
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/GetConfigurationFile:
        summary: "Retrieve list of configuration files"
        post:
            tags:
                -  "Configuration Service"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                file:
                                    type: "object"
                                    properties:
                                        name:
                                            description: "wildcard expression to retrive full list of configuration files"
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - file
            responses:
                200:
                    description: "Returned list of configuration files"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    paths:
                                        type: "array"
                                        items:
                                            type: "string"
                                    files:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                            required:
                                                - name
                                required:
                                    - result
                                    - paths
                                    - files
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/ReadConfigurationFile:
        summary: "Retrieve content of configuration file"
        post:
            tags:
                -  "Configuration Service"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                file:
                                    type: "object"
                                    properties:
                                        name:
                                            description: "name of file which the content to be retrieved"
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - file
            responses:
                200:
                    description: "Returned content of configuration file"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    files:
                                        type: "array"
                                        items:
                                            type: "object"
                                            properties:
                                                name:
                                                    type: "string"
                                                content:
                                                    type: "string"
                                            required:
                                                - name
                                                - content
                                required:
                                    - result
                                    - files
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/WriteConfigurationFile:
        summary: "Write content to configuration file"
        post:
            tags:
                -  "Configuration Service"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                file:
                                    type: "object"
                                    properties:
                                        name:
                                            description: "name of file which the content to be written to"
                                            type: "string"
                                        content:
                                            description: "content to be written to"
                                            type: "string"
                                    required:
                                        - name
                                        - content
                            required:
                                - file
            responses:
                200:
                    description: "Returned result of the operation"
                    content:
                        application/json:
                            schema:
                                type: "object"
                                properties:
                                    result:
                                        $ref: "#/components/schemas/ResponseResult"
                                    file:
                                        type: "object"
                                        properties:
                                            name:
                                                description: "name of file which the content was written to"
                                                type: "string"
                                            backup:
                                                description: "name of backup file which the content was written to"
                                                type: "string"
                                            size:
                                                description: "bytes of the content was written to"
                                                type: "number"
                                        required:
                                            - name
                                            - size
                                required:
                                    - result
                                    - file
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /command/kswitch.institution.add:
        summary: "Dynamic load an institution"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                institution:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                            required:
                                - institution
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.institution.remove:
        summary: "Dynamic unload an institution"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                institution:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                            required:
                                - institution
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.institution.enable:
        summary: "Dynamic enable an institution"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                institution:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                            required:
                                - institution
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.institution.disable:
        summary: "Dynamic disable an institution"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                institution:
                                    type: "object"
                                    properties:
                                        identifier:
                                            type: "string"
                                    required:
                                        - identifier
                            required:
                                - institution
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.route.add:
        summary: "Dynamic load a route"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                route:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - route
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.route.remove:
        summary: "Dynamic unload a route"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                route:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                        options:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - route
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.route.enable:
        summary: "Dynamic enable a route"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                route:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - route
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.route.disable:
        summary: "Dynamic disable a route"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                route:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - route
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.link.add:
        summary: "Dynamic load a link"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                link:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - link
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.link.remove:
        summary: "Dynamic unload a link"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                link:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - link
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.link.enable:
        summary: "Dynamic enable a link"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                link:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - link
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.link.disable:
        summary: "Dynamic disable a link"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                link:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - link
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.transaction.add:
        summary: "Dynamic load a transaction"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                transaction:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - transaction
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.transaction.remove:
        summary: "Dynamic unload a transaction"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                transaction:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - transaction
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.transaction.enable:
        summary: "Dynamic enable a transaction"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                transaction:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - route
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.transaction.disable:
        summary: "Dynamic disable a transaction"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                transaction:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - transaction
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.transaction.list:
        summary: "List transaction"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                transaction:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - transaction
            responses:
                default:
                    description: "Receive list of transactions on success response"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        transactions:
                                            type: "array"
                                            items:
                                                type: "object"
                                    - required:
                                        - result
    /command/kswitch.institutions:
        summary: "List institutions"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    description: "Receive list of institutions on success response"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        institutions:
                                            type: "array"
                                            items:
                                                type: "object"
                                    - required:
                                        - result
    /command/kswitch.server.stat:
        summary: "List servers"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    description: "Receive list of server statistic on success response"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        server:
                                            type: "array"
                                            items:
                                                type: "object"
                                    - required:
                                        - result
    /command/kswitch.links:
        summary: "List links/routes"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    description: "Receive list of links on success response"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        routes:
                                            type: "array"
                                            items:
                                                type: "object"
                                        links:
                                            type: "array"
                                            items:
                                                type: "object"
                                    - required:
                                        - result
    /command/kswitch.process.list:
        summary: "List of processes"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    description: "Receive list of proceses on success response"
                    content:
                        application/json:
                            schema:
                                allOf:
                                    - $ref: "#/components/schemas/response.result"
                                    - type: "object"
                                      properties:
                                        processes:
                                            type: "array"
                                            items:
                                                type: "object"
                                    - required:
                                        - result
    /command/kswitch.process.stop:
        summary: "Stop a process"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                process:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - process
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.process.start:
        summary: "Start a process"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                process:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - process
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.process.restart:
        summary: "Restart a process"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                process:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - process
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.process.disable:
        summary: "Disable a process"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                process:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - process
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.process.enable:
        summary: "Enable a process"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                process:
                                    type: "object"
                                    properties:
                                        name:
                                            type: "string"
                                    required:
                                        - name
                            required:
                                - process
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.server.status:
        summary: "Server's status"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.server.stop:
        summary: "Stop server"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/kswitch.server.start:
        summary: "Start server"
        post:
            tags:
                -  "KSwitch"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
            responses:
                default:
                    $ref: "#/components/responses/generic.result"
    /command/sendMail:
        summary: "Send email"
        post:
            tags:
                -  "Email Service"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: "object"
                            properties:
                                mail:
                                    type: "object"
                                    properties:
                                        from:
                                            description: "sender's email address"
                                            type: "string"
                                        to:
                                            description: "list of receiver's email addressses with comma as seperator"
                                            type: "string"
                                        subject:
                                            description: "Email's subject"
                                            type: "string"
                                        text:
                                            description: "Email body in text format"
                                            type: "string"
                                        html:
                                            description: "Email body in html format"
                                            type: "string"
                                    required:
                                        - from
                                        - to
                                        - subject
                                        - text
                            required:
                                - mail
                        examples:
                            "Single Recipient":
                                value:
                                    mail:
                                        from: "'Sender' <sender@example.com>"
                                        to: "'recipient' <recipient@example.com>"
                                        subject: "single recipient"
                                        text: "Email to SINGLE recipient"
                                        html: "<p>Email to <b>SINGLE</b> recipient</p>"
                            "Multiple Recipients":
                                value:
                                    mail:
                                        from: "'Sender' <sender@example.com>"
                                        to: "'recipient 1' <recipient_1@example.com>; 'recipient 2' <recipient_2@example.com>"
                                        subject: "multiple recipients"
                                        text: "Email to MULTIPLE recipient"
                                        html: "<p>Email to <b>MULTIPLE</b> recipient</p>"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
    /image/{usage}/{identifier}:
        summary: "Image Upload & Retrieval"
        parameters:
            - name: "usage"
              in: "path"
              description: "usage of an image"
              required: true
              schema:
                type: "string"
            - name: "identifier"
              in: "path"
              description: "identifier of an image"
              required: true
              schema:
                type: "string"
        get:
            tags:
                - "Images"
            summary: "Retrieve An Image"
            responses:
                "200":
                    description: "Successful operation"
                    content:
                        image/*:
                            schema:
                                type: "string"
                                format: "binary"
        post:
            tags:
                - "Images"
            summary: "Upload An Image"
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: "object"
                            properties:
                                image:
                                    type: "string"
                                    format: "binary"
            responses:
                default:
                    $ref: "#/components/responses/ResultOnlyResponse"
